# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

class AST::Node
  def +(array); end

  def <<(element); end

  def ==(other); end

  def append(element); end

  def assign_properties(properties); end

  def children(); end

  def clone(); end

  def concat(array); end

  def deconstruct(); end

  def eql?(other); end

  def fancy_type(); end

  def initialize(type, children=T.unsafe(nil), properties=T.unsafe(nil)); end

  def inspect(indent=T.unsafe(nil)); end

  def to_a(); end

  def to_ast(); end

  def to_s(indent=T.unsafe(nil)); end

  def to_sexp(indent=T.unsafe(nil)); end

  def to_sexp_array(); end

  def type(); end

  def updated(type=T.unsafe(nil), children=T.unsafe(nil), properties=T.unsafe(nil)); end
end

module AST::Processor::Mixin
  def handler_missing(node); end

  def process(node); end

  def process_all(nodes); end
end

module AST::Sexp
  def s(type, *children); end
end

class AbstractController::DoubleRenderError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
end

module AbstractController::Rendering
  DEFAULT_PROTECTED_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
end

module ActionCable
  INTERNAL = ::T.let(nil, ::T.untyped)
end

module ActionCable::Channel::TestCase::Behavior
  CHANNEL_IDENTIFIER = ::T.let(nil, ::T.untyped)
end

class ActionCable::Connection::ClientSocket
  CLOSED = ::T.let(nil, ::T.untyped)
  CLOSING = ::T.let(nil, ::T.untyped)
  CONNECTING = ::T.let(nil, ::T.untyped)
  OPEN = ::T.let(nil, ::T.untyped)
end

module ActionCable::Connection::TestCase::Behavior
  DEFAULT_PATH = ::T.let(nil, ::T.untyped)
end

class ActionCable::RemoteConnections::RemoteConnection
  include ::ActionCable::Connection::InternalChannel
end

module ActionCable::Server::Connections
  BEAT_INTERVAL = ::T.let(nil, ::T.untyped)
end

class ActionCable::SubscriptionAdapter::Redis
  include ::ActionCable::SubscriptionAdapter::ChannelPrefix
  def initialize(*arg); end

  def redis_connection_for_subscriptions(); end

  def redis_connector(); end

  def redis_connector=(val); end
end

class ActionCable::SubscriptionAdapter::Redis::Listener
  def initialize(adapter, config_options, event_loop); end

  def invoke_callback(*arg); end

  def listen(conn); end

  def shutdown(); end
end

ActionCable::SubscriptionAdapter::Redis::Listener::ConnectionError = RedisClient::ConnectionError

class ActionCable::SubscriptionAdapter::Redis::Listener
end

class ActionCable::SubscriptionAdapter::Redis
  def self.redis_connector(); end

  def self.redis_connector=(val); end
end

class ActionCable::SubscriptionAdapter::SolidCable
  include ::ActionCable::SubscriptionAdapter::ChannelPrefix
end

class ActionCable::SubscriptionAdapter::SolidCable::Listener
  SELF_PIPE_BLOCK_SIZE = ::T.let(nil, ::T.untyped)
end

module ActionCable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActionController::AllowBrowser::BrowserBlocker
  SETS = ::T.let(nil, ::T.untyped)
end

class ActionController::Base
  include ::Turbo::Native::Navigation
  include ::Turbo::Frames::FrameRequest
end

module ActionController::DataStreaming
  DEFAULT_SEND_FILE_DISPOSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SEND_FILE_TYPE = ::T.let(nil, ::T.untyped)
end

module ActionController::HttpAuthentication::Token
  AUTHN_PAIR_DELIMITERS = ::T.let(nil, ::T.untyped)
  TOKEN_KEY = ::T.let(nil, ::T.untyped)
  TOKEN_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionController::Live::SSE
  PERMITTED_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionController::LogSubscriber
  INTERNAL_PARAMS = ::T.let(nil, ::T.untyped)
end

class ActionController::MiddlewareStack
  EXCLUDE = ::T.let(nil, ::T.untyped)
  INCLUDE = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
end

class ActionController::Parameters
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  PERMITTED_SCALAR_TYPES = ::T.let(nil, ::T.untyped)
end

module ActionController::ParamsWrapper
  EXCLUDE_PARAMETERS = ::T.let(nil, ::T.untyped)
end

module ActionController::Redirecting
  ILLEGAL_HEADER_VALUE_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionController::Renderer
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

module ActionController::Renderers
  def _render_with_renderer_turbo_stream(turbo_streams_html, options); end
end

module ActionController::RequestForgeryProtection
  AUTHENTICITY_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
  CSRF_TOKEN = ::T.let(nil, ::T.untyped)
  NULL_ORIGIN_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActionController::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionController::TestSession
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
  def code(); end

  def code_and_name(); end

  def initialize(code_or_name); end

  def name(); end
  GENERIC_RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssertionResponse
end

module ActionDispatch::Assertions::ResponseAssertions
  RESPONSE_PREDICATES = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::AssumeSSL
  def call(env); end

  def initialize(app); end
end

class ActionDispatch::AssumeSSL
end

module ActionDispatch::Constants
  CONTENT_ENCODING = ::T.let(nil, ::T.untyped)
  CONTENT_SECURITY_POLICY = ::T.let(nil, ::T.untyped)
  CONTENT_SECURITY_POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
  FEATURE_POLICY = ::T.let(nil, ::T.untyped)
  LOCATION = ::T.let(nil, ::T.untyped)
  SERVER_TIMING = ::T.let(nil, ::T.untyped)
  STRICT_TRANSPORT_SECURITY = ::T.let(nil, ::T.untyped)
  VARY = ::T.let(nil, ::T.untyped)
  X_CASCADE = ::T.let(nil, ::T.untyped)
  X_REQUEST_ID = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::ContentSecurityPolicy::Request
  NONCE = ::T.let(nil, ::T.untyped)
  NONCE_DIRECTIVES = ::T.let(nil, ::T.untyped)
  NONCE_GENERATOR = ::T.let(nil, ::T.untyped)
  POLICY = ::T.let(nil, ::T.untyped)
  POLICY_REPORT_ONLY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies
  AUTHENTICATED_ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  COOKIES_DIGEST = ::T.let(nil, ::T.untyped)
  COOKIES_ROTATIONS = ::T.let(nil, ::T.untyped)
  COOKIES_SAME_SITE_PROTECTION = ::T.let(nil, ::T.untyped)
  COOKIES_SERIALIZER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_CIPHER = ::T.let(nil, ::T.untyped)
  ENCRYPTED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  ENCRYPTED_SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  GENERATOR_KEY = ::T.let(nil, ::T.untyped)
  HTTP_HEADER = ::T.let(nil, ::T.untyped)
  MAX_COOKIE_SIZE = ::T.let(nil, ::T.untyped)
  SECRET_KEY_BASE = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_DIGEST = ::T.let(nil, ::T.untyped)
  SIGNED_COOKIE_SALT = ::T.let(nil, ::T.untyped)
  USE_AUTHENTICATED_COOKIE_ENCRYPTION = ::T.let(nil, ::T.untyped)
  USE_COOKIES_WITH_METADATA = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Cookies::CookieJar
  include ::ActionDispatch::Cookies::ChainedCookieJars
end

ActionDispatch::Cookies::SerializedCookieJars::SERIALIZER = ActiveSupport::MessageEncryptor::NullSerializer

class ActionDispatch::DebugLocks
  def call(env); end

  def initialize(app, path=T.unsafe(nil)); end
end

class ActionDispatch::DebugLocks
end

class ActionDispatch::DebugView
  def debug_hash(object); end

  def debug_headers(headers); end

  def debug_params(params); end

  def initialize(assigns); end

  def params_valid?(); end

  def protect_against_forgery?(); end

  def render(*arg); end
  RESCUES_TEMPLATE_PATHS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::DebugView
end

class ActionDispatch::ExceptionWrapper::SourceMapLocation
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::FileHandler
  PRECOMPRESSED = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Flash
  KEY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::HostAuthorization
  ALLOWED_HOSTS_IN_DEVELOPMENT = ::T.let(nil, ::T.untyped)
  IPV4_HOSTNAME = ::T.let(nil, ::T.untyped)
  IPV6_HOSTNAME = ::T.let(nil, ::T.untyped)
  IPV6_HOSTNAME_WITH_PORT = ::T.let(nil, ::T.untyped)
  PORT_REGEX = ::T.let(nil, ::T.untyped)
  SUBDOMAIN_REGEX = ::T.let(nil, ::T.untyped)
  VALID_IP_HOSTNAME = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::HostAuthorization::DefaultResponseApp
  RESPONSE_STATUS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Http::Cache::Response
  IMMUTABLE = ::T.let(nil, ::T.untyped)
  NO_STORE = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration
end

module ActionDispatch::Integration::RequestHelpers
  def delete(path, **args); end

  def follow_redirect!(headers: T.unsafe(nil), **args); end

  def get(path, **args); end

  def head(path, **args); end

  def options(path, **args); end

  def patch(path, **args); end

  def post(path, **args); end

  def put(path, **args); end
end

module ActionDispatch::Integration::RequestHelpers
end

module ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  def app(); end

  def assertions(); end

  def assertions=(assertions); end

  def assigns(*arg, **arg1, &arg2); end

  def before_setup(); end

  def cookies(*arg, **arg1, &arg2); end

  def copy_session_variables!(); end

  def create_session(app); end

  def default_url_options(); end

  def default_url_options=(options); end

  def delete(*arg, **arg1, &arg2); end

  def follow_redirect!(*arg, **arg1, &arg2); end

  def get(*arg, **arg1, &arg2); end

  def head(*arg, **arg1, &arg2); end

  def initialize(*args, &blk); end

  def integration_session(); end

  def open_session(); end

  def patch(*arg, **arg1, &arg2); end

  def post(*arg, **arg1, &arg2); end

  def put(*arg, **arg1, &arg2); end

  def remove!(); end

  def reset!(); end

  def root_session(); end

  def root_session=(root_session); end
  APP_SESSIONS = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Integration::Runner
end

class ActionDispatch::Integration::Session
  include ::Minitest::Assertions
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::ActionDispatch::Integration::RequestHelpers
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def accept(); end

  def accept=(accept); end

  def body(*arg, **arg1, &arg2); end

  def controller(); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def headers(*arg, **arg1, &arg2); end

  def host(); end

  def host!(arg); end

  def host=(host); end

  def https!(flag=T.unsafe(nil)); end

  def https?(); end

  def initialize(app); end

  def path(*arg, **arg1, &arg2); end

  def process(method, path, params: T.unsafe(nil), headers: T.unsafe(nil), env: T.unsafe(nil), xhr: T.unsafe(nil), as: T.unsafe(nil)); end

  def redirect?(*arg, **arg1, &arg2); end

  def remote_addr(); end

  def remote_addr=(remote_addr); end

  def request(); end

  def request_count(); end

  def request_count=(request_count); end

  def reset!(); end

  def response(); end

  def status(*arg, **arg1, &arg2); end

  def status_message(*arg, **arg1, &arg2); end
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Integration::Session
  def self.default_url_options(); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end
end

module ActionDispatch::Integration
end

class ActionDispatch::IntegrationTest
  include ::ActionDispatch::TestProcess::FixtureFile
  include ::ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::TestHelpers::PageDumpHelper
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::IntegrationTest::UrlOptions
  include ::ActionDispatch::Assertions::RoutingAssertions::WithIntegrationRouting
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::ActionMailer::TestCase::ClearTestDeliveries
  include ::Turbo::TestAssertions::IntegrationTestAssertions
end

module ActionDispatch::IntegrationTest::Behavior
  include ::ActionDispatch::Integration::Runner
  include ::ActionDispatch::Assertions::RoutingAssertions
  include ::ActionDispatch::Assertions
  include ::ActionDispatch::Assertions::ResponseAssertions
  include ::Rails::Dom::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::ActionController::TemplateAssertions
  include ::ActionDispatch::TestHelpers::PageDumpHelper
  def app(); end

  def document_root_element(); end
end

module ActionDispatch::IntegrationTest::Behavior::ClassMethods
  def app(); end

  def app=(app); end

  def register_encoder(*args, **options); end
end

module ActionDispatch::IntegrationTest::Behavior::ClassMethods
end

module ActionDispatch::IntegrationTest::Behavior
  extend ::ActiveSupport::Concern
end

module ActionDispatch::IntegrationTest::UrlOptions
  def url_options(); end
end

module ActionDispatch::IntegrationTest::UrlOptions
  extend ::ActiveSupport::Concern
end

class ActionDispatch::IntegrationTest
  extend ::ActionDispatch::IntegrationTest::Behavior::ClassMethods
end

class ActionDispatch::InvalidParameterError
end

class ActionDispatch::InvalidParameterError
end

class ActionDispatch::Journey::Format
  ESCAPE_PATH = ::T.let(nil, ::T.untyped)
  ESCAPE_SEGMENT = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::Builder
  DUMMY_END_NODE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::Simulator
  INITIAL_STATE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::GTG::TransitionTable
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
  DEFAULT_EXP_ANCHORED = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Nodes::Symbol
  DEFAULT_EXP = ::T.let(nil, ::T.untyped)
  GREEDY_EXP = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Journey::Route::VerbMatchers
  VERBS = ::T.let(nil, ::T.untyped)
  VERB_TO_CLASS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils
  ENCODER = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Router::Utils::UriEncoder
  ALPHA = ::T.let(nil, ::T.untyped)
  DEC2HEX = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODE = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  SEGMENT = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  US_ASCII = ::T.let(nil, ::T.untyped)
  UTF_8 = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Scanner
  STATIC_TOKENS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Dot
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Each
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::FunctionalVisitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::String
  INSTANCE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Journey::Visitors::Visitor
  DISPATCH_CACHE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::ParamBuilder
  LEADING_BRACKETS_COMPAT = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::ParamError
end

class ActionDispatch::ParamError
  def self.===(other); end
end

class ActionDispatch::ParameterTypeError
end

class ActionDispatch::ParameterTypeError
end

class ActionDispatch::ParamsTooDeepError
end

class ActionDispatch::ParamsTooDeepError
end

module ActionDispatch::PermissionsPolicy::Request
  POLICY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::QueryParser
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  COMPAT_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  SEMICOLON_COMPAT = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Request
  include ::ActionDispatch::Flash::RequestMethods
  ACTION_DISPATCH_REQUEST_ID = ::T.let(nil, ::T.untyped)
  ENV_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_LOOKUP = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  RFC2518 = ::T.let(nil, ::T.untyped)
  RFC2616 = ::T.let(nil, ::T.untyped)
  RFC3253 = ::T.let(nil, ::T.untyped)
  RFC3648 = ::T.let(nil, ::T.untyped)
  RFC3744 = ::T.let(nil, ::T.untyped)
  RFC4791 = ::T.let(nil, ::T.untyped)
  RFC5323 = ::T.let(nil, ::T.untyped)
  RFC5789 = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::RequestCookieMethods
  def commit_cookie_jar!(); end
end

module ActionDispatch::Routing
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper
  URL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Constraints
  CALL = ::T.let(nil, ::T.untyped)
  SERVE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Mapping
  ANCHOR_CHARACTERS_REGEX = ::T.let(nil, ::T.untyped)
  JOINED_SEPARATORS = ::T.let(nil, ::T.untyped)
  OPTIONAL_FORMAT_REGEX = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Resources
  CANONICAL_ACTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_OPTIONS = ::T.let(nil, ::T.untyped)
  VALID_ON_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::Mapper::Scope
  OPTIONS = ::T.let(nil, ::T.untyped)
  RESOURCE_METHOD_SCOPES = ::T.let(nil, ::T.untyped)
  RESOURCE_SCOPES = ::T.let(nil, ::T.untyped)
  ROOT = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::Mapper::Scoping
  POISON = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::PathRedirect
  URL_PARTS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteSet
  DEFAULT_CONFIG = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  RESERVED_OPTIONS = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
end

module ActionDispatch::Routing::RouteSet::MountedHelpers
  def _main_app(); end

  def main_app(); end
end

class ActionDispatch::Routing::RouteWrapper
  include ::Sprockets::Rails::RouteWrapper
  def assets_prefix(); end

  def assets_prefix=(assets_prefix); end

  def assets_prefix?(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Routing::RouteWrapper
  def self.assets_prefix(); end

  def self.assets_prefix=(value); end

  def self.assets_prefix?(); end
end

class ActionDispatch::Routing::RoutesProxy
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes
  def _routes(); end

  def default_url_options(); end

  def default_url_options=(default_url_options); end

  def default_url_options?(); end

  def initialize(routes, scope, helpers, script_namer=T.unsafe(nil)); end

  def routes(); end

  def routes=(routes); end

  def scope(); end

  def scope=(scope); end
end

class ActionDispatch::Routing::RoutesProxy
  def self.default_url_options(); end

  def self.default_url_options=(value); end

  def self.default_url_options?(); end
end

class ActionDispatch::SSL
  def call(env); end

  def initialize(app, redirect: T.unsafe(nil), hsts: T.unsafe(nil), secure_cookies: T.unsafe(nil), ssl_default_redirect_status: T.unsafe(nil)); end
  HSTS_EXPIRES_IN = ::T.let(nil, ::T.untyped)
  PERMANENT_REDIRECT_REQUEST_METHODS = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SSL
  def self.default_hsts_options(); end
end

class ActionDispatch::ServerTiming::Subscriber
  KEY = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Session::CacheStore
  def delete_session(env, sid, options); end

  def write_session(env, sid, session, options); end
end

class ActionDispatch::Session::CacheStore
end

class ActionDispatch::Session::CookieStore
  DEFAULT_SAME_SITE = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Session::CookieStore::SessionId
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::Session::MemCacheStore
  include ::ActionDispatch::Session::Compatibility
  include ::ActionDispatch::Session::StaleSessionCheck
  include ::ActionDispatch::Session::SessionObject
end

class ActionDispatch::Session::MemCacheStore
end

class ActionDispatch::SystemTestCase
  include ::Capybara::DSL
  include ::Capybara::Minitest::Assertions
  include ::ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
  include ::ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  include ::ActionText::SystemTestHelper
  include ::Turbo::SystemTestHelper
  def initialize(*arg); end
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::SystemTestCase
  def self.driven_by(driver, using: T.unsafe(nil), screen_size: T.unsafe(nil), options: T.unsafe(nil), &capabilities); end

  def self.driver(); end

  def self.driver=(value); end

  def self.driver?(); end

  def self.served_by(host:, port:); end

  def self.start_application(); end
end

module ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  def take_failed_screenshot(); end

  def take_screenshot(html: T.unsafe(nil), screenshot: T.unsafe(nil)); end
end

module ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
end

module ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
  def after_teardown(); end

  def before_teardown(); end
end

module ActionDispatch::SystemTesting::TestHelpers::SetupAndTeardown
end

module ActionDispatch::TestHelpers::PageDumpHelper
  def save_and_open_page(path=T.unsafe(nil)); end
end

module ActionDispatch::TestHelpers::PageDumpHelper
end

class ActionDispatch::TestRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

class ActionDispatch::TestResponse
  def parsed_body(); end

  def response_parser(); end
end

class ActionDispatch::TestResponse
  def self.from_response(response); end
end

class ActionMailbox::Base
  include ::ActionMailbox::Routing
end

module ActionMailbox::Callbacks
  TERMINATOR = ::T.let(nil, ::T.untyped)
end

class ActionMailbox::InboundEmail
  include ::ActionMailbox::InboundEmail::Routable
  include ::ActionMailbox::InboundEmail::MessageId
end

module ActionMailbox::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Base
  PROTECTED_IVARS = ::T.let(nil, ::T.untyped)
end

class ActionMailer::Base::LateAttachmentsProxy
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::InlinePreviewInterceptor
  PATTERN = ::T.let(nil, ::T.untyped)
end

class ActionMailer::MessageDelivery
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::NonInferrableMailerError
  def initialize(name); end
end

class ActionMailer::NonInferrableMailerError
end

class ActionMailer::Parameterized::MessageDelivery
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActionMailer::TestCase
  include ::ActiveSupport::Testing::ConstantLookup
  include ::ActionMailer::TestCase::Behavior
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  def _mailer_class(); end

  def _mailer_class=(_mailer_class); end

  def _mailer_class?(); end
end

module ActionMailer::TestCase::Behavior
  include ::ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions
  include ::Rails::Dom::Testing::Assertions::SelectorAssertions
  include ::Rails::Dom::Testing::Assertions::DomAssertions
  def read_fixture(action); end
end

module ActionMailer::TestCase::Behavior::ClassMethods
  def determine_default_mailer(name); end

  def mailer_class(); end

  def tests(mailer); end
end

module ActionMailer::TestCase::Behavior::ClassMethods
end

module ActionMailer::TestCase::Behavior
  extend ::ActiveSupport::Concern
end

module ActionMailer::TestCase::ClearTestDeliveries
end

module ActionMailer::TestCase::ClearTestDeliveries
  extend ::ActiveSupport::Concern
end

class ActionMailer::TestCase
  extend ::ActionMailer::TestCase::Behavior::ClassMethods
  def self._mailer_class(); end

  def self._mailer_class=(value); end

  def self._mailer_class?(); end
end

module ActionMailer::TestHelper
  include ::ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions
  def assert_emails(number, &block); end

  def assert_enqueued_email_with(mailer, method, params: T.unsafe(nil), args: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_enqueued_emails(number, &block); end

  def assert_no_emails(&block); end

  def assert_no_enqueued_emails(&block); end

  def capture_emails(&block); end

  def deliver_enqueued_emails(queue: T.unsafe(nil), at: T.unsafe(nil), &block); end
end

module ActionMailer::TestHelper
end

module ActionMailer::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionPack::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionText::Attachable
  LOCATOR_NAME = ::T.let(nil, ::T.untyped)
end

class ActionText::Attachables::MissingAttachable
  DEFAULT_PARTIAL_PATH = ::T.let(nil, ::T.untyped)
end

class ActionText::Attachment
  include ::ActionText::Attachments::Caching
  include ::ActionText::Attachments::Minification
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class ActionText::Content
  include ::ActionText::ContentHelper
  include ::ActionText::Serialization
end

class ActionText::FixtureSet
end

class ActionText::FixtureSet
  def self.attachment(fixture_set_name, label, column_type: T.unsafe(nil)); end
end

module ActionText::SystemTestHelper
  def fill_in_rich_text_area(locator=T.unsafe(nil), with:); end

  def fill_in_rich_textarea(locator=T.unsafe(nil), with:); end
end

module ActionText::SystemTestHelper
end

class ActionText::TrixAttachment
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_TYPES = ::T.let(nil, ::T.untyped)
  COMPOSED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SELECTOR = ::T.let(nil, ::T.untyped)
  TAG_NAME = ::T.let(nil, ::T.untyped)
end

module ActionText::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActionView
  ENCODING_FLAG = ::T.let(nil, ::T.untyped)
end

class ActionView::AbstractRenderer
  NO_DETAILS = ::T.let(nil, ::T.untyped)
end

module ActionView::AbstractRenderer::ObjectRendering
  IDENTIFIER_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  OPTION_AS_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
  PREFIXED_PARTIAL_NAMES = ::T.let(nil, ::T.untyped)
end

class ActionView::AbstractRenderer::RenderedTemplate
  EMPTY_SPACER = ::T.let(nil, ::T.untyped)
end

class ActionView::Base
  include ::ActionView::Context
  include ::ERB::Util
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActiveSupport::CoreExt::ERBUtil
end

class ActionView::DependencyTracker::ERBTracker
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  IDENTIFIER = ::T.let(nil, ::T.untyped)
  LAYOUT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  LAYOUT_HASH_KEY = ::T.let(nil, ::T.untyped)
  PARTIAL_HASH_KEY = ::T.let(nil, ::T.untyped)
  RENDER_ARGUMENTS = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  VARIABLE_OR_METHOD_CHAIN = ::T.let(nil, ::T.untyped)
end

class ActionView::DependencyTracker::RubyTracker
  def dependencies(); end

  def initialize(name, template, view_paths=T.unsafe(nil), parser_class: T.unsafe(nil)); end
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
end

class ActionView::DependencyTracker::RubyTracker
  def self.call(name, template, view_paths=T.unsafe(nil)); end

  def self.supports_view_paths?(); end
end

class ActionView::DependencyTracker::WildcardResolver
  def initialize(view_paths, dependencies); end

  def resolve(); end
end

class ActionView::DependencyTracker::WildcardResolver
end

module ActionView::Helpers::AssetTagHelper
  MAX_HEADER_SIZE = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::ContentExfiltrationPreventionHelper
  CLOSE_CDATA_COMMENT = ::T.let(nil, ::T.untyped)
  CLOSE_FORM_TAG = ::T.let(nil, ::T.untyped)
  CLOSE_OPTION_TAG = ::T.let(nil, ::T.untyped)
  CLOSE_QUOTES_COMMENT = ::T.let(nil, ::T.untyped)
  CONTENT_EXFILTRATION_PREVENTION_MARKUP = ::T.let(nil, ::T.untyped)
end

module ActionView::Helpers::TagHelper
  ARIA_PREFIXES = ::T.let(nil, ::T.untyped)
  DATA_PREFIXES = ::T.let(nil, ::T.untyped)
  TAG_TYPES = ::T.let(nil, ::T.untyped)
end

class ActionView::LogSubscriber
  VIEWS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActionView::LookupContext::Accessors
  DEFAULT_PROCS = ::T.let(nil, ::T.untyped)
end

class ActionView::ObjectRenderer
  include ::ActionView::AbstractRenderer::ObjectRendering
  def render_object_derive_partial(object, context, block); end

  def render_object_with_partial(object, partial, context, block); end
end

class ActionView::ObjectRenderer
end

class ActionView::OutputBuffer
  def <<(value); end

  def ==(other); end

  def append=(value); end

  def blank?(*arg, **arg1, &arg2); end

  def capture(*args); end

  def concat(value); end

  def empty?(*arg, **arg1, &arg2); end

  def encode!(*arg, **arg1, &arg2); end

  def encoding(*arg, **arg1, &arg2); end

  def force_encoding(*arg, **arg1, &arg2); end

  def html_safe(); end

  def initialize(buffer=T.unsafe(nil)); end

  def length(*arg, **arg1, &arg2); end

  def raw(); end

  def raw_buffer(); end

  def safe_append=(value); end

  def safe_concat(value); end

  def safe_expr_append=(val); end

  def to_str(); end
end

class ActionView::OutputBuffer
end

class ActionView::OutputFlow
  def append(key, value); end

  def append!(key, value); end

  def content(); end

  def get(key); end

  def set(key, value); end
end

class ActionView::OutputFlow
end

module ActionView::RenderParser
  ALL_KNOWN_KEYS = ::T.let(nil, ::T.untyped)
  RENDER_TYPE_KEYS = ::T.let(nil, ::T.untyped)
end

ActionView::RenderParser::Default = ActionView::RenderParser::PrismRenderParser

class ActionView::Renderer
  def cache_hits(); end

  def initialize(lookup_context); end

  def lookup_context(); end

  def lookup_context=(lookup_context); end

  def render(context, options); end

  def render_body(context, options); end

  def render_partial(context, options, &block); end

  def render_to_object(context, options); end
end

class ActionView::Renderer
end

class ActionView::StreamingBuffer
  def <<(value); end

  def append=(value); end

  def block(); end

  def capture(); end

  def concat(value); end

  def html_safe(); end

  def initialize(block); end

  def raw(); end

  def safe_append=(value); end

  def safe_concat(value); end
end

class ActionView::StreamingBuffer
end

class ActionView::StreamingFlow
  def initialize(view, fiber); end
end

class ActionView::StreamingFlow
end

class ActionView::StreamingTemplateRenderer
  def render_template(view, template, layout_name=T.unsafe(nil), locals=T.unsafe(nil)); end
end

class ActionView::StreamingTemplateRenderer::Body
  def each(&block); end

  def initialize(&start); end
end

class ActionView::StreamingTemplateRenderer::Body
end

class ActionView::StreamingTemplateRenderer
end

class ActionView::Template
  NONE = ::T.let(nil, ::T.untyped)
  STRICT_LOCALS_REGEX = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Error
  SOURCE_CODE_RADIUS = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB
  ENCODING_TAG = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Handlers::ERB::Erubi
  BLOCK_EXPR = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Inline
  Finalizer = ::T.let(nil, ::T.untyped)
end

class ActionView::Template::Renderable
  def format(); end

  def identifier(); end

  def initialize(renderable); end

  def render(context, *args); end
end

class ActionView::Template::Renderable
end

class ActionView::Template::Sources::File
  def initialize(filename); end
end

class ActionView::Template::Sources::File
end

ActionView::Template::Types = Mime

class ActionView::TemplateDetails
  def format(); end

  def format_or_default(); end

  def handler(); end

  def handler_class(); end

  def initialize(locale, handler, format, variant); end

  def locale(); end

  def matches?(requested); end

  def sort_key_for(requested); end

  def variant(); end
end

class ActionView::TemplateDetails::Requested
  def formats(); end

  def formats_idx(); end

  def handlers(); end

  def handlers_idx(); end

  def initialize(locale:, handlers:, formats:, variants:); end

  def locale(); end

  def locale_idx(); end

  def variants(); end

  def variants_idx(); end
  ANY_HASH = ::T.let(nil, ::T.untyped)
end

class ActionView::TemplateDetails::Requested
end

class ActionView::TemplateDetails
end

class ActionView::TemplatePath
  def ==(other); end

  def eql?(other); end

  def initialize(name, prefix, partial, virtual); end

  def name(); end

  def partial(); end

  def partial?(); end

  def prefix(); end

  def to_str(); end

  def virtual(); end

  def virtual_path(); end
end

class ActionView::TemplatePath
  def self.build(name, prefix, partial); end

  def self.parse(virtual); end

  def self.virtual(name, prefix, partial); end
end

class ActionView::TemplateRenderer
  def render(context, options); end
end

class ActionView::TemplateRenderer
end

class ActionView::TestCase
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
end

module ActionView::TestCase::Behavior
  include ::ActionDispatch::TestProcess
  include ::ActionDispatch::TestProcess::FixtureFile
  INTERNAL_IVARS = ::T.let(nil, ::T.untyped)
end

module ActionView::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveJob::Arguments
  OBJECT_SERIALIZER_KEY = ::T.let(nil, ::T.untyped)
end

class ActiveJob::Base
  include ::ActiveJob::TestHelper::TestQueueAdapter
end

class ActiveJob::Base
  def self._test_adapter(); end

  def self._test_adapter=(value); end
end

module ActiveJob::Callbacks
  extend ::ActiveSupport::Callbacks
end

module ActiveJob::ConcurrencyControls
  DEFAULT_CONCURRENCY_GROUP = ::T.let(nil, ::T.untyped)
end

class ActiveJob::ConfiguredJob
  def initialize(job_class, options=T.unsafe(nil)); end

  def perform_all_later(multi_args); end

  def perform_later(*arg, **arg1, &arg2); end

  def perform_now(*arg, **arg1, &arg2); end
end

class ActiveJob::ConfiguredJob
end

class ActiveJob::QueueAdapters::AsyncAdapter::Scheduler
  DEFAULT_EXECUTOR_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::QueueAdapters::InlineAdapter
  def enqueue_at(*arg); end
end

class ActiveJob::QueueAdapters::InlineAdapter
end

class ActiveJob::QueueAdapters::SolidQueueAdapter
  def enqueue(active_job); end

  def enqueue_after_transaction_commit?(); end

  def enqueue_all(active_jobs); end

  def enqueue_at(active_job, timestamp); end
end

class ActiveJob::QueueAdapters::SolidQueueAdapter
end

class ActiveJob::QueueAdapters::TestAdapter
  def at(); end

  def at=(at); end

  def enqueued_jobs(); end

  def enqueued_jobs=(enqueued_jobs); end

  def filter(); end

  def filter=(filter); end

  def perform_enqueued_at_jobs(); end

  def perform_enqueued_at_jobs=(perform_enqueued_at_jobs); end

  def perform_enqueued_jobs(); end

  def perform_enqueued_jobs=(perform_enqueued_jobs); end

  def performed_jobs(); end

  def performed_jobs=(performed_jobs); end

  def queue(); end

  def queue=(queue); end

  def reject(); end

  def reject=(reject); end
end

class ActiveJob::QueueAdapters::TestAdapter
end

class ActiveJob::Serializers::RangeSerializer
  KEYS = ::T.let(nil, ::T.untyped)
end

class ActiveJob::Serializers::TimeObjectSerializer
  NANO_PRECISION = ::T.let(nil, ::T.untyped)
end

class ActiveJob::Serializers::TimeWithZoneSerializer
  NANO_PRECISION = ::T.let(nil, ::T.untyped)
end

class ActiveJob::TestCase
  include ::ActiveJob::TestHelper
end

class ActiveJob::TestCase
end

module ActiveJob::TestHelper
  include ::ActiveSupport::Testing::Assertions
  def after_teardown(); end

  def assert_enqueued_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_enqueued_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  def assert_no_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_no_performed_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_performed_jobs(number, only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), &block); end

  def assert_performed_with(job: T.unsafe(nil), args: T.unsafe(nil), at: T.unsafe(nil), queue: T.unsafe(nil), priority: T.unsafe(nil), &block); end

  def before_setup(); end

  def enqueued_jobs(*arg, **arg1, &arg2); end

  def enqueued_jobs=(arg); end

  def perform_enqueued_jobs(only: T.unsafe(nil), except: T.unsafe(nil), queue: T.unsafe(nil), at: T.unsafe(nil), &block); end

  def performed_jobs(*arg, **arg1, &arg2); end

  def performed_jobs=(arg); end

  def queue_adapter(); end

  def queue_adapter_for_test(); end
end

module ActiveJob::TestHelper::TestQueueAdapter
end

module ActiveJob::TestHelper::TestQueueAdapter
  extend ::ActiveSupport::Concern
end

module ActiveJob::TestHelper
end

module ActiveJob::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveModel::AttributeMutationTracker
  OPTION_NOT_GIVEN = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Attributes
  def attribute_names(); end

  def attributes(); end

  def freeze(); end

  def initialize(*arg); end
end

module ActiveModel::Attributes::ClassMethods
  def attribute(name, *arg, **arg1, &arg2); end

  def attribute_names(); end
end

module ActiveModel::Attributes::ClassMethods
end

module ActiveModel::Attributes
  extend ::ActiveSupport::Concern
end

class ActiveModel::Error
  CALLBACKS_OPTIONS = ::T.let(nil, ::T.untyped)
  MESSAGE_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Errors
  EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Lint
end

module ActiveModel::Lint::Tests
  def test_errors_aref(); end

  def test_model_naming(); end

  def test_persisted?(); end

  def test_to_key(); end

  def test_to_param(); end

  def test_to_partial_path(); end
end

module ActiveModel::Lint::Tests
end

module ActiveModel::Lint
end

class ActiveModel::Name
  MISSING_TRANSLATION = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Translation
  MISSING_TRANSLATION = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Boolean
  FALSE_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Date
  ISO_DATE = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Decimal
  BIGDECIMAL_PRECISION = ::T.let(nil, ::T.untyped)
end

module ActiveModel::Type::Helpers::TimeValue
  ISO_DATETIME = ::T.let(nil, ::T.untyped)
end

class ActiveModel::Type::Integer
  DEFAULT_LIMIT = ::T.let(nil, ::T.untyped)
end

module ActiveModel::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Assertions::QueryAssertions
  def assert_no_queries(include_schema: T.unsafe(nil), &block); end

  def assert_no_queries_match(match, include_schema: T.unsafe(nil), &block); end

  def assert_queries_count(count=T.unsafe(nil), include_schema: T.unsafe(nil), &block); end

  def assert_queries_match(match, count: T.unsafe(nil), include_schema: T.unsafe(nil), &block); end
end

class ActiveRecord::Base
  include ::ActionText::Encryption
end

module ActiveRecord::Batches
  DEFAULT_ORDER = ::T.let(nil, ::T.untyped)
  ORDER_IGNORE_MESSAGE = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Callbacks
  CALLBACKS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConcurrentMigrationError
  DEFAULT_MESSAGE = ::T.let(nil, ::T.untyped)
  RELEASE_LOCK_FAILED_MESSAGE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::AbstractAdapter
  include ::ActiveRecord::ConnectionAdapters::SchemaStatements
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::ConnectionAdapters::DatabaseStatements
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  COMMENT_REGEX = ::T.let(nil, ::T.untyped)
  EXTENDED_TYPE_MAPS = ::T.let(nil, ::T.untyped)
  SIMPLE_INT = ::T.let(nil, ::T.untyped)
  TYPE_MAP = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::ColumnDefinition
  OPTION_NAMES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::ConnectionPool
  include ::ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
end

ActiveRecord::ConnectionAdapters::ConnectionPool::WeakThreadKeyMap = ObjectSpace::WeakKeyMap

class ActiveRecord::ConnectionAdapters::NullPool
  NULL_CONFIG = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::NullTransaction
  def add_record(record, _=T.unsafe(nil)); end

  def after_commit(); end

  def after_rollback(); end

  def before_commit(); end

  def closed?(); end

  def dirty!(); end

  def dirty?(); end

  def invalidate!(); end

  def invalidated?(); end

  def joinable?(); end

  def materialized?(); end

  def open?(); end

  def restartable?(); end

  def state(); end

  def user_transaction(); end
end

module ActiveRecord::ConnectionAdapters::QueryCache
  DEFAULT_SIZE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::RealTransaction
  def commit(); end

  def restart(); end

  def rollback(); end
end

class ActiveRecord::ConnectionAdapters::RestartParentTransaction
  def commit(); end

  def initialize(connection, parent_transaction, **options); end

  def materialize!(*arg, **arg1, &arg2); end

  def materialized?(*arg, **arg1, &arg2); end

  def restart(*arg, **arg1, &arg2); end

  def rollback(); end
end

module ActiveRecord::ConnectionAdapters::SQLite3::Quoting
  QUOTED_COLUMN_NAMES = ::T.let(nil, ::T.untyped)
  QUOTED_TABLE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::ConnectionAdapters::SQLite3::SchemaStatements
  INTEGER_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::SQLite3Adapter
  ADAPTER_NAME = ::T.let(nil, ::T.untyped)
  COLLATE_REGEX = ::T.let(nil, ::T.untyped)
  DEFAULT_PRAGMAS = ::T.let(nil, ::T.untyped)
  DEFERRABLE_REGEX = ::T.let(nil, ::T.untyped)
  EXTENDED_TYPE_MAPS = ::T.let(nil, ::T.untyped)
  FINAL_CLOSE_PARENS_REGEX = ::T.let(nil, ::T.untyped)
  FK_REGEX = ::T.let(nil, ::T.untyped)
  GENERATED_ALWAYS_AS_REGEX = ::T.let(nil, ::T.untyped)
  NATIVE_DATABASE_TYPES = ::T.let(nil, ::T.untyped)
  PRIMARY_KEY_AUTOINCREMENT_REGEX = ::T.let(nil, ::T.untyped)
  TYPE_MAP = ::T.let(nil, ::T.untyped)
  UNQUOTED_OPEN_PARENS_REGEX = ::T.let(nil, ::T.untyped)
  VIRTUAL_TABLE_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::SavepointTransaction
  def commit(); end

  def initialize(connection, savepoint_name, parent_transaction, **options); end

  def restart(); end

  def rollback(); end
end

class ActiveRecord::ConnectionAdapters::SchemaDumper
  DEFAULT_DATETIME_PRECISION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::StatementPool
  DEFAULT_STATEMENT_LIMIT = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::Transaction
  def add_record(record, ensure_finalize=T.unsafe(nil)); end

  def after_commit(&block); end

  def after_rollback(&block); end

  def append_callbacks(callbacks); end

  def before_commit(&block); end

  def before_commit_records(); end

  def closed?(); end

  def commit_records(); end

  def connection(); end

  def dirty!(); end

  def dirty?(); end

  def full_rollback?(); end

  def incomplete!(); end

  def initialize(connection, isolation: T.unsafe(nil), joinable: T.unsafe(nil), run_commit_callbacks: T.unsafe(nil)); end

  def invalidate!(*arg, **arg1, &arg2); end

  def invalidated?(*arg, **arg1, &arg2); end

  def isolation_level(); end

  def joinable?(); end

  def materialize!(); end

  def materialized?(); end

  def open?(); end

  def records(); end

  def restartable?(); end

  def restore!(); end

  def rollback_records(); end

  def savepoint_name(); end

  def state(); end

  def user_transaction(); end

  def written(); end

  def written=(written); end
end

class ActiveRecord::ConnectionAdapters::Transaction::Callback
  def after_commit(); end

  def after_rollback(); end

  def before_commit(); end

  def initialize(event, callback); end
end

class ActiveRecord::ConnectionAdapters::TransactionInstrumenter
  def finish(outcome); end

  def initialize(payload=T.unsafe(nil)); end

  def start(); end
end

class ActiveRecord::ConnectionAdapters::TransactionManager
  def begin_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil), _lazy: T.unsafe(nil)); end

  def commit_transaction(); end

  def current_transaction(); end

  def dirty_current_transaction(); end

  def disable_lazy_transactions!(); end

  def enable_lazy_transactions!(); end

  def initialize(connection); end

  def lazy_transactions_enabled?(); end

  def materialize_transactions(); end

  def open_transactions(); end

  def restorable?(); end

  def restore_transactions(); end

  def rollback_transaction(transaction=T.unsafe(nil)); end

  def within_new_transaction(isolation: T.unsafe(nil), joinable: T.unsafe(nil)); end
  NULL_TRANSACTION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::ConnectionAdapters::TransactionState
  def add_child(state); end

  def commit!(); end

  def committed?(); end

  def completed?(); end

  def finalized?(); end

  def full_commit!(); end

  def full_rollback!(); end

  def fully_committed?(); end

  def fully_completed?(); end

  def fully_rolledback?(); end

  def initialize(state=T.unsafe(nil)); end

  def invalidate!(); end

  def invalidated?(); end

  def nullify!(); end

  def rollback!(); end

  def rolledback?(); end
end

module ActiveRecord::ConnectionHandling
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
  RAILS_ENV = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::DestroyAssociationAsyncJob
  def perform(owner_model_name: T.unsafe(nil), owner_id: T.unsafe(nil), association_class: T.unsafe(nil), association_ids: T.unsafe(nil), association_primary_key_column: T.unsafe(nil), ensuring_owner_was_method: T.unsafe(nil)); end
end

class ActiveRecord::DestroyAssociationAsyncJob
end

class ActiveRecord::Encryption::Cipher
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Cipher::Aes256Gcm
  def decrypt(encrypted_message); end

  def encrypt(clear_text); end

  def initialize(secret, deterministic: T.unsafe(nil)); end
  CIPHER_TYPE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Cipher::Aes256Gcm
  def self.iv_length(); end

  def self.key_length(); end
end

class ActiveRecord::Encryption::Context
  PROPERTIES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::DerivedSecretKeyProvider
  def initialize(passwords, key_generator: T.unsafe(nil)); end
end

class ActiveRecord::Encryption::DerivedSecretKeyProvider
end

class ActiveRecord::Encryption::DeterministicKeyProvider
  def initialize(password); end
end

class ActiveRecord::Encryption::DeterministicKeyProvider
end

module ActiveRecord::Encryption::EncryptableRecord
  ORIGINAL_ATTRIBUTE_PREFIX = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::EncryptedAttributeType
  include ::ActiveModel::Type::Helpers::Mutable
  def accessor(*arg, **arg1, &arg2); end

  def cast_type(); end

  def deterministic?(*arg, **arg1, &arg2); end

  def downcase?(*arg, **arg1, &arg2); end

  def encrypted?(value); end

  def fixed?(*arg, **arg1, &arg2); end

  def initialize(scheme:, cast_type: T.unsafe(nil), previous_type: T.unsafe(nil), default: T.unsafe(nil)); end

  def key_provider(*arg, **arg1, &arg2); end

  def previous_schemes(*arg, **arg1, &arg2); end

  def previous_types(); end

  def scheme(); end

  def support_unencrypted_data?(); end

  def type(*arg, **arg1, &arg2); end

  def with_context(*arg, **arg1, &arg2); end
end

class ActiveRecord::Encryption::EncryptedAttributeType
end

module ActiveRecord::Encryption::EncryptedFixtures
  def initialize(fixture, model_class); end
end

module ActiveRecord::Encryption::EncryptedFixtures
end

class ActiveRecord::Encryption::EncryptingOnlyEncryptor
end

class ActiveRecord::Encryption::EncryptingOnlyEncryptor
end

class ActiveRecord::Encryption::Encryptor
  DECRYPT_ERRORS = ::T.let(nil, ::T.untyped)
  ENCODING_ERRORS = ::T.let(nil, ::T.untyped)
  THRESHOLD_TO_JUSTIFY_COMPRESSION = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider
  def active_primary_key(); end

  def decryption_keys(encrypted_message); end

  def encryption_key(); end
end

class ActiveRecord::Encryption::EnvelopeEncryptionKeyProvider
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries
end

class ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue
  def initialize(value, type); end

  def type(); end

  def value(); end
end

class ActiveRecord::Encryption::ExtendedDeterministicQueries::AdditionalValue
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
  def find_by(*args); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries::ClassMethods
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::CoreQueries
  extend ::ActiveSupport::Concern
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQuery
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::EncryptedQuery
  def self.process_arguments(owner, args, check_for_additional_values); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType
  def serialize(data); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::ExtendedEncryptableType
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries
  def exists?(*args); end

  def scope_for_create(); end

  def where(*args); end
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries::RelationQueries
end

module ActiveRecord::Encryption::ExtendedDeterministicQueries
  def self.install_support(); end
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator
  def validate_each(record, attribute, value); end
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator::EncryptedUniquenessValidator
end

module ActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator
  def self.install_support(); end
end

class ActiveRecord::Encryption::Key
  def id(); end

  def initialize(secret); end

  def public_tags(); end

  def secret(); end
end

class ActiveRecord::Encryption::Key
  def self.derive_from(password); end
end

class ActiveRecord::Encryption::KeyProvider
  def decryption_keys(encrypted_message); end

  def encryption_key(); end

  def initialize(keys); end
end

class ActiveRecord::Encryption::KeyProvider
end

class ActiveRecord::Encryption::Message
  def ==(other_message); end

  def headers(); end

  def headers=(headers); end

  def initialize(payload: T.unsafe(nil), headers: T.unsafe(nil)); end

  def payload(); end

  def payload=(payload); end
end

class ActiveRecord::Encryption::Message
end

class ActiveRecord::Encryption::NullEncryptor
  def binary?(); end

  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypted?(text); end
end

class ActiveRecord::Encryption::NullEncryptor
end

class ActiveRecord::Encryption::Properties
  def ==(arg); end

  def [](*arg, **arg1, &arg2); end

  def []=(key, value); end

  def add(other_properties); end

  def auth_tag(); end

  def auth_tag=(value); end

  def compressed(); end

  def compressed=(value); end

  def each(*arg, **arg1, &arg2); end

  def encoding(); end

  def encoding=(value); end

  def encrypted_data_key(); end

  def encrypted_data_key=(value); end

  def encrypted_data_key_id(); end

  def encrypted_data_key_id=(value); end

  def initialize(initial_properties=T.unsafe(nil)); end

  def iv(); end

  def iv=(value); end

  def key?(*arg, **arg1, &arg2); end

  def method_missing(method, *arg, **arg1, &arg2); end

  def to_h(); end

  def validate_value_type(value); end
  ALLOWED_VALUE_CLASSES = ::T.let(nil, ::T.untyped)
  DEFAULT_PROPERTIES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Encryption::Properties
end

class ActiveRecord::Encryption::ReadOnlyNullEncryptor
  def binary?(); end

  def decrypt(encrypted_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypt(clean_text, key_provider: T.unsafe(nil), cipher_options: T.unsafe(nil)); end

  def encrypted?(text); end
end

class ActiveRecord::Encryption::ReadOnlyNullEncryptor
end

class ActiveRecord::Encryption::Scheme
  def compatible_with?(other_scheme); end

  def deterministic?(); end

  def downcase?(); end

  def fixed?(); end

  def ignore_case?(); end

  def initialize(key_provider: T.unsafe(nil), key: T.unsafe(nil), deterministic: T.unsafe(nil), support_unencrypted_data: T.unsafe(nil), downcase: T.unsafe(nil), ignore_case: T.unsafe(nil), previous_schemes: T.unsafe(nil), compress: T.unsafe(nil), compressor: T.unsafe(nil), **context_properties); end

  def key_provider(); end

  def merge(other_scheme); end

  def previous_schemes(); end

  def previous_schemes=(previous_schemes); end

  def support_unencrypted_data?(); end

  def to_h(); end

  def with_context(&block); end
end

class ActiveRecord::Encryption::Scheme
end

class ActiveRecord::ExplainSubscriber
  EXPLAINED_SQLS = ::T.let(nil, ::T.untyped)
  IGNORED_PAYLOADS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::FinderMethods
  ONE_AS_ONE = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Fixture
  def [](key); end

  def class_name(); end

  def each(&block); end

  def find(); end

  def fixture(); end

  def initialize(fixture, model_class); end

  def model_class(); end

  def to_hash(); end
end

class ActiveRecord::FixtureSet
  def [](x); end

  def []=(k, v); end

  def all_loaded_fixtures(); end

  def all_loaded_fixtures=(val); end

  def config(); end

  def each(&block); end

  def fixtures(); end

  def ignored_fixtures(); end

  def initialize(_, name, class_name, path, config=T.unsafe(nil)); end

  def model_class(); end

  def name(); end

  def size(); end

  def table_name(); end

  def table_rows(); end
  MAX_ID = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::FixtureSet::File
  def each(&block); end

  def ignored_fixtures(); end

  def initialize(file); end

  def model_class(); end
end

class ActiveRecord::FixtureSet::File
  def self.open(file); end
end

class ActiveRecord::FixtureSet::ModelMetadata
  def column_names(); end

  def column_type(column_name); end

  def has_column?(column_name); end

  def inheritance_column_name(); end

  def initialize(model_class); end

  def primary_key_name(); end

  def primary_key_type(); end

  def timestamp_column_names(); end
end

class ActiveRecord::FixtureSet::RenderContext
  def self.create_subclass(); end
end

class ActiveRecord::FixtureSet::TableRow
  def initialize(fixture, table_rows:, label:, now:); end

  def to_hash(); end
end

class ActiveRecord::FixtureSet::TableRow::HasManyThroughProxy
  def lhs_key(); end

  def rhs_key(); end

  def timestamp_column_names(); end
end

class ActiveRecord::FixtureSet::TableRow::PrimaryKeyError
  def initialize(label, association, value); end
end

class ActiveRecord::FixtureSet::TableRow::ReflectionProxy
  def initialize(association); end

  def join_table(); end

  def name(); end

  def primary_key_type(); end
end

class ActiveRecord::FixtureSet::TableRows
  def initialize(table_name, model_class:, fixtures:); end

  def model_class(); end

  def model_metadata(); end

  def tables(); end

  def to_hash(); end
end

class ActiveRecord::FixtureSet
  def self.all_loaded_fixtures(); end

  def self.all_loaded_fixtures=(val); end

  def self.cache_fixtures(connection_pool, fixtures_map); end

  def self.cache_for_connection_pool(connection_pool); end

  def self.cached_fixtures(connection_pool, keys_to_fetch=T.unsafe(nil)); end

  def self.composite_identify(label, key); end

  def self.context_class(); end

  def self.create_fixtures(fixtures_directories, fixture_set_names, class_names=T.unsafe(nil), config=T.unsafe(nil)); end

  def self.default_fixture_model_name(fixture_set_name, config=T.unsafe(nil)); end

  def self.default_fixture_table_name(fixture_set_name, config=T.unsafe(nil)); end

  def self.fixture_is_cached?(connection_pool, table_name); end

  def self.identify(label, column_type=T.unsafe(nil)); end

  def self.instantiate_all_loaded_fixtures(object, load_instances=T.unsafe(nil)); end

  def self.instantiate_fixtures(object, fixture_set, load_instances=T.unsafe(nil)); end

  def self.reset_cache(); end
end

class ActiveRecord::FutureResult
  def cancel(); end

  def canceled?(); end

  def empty?(*arg, **arg1, &arg2); end

  def execute!(connection); end

  def execute_or_skip(); end

  def initialize(pool, *args, **kwargs); end

  def lock_wait(); end

  def pending?(); end

  def result(); end

  def schedule!(session); end

  def then(&block); end

  def to_a(*arg, **arg1, &arg2); end
end

class ActiveRecord::FutureResult::Complete
  def canceled?(); end

  def empty?(*arg, **arg1, &arg2); end

  def initialize(result); end

  def pending?(); end

  def result(); end

  def then(&block); end

  def to_a(*arg, **arg1, &arg2); end
end

class ActiveRecord::FutureResult::EventBuffer
  def flush(); end

  def initialize(future_result, instrumenter); end

  def instrument(name, payload=T.unsafe(nil), &block); end
end

class ActiveRecord::FutureResult
  def self.wrap(result); end
end

class ActiveRecord::InternalMetadata
  def [](key); end

  def []=(key, value); end

  def arel_table(); end

  def count(); end

  def create_table(); end

  def create_table_and_set_flags(environment, schema_sha1=T.unsafe(nil)); end

  def delete_all_entries(); end

  def drop_table(); end

  def enabled?(); end

  def initialize(pool); end

  def primary_key(); end

  def table_exists?(); end

  def table_name(); end

  def value_key(); end
end

module ActiveRecord::LegacyYamlAdapter
end

module ActiveRecord::LegacyYamlAdapter
  def self.convert(coder); end
end

class ActiveRecord::Locking::LockingType
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Marshalling::Methods
  def marshal_dump(); end
end

class ActiveRecord::Middleware::DatabaseSelector
  def call(env); end

  def context_klass(); end

  def initialize(app, resolver_klass=T.unsafe(nil), context_klass=T.unsafe(nil), options=T.unsafe(nil)); end

  def options(); end

  def resolver_klass(); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  def context(); end

  def delay(); end

  def initialize(context, options=T.unsafe(nil)); end

  def instrumenter(); end

  def read(&blk); end

  def reading_request?(request); end

  def update_context(response); end

  def write(&blk); end
  SEND_TO_REPLICA_DELAY = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  def initialize(session); end

  def last_write_timestamp(); end

  def save(response); end

  def session(); end

  def update_last_write_timestamp(); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver::Session
  def self.call(request); end

  def self.convert_time_to_timestamp(time); end

  def self.convert_timestamp_to_time(timestamp); end
end

class ActiveRecord::Middleware::DatabaseSelector::Resolver
  def self.call(context, options=T.unsafe(nil)); end
end

class ActiveRecord::Middleware::DatabaseSelector
end

class ActiveRecord::Middleware::ShardSelector
  def call(env); end

  def initialize(app, resolver, options=T.unsafe(nil)); end

  def options(); end

  def resolver(); end
end

class ActiveRecord::Middleware::ShardSelector
end

class ActiveRecord::Migration::CommandRecorder
  include ::ActiveRecord::Migration::JoinTable
  include ::ActiveRecord::Migration::CommandRecorder::StraightReversions
  def add_belongs_to(*args, **arg, &block); end

  def add_check_constraint(*args, **arg, &block); end

  def add_column(*args, **arg, &block); end

  def add_enum_value(*args, **arg, &block); end

  def add_exclusion_constraint(*args, **arg, &block); end

  def add_foreign_key(*args, **arg, &block); end

  def add_index(*args, **arg, &block); end

  def add_reference(*args, **arg, &block); end

  def add_timestamps(*args, **arg, &block); end

  def add_unique_constraint(*args, **arg, &block); end

  def change_column(*args, **arg, &block); end

  def change_column_comment(*args, **arg, &block); end

  def change_column_default(*args, **arg, &block); end

  def change_column_null(*args, **arg, &block); end

  def change_table(table_name, **options); end

  def change_table_comment(*args, **arg, &block); end

  def commands(); end

  def commands=(commands); end

  def create_enum(*args, **arg, &block); end

  def create_join_table(*args, **arg, &block); end

  def create_schema(*args, **arg, &block); end

  def create_table(*args, **arg, &block); end

  def create_virtual_table(*args, **arg, &block); end

  def delegate(); end

  def delegate=(delegate); end

  def disable_extension(*args, **arg, &block); end

  def drop_enum(*args, **arg, &block); end

  def drop_join_table(*args, **arg, &block); end

  def drop_schema(*args, **arg, &block); end

  def drop_table(*args, **arg, &block); end

  def drop_virtual_table(*args, **arg, &block); end

  def enable_extension(*args, **arg, &block); end

  def execute(*args, **arg, &block); end

  def execute_block(*args, **arg, &block); end

  def initialize(delegate=T.unsafe(nil)); end

  def inverse_of(command, args, &block); end

  def invert_add_belongs_to(args, &block); end

  def invert_remove_belongs_to(args, &block); end

  def record(*command, &block); end

  def remove_belongs_to(*args, **arg, &block); end

  def remove_check_constraint(*args, **arg, &block); end

  def remove_column(*args, **arg, &block); end

  def remove_columns(*args, **arg, &block); end

  def remove_exclusion_constraint(*args, **arg, &block); end

  def remove_foreign_key(*args, **arg, &block); end

  def remove_index(*args, **arg, &block); end

  def remove_reference(*args, **arg, &block); end

  def remove_timestamps(*args, **arg, &block); end

  def remove_unique_constraint(*args, **arg, &block); end

  def rename_column(*args, **arg, &block); end

  def rename_enum(*args, **arg, &block); end

  def rename_enum_value(*args, **arg, &block); end

  def rename_index(*args, **arg, &block); end

  def rename_table(*args, **arg, &block); end

  def replay(migration); end

  def revert(); end

  def reverting(); end

  def reverting=(reverting); end

  def transaction(*args, **arg, &block); end
  ReversibleAndIrreversibleMethods = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
  def invert_add_check_constraint(args, &block); end

  def invert_add_column(args, &block); end

  def invert_add_exclusion_constraint(args, &block); end

  def invert_add_foreign_key(args, &block); end

  def invert_add_index(args, &block); end

  def invert_add_reference(args, &block); end

  def invert_add_timestamps(args, &block); end

  def invert_add_unique_constraint(args, &block); end

  def invert_create_enum(args, &block); end

  def invert_create_join_table(args, &block); end

  def invert_create_schema(args, &block); end

  def invert_create_table(args, &block); end

  def invert_create_virtual_table(args, &block); end

  def invert_disable_extension(args, &block); end

  def invert_drop_enum(args, &block); end

  def invert_drop_join_table(args, &block); end

  def invert_drop_schema(args, &block); end

  def invert_drop_table(args, &block); end

  def invert_drop_virtual_table(args, &block); end

  def invert_enable_extension(args, &block); end

  def invert_execute_block(args, &block); end

  def invert_remove_check_constraint(args, &block); end

  def invert_remove_column(args, &block); end

  def invert_remove_exclusion_constraint(args, &block); end

  def invert_remove_foreign_key(args, &block); end

  def invert_remove_index(args, &block); end

  def invert_remove_reference(args, &block); end

  def invert_remove_timestamps(args, &block); end

  def invert_remove_unique_constraint(args, &block); end
end

module ActiveRecord::Migration::CommandRecorder::StraightReversions
end

class ActiveRecord::Migration::CommandRecorder
end

class ActiveRecord::Migration::Compatibility::V4_2
  def index_exists?(table_name, column_name, **options); end

  def remove_index(table_name, column_name=T.unsafe(nil), **options); end
end

module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
  def belongs_to(*arg, **options); end

  def references(*arg, **options); end

  def timestamps(**options); end
end

class ActiveRecord::Migration::Compatibility::V5_0
  def create_join_table(table_1, table_2, column_options: T.unsafe(nil), **options); end
end

module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
  def belongs_to(*args, **options); end

  def primary_key(name, type=T.unsafe(nil), **options); end

  def references(*args, **options); end
end

class ActiveRecord::Migration::Compatibility::V5_2
  def add_timestamps(table_name, **options); end
end

module ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder
  def invert_change_column_comment(args); end

  def invert_change_table_comment(args); end

  def invert_transaction(args, &block); end
end

module ActiveRecord::Migration::Compatibility::V5_2::TableDefinition
  def column(name, type, index: T.unsafe(nil), **options); end

  def timestamps(**options); end
end

module ActiveRecord::Migration::Compatibility::V6_0::TableDefinition
  def belongs_to(*args, **options); end

  def column(name, type, index: T.unsafe(nil), **options); end

  def references(*args, **options); end
end

class ActiveRecord::Migration::Compatibility::V6_1::PostgreSQLCompat
  def self.compatible_timestamp_type(type, connection); end
end

module ActiveRecord::Migration::Compatibility::V6_1::TableDefinition
  def change(name, type, index: T.unsafe(nil), **options); end

  def column(name, type, index: T.unsafe(nil), **options); end

  def new_column_definition(name, type, **options); end
end

class ActiveRecord::Migration::Compatibility::V7_0
  def add_belongs_to(table_name, ref_name, **options); end

  def add_column(table_name, column_name, type, **options); end

  def add_foreign_key(from_table, to_table, **options); end

  def add_index(table_name, column_name, **options); end

  def add_reference(table_name, ref_name, **options); end

  def change_column(table_name, column_name, type, **options); end

  def change_column_null(table_name, column_name, null, default=T.unsafe(nil)); end

  def disable_extension(name, **options); end

  def rename_table(table_name, new_name, **options); end
end

module ActiveRecord::Migration::Compatibility::V7_0::TableDefinition
  def change(name, type, **options); end

  def column(name, type, **options); end

  def index(column_name, **options); end

  def references(*args, **options); end
end

ActiveRecord::Migration::Compatibility::V8_0 = ActiveRecord::Migration::Current

module ActiveRecord::Migration::Compatibility
  def self.find(version); end
end

module ActiveRecord::NestedAttributes
  UNASSIGNABLE_KEYS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::PredicateBuilder
  def [](attr_name, value, operator=T.unsafe(nil)); end

  def build(attribute, value, operator=T.unsafe(nil)); end

  def build_bind_attribute(column_name, value); end

  def build_from_hash(attributes, &block); end

  def expand_from_hash(attributes, &block); end

  def initialize(table); end

  def register_handler(klass, handler); end

  def resolve_arel_attribute(table_name, column_name, &block); end

  def table=(table); end

  def with(table); end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
end

module ActiveRecord::PredicateBuilder::ArrayHandler::NullPredicate
  def self.or(other); end
end

class ActiveRecord::PredicateBuilder::ArrayHandler
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
  def initialize(associated_table, value); end

  def queries(); end
end

class ActiveRecord::PredicateBuilder::AssociationQueryValue
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end
end

class ActiveRecord::PredicateBuilder::BasicObjectHandler
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
  def initialize(associated_table, values); end

  def queries(); end
end

class ActiveRecord::PredicateBuilder::PolymorphicArrayValue
end

class ActiveRecord::PredicateBuilder::RangeHandler
  def call(attribute, value); end

  def initialize(predicate_builder); end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds
  def begin(); end

  def begin=(_); end

  def end(); end

  def end=(_); end

  def exclude_end?(); end
end

class ActiveRecord::PredicateBuilder::RangeHandler::RangeWithBinds
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class ActiveRecord::PredicateBuilder::RangeHandler
end

class ActiveRecord::PredicateBuilder::RelationHandler
  def call(attribute, value); end
end

class ActiveRecord::PredicateBuilder::RelationHandler
end

class ActiveRecord::PredicateBuilder
  def self.references(attributes); end
end

class ActiveRecord::Promise
  def class(); end

  def initialize(future_result, block); end

  def inspect(); end

  def is_a?(arg); end

  def pending?(); end

  def pretty_print(q); end

  def respond_to?(*arg); end

  def then(&block); end

  def value(); end
end

class ActiveRecord::Promise::Complete
  def initialize(value); end

  def then(); end
end

class ActiveRecord::Promise::Complete
end

class ActiveRecord::Promise
end

module ActiveRecord::QueryMethods
  FROZEN_EMPTY_ARRAY = ::T.let(nil, ::T.untyped)
  FROZEN_EMPTY_HASH = ::T.let(nil, ::T.untyped)
  STRUCTURAL_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALID_DIRECTIONS = ::T.let(nil, ::T.untyped)
  VALID_UNSCOPING_VALUES = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Querying
  QUERYING_METHODS = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Reflection
  extend ::ActiveStorage::Reflection::ReflectionExtension
end

class ActiveRecord::Relation
  include ::ActiveRecord::Delegation
  include ::ActiveRecord::Explain
  include ::ActiveRecord::Batches
  include ::ActiveRecord::QueryMethods
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveRecord::SpawnMethods
  include ::ActiveRecord::Calculations
  include ::ActiveRecord::TokenFor::RelationMethods
  CLAUSE_METHODS = ::T.let(nil, ::T.untyped)
  INVALID_METHODS_FOR_DELETE_ALL = ::T.let(nil, ::T.untyped)
  MULTI_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  SINGLE_VALUE_METHODS = ::T.let(nil, ::T.untyped)
  VALUE_METHODS = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::Merger
  NORMAL_VALUES = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Relation::WhereClause
  ARRAY_WITH_EMPTY_STRING = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Result
  def [](idx); end

  def cancel(); end

  def cast_values(type_overrides=T.unsafe(nil)); end

  def column_indexes(); end

  def column_types(); end

  def columns(); end

  def each(&block); end

  def empty?(); end

  def includes_column?(name); end

  def indexed_rows(); end

  def initialize(columns, rows, column_types=T.unsafe(nil)); end

  def last(n=T.unsafe(nil)); end

  def length(); end

  def result(); end

  def rows(); end

  def to_a(); end

  def to_ary(); end
end

class ActiveRecord::Result::IndexedRow
  def ==(other); end

  def [](column); end

  def each_key(&block); end

  def fetch(column); end

  def initialize(column_indexes, row); end

  def key?(column); end

  def keys(); end

  def length(); end

  def size(); end

  def to_h(); end

  def to_hash(); end
end

class ActiveRecord::Result
  def self.empty(async: T.unsafe(nil)); end
end

class ActiveRecord::SchemaMigration
  def arel_table(); end

  def count(); end

  def create_table(); end

  def create_version(version); end

  def delete_all_versions(); end

  def delete_version(version); end

  def drop_table(); end

  def initialize(pool); end

  def integer_versions(); end

  def normalize_migration_number(number); end

  def normalized_versions(); end

  def primary_key(); end

  def table_exists?(); end

  def table_name(); end

  def versions(); end
end

module ActiveRecord::SecureToken
  MINIMUM_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::StatementCache
  def execute(params, connection, allow_retry: T.unsafe(nil), async: T.unsafe(nil), &block); end

  def initialize(query_builder, bind_map, model); end
end

class ActiveRecord::StatementCache::BindMap
  def bind(values); end

  def initialize(bound_attributes); end
end

class ActiveRecord::StatementCache::BindMap
end

class ActiveRecord::StatementCache::Params
  def bind(); end
end

class ActiveRecord::StatementCache::Params
end

class ActiveRecord::StatementCache::PartialQuery
  def initialize(values); end
end

class ActiveRecord::StatementCache::PartialQuery
end

class ActiveRecord::StatementCache::PartialQueryCollector
  def <<(str); end

  def add_bind(obj); end

  def add_binds(binds, proc_for_binds=T.unsafe(nil)); end

  def preparable(); end

  def preparable=(preparable); end

  def retryable(); end

  def retryable=(retryable); end

  def value(); end
end

class ActiveRecord::StatementCache::PartialQueryCollector
end

class ActiveRecord::StatementCache::Query
  def initialize(sql); end

  def sql_for(binds, connection); end
end

class ActiveRecord::StatementCache::Query
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache::Substitute
end

class ActiveRecord::StatementCache
  def self.create(connection, callable=T.unsafe(nil), &block); end

  def self.partial_query(values); end

  def self.partial_query_collector(); end

  def self.query(sql); end

  def self.unsupported_value?(value); end
end

class ActiveRecord::TableMetadata
  def aggregated_with?(aggregation_name); end

  def arel_table(); end

  def associated_table(table_name); end

  def associated_with?(table_name); end

  def has_column?(column_name); end

  def initialize(klass, arel_table, reflection=T.unsafe(nil)); end

  def join_foreign_key(*arg, **arg1, &arg2); end

  def join_foreign_type(*arg, **arg1, &arg2); end

  def join_primary_key(*arg, **arg1, &arg2); end

  def join_primary_type(*arg, **arg1, &arg2); end

  def polymorphic_association?(); end

  def polymorphic_name_association(); end

  def predicate_builder(); end

  def primary_key(); end

  def reflect_on_aggregation(aggregation_name); end

  def through_association?(); end

  def type(column_name); end
end

class ActiveRecord::TableMetadata
end

module ActiveRecord::Tasks::DatabaseTasks
  def cache_dump_filename(db_config, schema_cache_path: T.unsafe(nil)); end

  def charset(configuration, *arguments); end

  def charset_current(env_name=T.unsafe(nil), db_name=T.unsafe(nil)); end

  def check_protected_environments!(environment=T.unsafe(nil)); end

  def check_schema_file(filename); end

  def check_target_version(); end

  def clear_schema_cache(filename); end

  def collation(configuration, *arguments); end

  def collation_current(env_name=T.unsafe(nil), db_name=T.unsafe(nil)); end

  def create(configuration, *arguments); end

  def create_all(); end

  def create_current(environment=T.unsafe(nil), name=T.unsafe(nil)); end

  def database_configuration(); end

  def database_configuration=(database_configuration); end

  def db_configs_with_versions(environment=T.unsafe(nil)); end

  def db_dir(); end

  def db_dir=(db_dir); end

  def drop(configuration, *arguments); end

  def drop_all(); end

  def drop_current(environment=T.unsafe(nil)); end

  def dump_schema(db_config, format=T.unsafe(nil)); end

  def dump_schema_cache(conn_or_pool, filename); end

  def env(); end

  def env=(env); end

  def fixtures_path(); end

  def fixtures_path=(fixtures_path); end

  def for_each(databases); end

  def load_schema(db_config, format=T.unsafe(nil), file=T.unsafe(nil)); end

  def load_schema_current(format=T.unsafe(nil), file=T.unsafe(nil), environment=T.unsafe(nil)); end

  def load_seed(); end

  def migrate(version=T.unsafe(nil), skip_initialize: T.unsafe(nil)); end

  def migrate_all(); end

  def migrate_status(); end

  def migration_class(); end

  def migration_connection(); end

  def migration_connection_pool(); end

  def migrations_paths(); end

  def migrations_paths=(migrations_paths); end

  def name(); end

  def prepare_all(); end

  def purge(configuration); end

  def purge_all(); end

  def purge_current(environment=T.unsafe(nil)); end

  def raise_for_multi_db(environment=T.unsafe(nil), command:); end

  def reconstruct_from_schema(db_config, format=T.unsafe(nil), file=T.unsafe(nil)); end

  def register_task(pattern, task); end

  def root(); end

  def root=(root); end

  def schema_dump_path(db_config, format=T.unsafe(nil)); end

  def schema_up_to_date?(configuration, format=T.unsafe(nil), file=T.unsafe(nil)); end

  def seed_loader(); end

  def seed_loader=(seed_loader); end

  def setup_initial_database_yaml(); end

  def structure_dump(configuration, *arguments); end

  def structure_load(configuration, *arguments); end

  def target_version(); end

  def truncate_all(environment=T.unsafe(nil)); end

  def with_temporary_connection(db_config, clobber: T.unsafe(nil), &block); end

  def with_temporary_pool_for_each(env: T.unsafe(nil), name: T.unsafe(nil), clobber: T.unsafe(nil), &block); end
end

module ActiveRecord::Tasks::DatabaseTasks
  def self.structure_dump_flags(); end

  def self.structure_dump_flags=(val); end

  def self.structure_load_flags(); end

  def self.structure_load_flags=(val); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def charset(); end

  def collation(); end

  def create(); end

  def drop(); end

  def initialize(db_config); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::MySQLDatabaseTasks
  def self.using_database_configurations?(); end
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def charset(); end

  def collation(); end

  def create(connection_already_established=T.unsafe(nil)); end

  def drop(); end

  def initialize(db_config); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
  DEFAULT_ENCODING = ::T.let(nil, ::T.untyped)
  ON_ERROR_STOP_1 = ::T.let(nil, ::T.untyped)
  SQL_COMMENT_BEGIN = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Tasks::PostgreSQLDatabaseTasks
  def self.using_database_configurations?(); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def charset(); end

  def create(); end

  def drop(); end

  def initialize(db_config, root=T.unsafe(nil)); end

  def purge(); end

  def structure_dump(filename, extra_flags); end

  def structure_load(filename, extra_flags); end
end

class ActiveRecord::Tasks::SQLiteDatabaseTasks
  def self.using_database_configurations?(); end
end

module ActiveRecord::TestDatabases
  def self.create_and_load_schema(i, env_name:); end
end

module ActiveRecord::TestFixtures
  def after_teardown(); end

  def before_setup(); end

  def fixture(fixture_set_name, *fixture_names); end
end

class ActiveRecord::Transaction
  def after_commit(&block); end

  def after_rollback(&block); end

  def closed?(); end

  def initialize(internal_transaction); end

  def open?(); end

  def uuid(); end
  NULL_TRANSACTION = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::Transactions
  ACTIONS = ::T.let(nil, ::T.untyped)
end

ActiveRecord::Type::ImmutableString = ActiveModel::Type::ImmutableString

class ActiveRecord::Type::Serialized
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveRecord::Type::Time::Value
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module ActiveRecord::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveStorage::Analyzer::ImageAnalyzer::Vips
  ROTATIONS = ::T.let(nil, ::T.untyped)
end

class ActiveStorage::Attached::Changes::DetachMany
  def attachments(); end

  def detach(); end

  def initialize(name, record, attachments); end

  def name(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::DetachMany
end

class ActiveStorage::Attached::Changes::DetachOne
  def attachment(); end

  def detach(); end

  def initialize(name, record, attachment); end

  def name(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::DetachOne
end

class ActiveStorage::Attached::Changes::PurgeMany
  def attachments(); end

  def initialize(name, record, attachments); end

  def name(); end

  def purge(); end

  def purge_later(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::PurgeMany
end

class ActiveStorage::Attached::Changes::PurgeOne
  def attachment(); end

  def initialize(name, record, attachment); end

  def name(); end

  def purge(); end

  def purge_later(); end

  def record(); end
end

class ActiveStorage::Attached::Changes::PurgeOne
end

class ActiveStorage::Blob
  MINIMUM_TOKEN_LENGTH = ::T.let(nil, ::T.untyped)
end

module ActiveStorage::Streaming
  DEFAULT_BLOB_STREAMING_DISPOSITION = ::T.let(nil, ::T.untyped)
end

module ActiveStorage::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::BacktraceCleaner
  FORMATTED_GEMS_PATTERN = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Benchmark
  def self.realtime(unit=T.unsafe(nil), &block); end
end

module ActiveSupport::Cache
  DEFAULT_COMPRESS_LIMIT = ::T.let(nil, ::T.untyped)
  OPTION_ALIASES = ::T.let(nil, ::T.untyped)
  UNIVERSAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::Coder
  COMPRESSED_FLAG = ::T.let(nil, ::T.untyped)
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
  OBJECT_DUMP_TYPE = ::T.let(nil, ::T.untyped)
  PACKED_EXPIRES_AT_TEMPLATE = ::T.let(nil, ::T.untyped)
  PACKED_TEMPLATE = ::T.let(nil, ::T.untyped)
  PACKED_TYPE_TEMPLATE = ::T.let(nil, ::T.untyped)
  PACKED_VERSION_INDEX = ::T.let(nil, ::T.untyped)
  PACKED_VERSION_LENGTH_TEMPLATE = ::T.let(nil, ::T.untyped)
  SIGNATURE = ::T.let(nil, ::T.untyped)
  STRING_DESERIALIZERS = ::T.let(nil, ::T.untyped)
  STRING_ENCODINGS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::FileStore
  def cache_path(); end

  def initialize(cache_path, **options); end
end

class ActiveSupport::Cache::FileStore
  def self.supports_cache_versioning?(); end
end

class ActiveSupport::Cache::MemCacheStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  def initialize(*addresses); end

  def stats(); end
  ESCAPE_KEY_CHARS = ::T.let(nil, ::T.untyped)
  KEY_MAX_SIZE = ::T.let(nil, ::T.untyped)
  OVERRIDDEN_OPTIONS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::MemCacheStore
  def self.build_mem_cache(*addresses); end

  def self.supports_cache_versioning?(); end
end

module ActiveSupport::Cache::MemoryStore::DupCoder
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::NullStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
end

class ActiveSupport::Cache::NullStore
  def self.supports_cache_versioning?(); end
end

class ActiveSupport::Cache::RedisCacheStore
  include ::ActiveSupport::Cache::Strategy::LocalCache
  def initialize(error_handler: T.unsafe(nil), **redis_options); end

  def max_key_bytesize(); end

  def redis(); end

  def stats(); end
  DEFAULT_ERROR_HANDLER = ::T.let(nil, ::T.untyped)
  DEFAULT_REDIS_OPTIONS = ::T.let(nil, ::T.untyped)
  MAX_KEY_BYTESIZE = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Cache::RedisCacheStore
  def self.build_redis(redis: T.unsafe(nil), url: T.unsafe(nil), **redis_options); end

  def self.supports_cache_versioning?(); end
end

module ActiveSupport::Cache::SerializerWithFallback
  SERIALIZERS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::SerializerWithFallback::Marshal70WithFallback
  MARK_COMPRESSED = ::T.let(nil, ::T.untyped)
  MARK_UNCOMPRESSED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Cache::SerializerWithFallback::Marshal71WithFallback
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Callbacks
  CALLBACK_FILTER_TYPES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::CodeGenerator::MethodSet
  METHOD_CACHES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Concurrency::ThreadLoadInterlockAwareMonitor
  include ::ActiveSupport::Concurrency::LoadInterlockAwareMonitorMixin
end

class ActiveSupport::CurrentAttributes
  INVALID_ATTRIBUTE_NAMES = ::T.let(nil, ::T.untyped)
  NOT_SET = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Delegation
  RESERVED_METHOD_NAMES = ::T.let(nil, ::T.untyped)
  RUBY_RESERVED_KEYWORDS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Deprecation::Reporting
  LIB_DIR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration
  PARTS = ::T.let(nil, ::T.untyped)
  PARTS_IN_SECONDS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
  SECONDS_PER_HOUR = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MINUTE = ::T.let(nil, ::T.untyped)
  SECONDS_PER_MONTH = ::T.let(nil, ::T.untyped)
  SECONDS_PER_WEEK = ::T.let(nil, ::T.untyped)
  SECONDS_PER_YEAR = ::T.let(nil, ::T.untyped)
  VARIABLE_PARTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser
  def initialize(string); end

  def mode(); end

  def mode=(mode); end

  def parse!(); end

  def parts(); end

  def scanner(); end

  def sign(); end

  def sign=(sign); end
  COMMA = ::T.let(nil, ::T.untyped)
  DATE_COMPONENT = ::T.let(nil, ::T.untyped)
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
  DATE_MARKER = ::T.let(nil, ::T.untyped)
  DATE_TO_PART = ::T.let(nil, ::T.untyped)
  PERIOD = ::T.let(nil, ::T.untyped)
  PERIOD_OR_COMMA = ::T.let(nil, ::T.untyped)
  SIGN_MARKER = ::T.let(nil, ::T.untyped)
  TIME_COMPONENT = ::T.let(nil, ::T.untyped)
  TIME_COMPONENTS = ::T.let(nil, ::T.untyped)
  TIME_MARKER = ::T.let(nil, ::T.untyped)
  TIME_TO_PART = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser::ParsingError
end

class ActiveSupport::Duration::ISO8601Parser
end

class ActiveSupport::Duration::ISO8601Serializer
  def initialize(duration, precision: T.unsafe(nil)); end

  def serialize(); end
  DATE_COMPONENTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::Duration::ISO8601Serializer
end

class ActiveSupport::EncryptedFile
  CIPHER = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::EnumerableCoreExt::SoleItemExpectedError
end

class ActiveSupport::EnumerableCoreExt::SoleItemExpectedError
end

class ActiveSupport::EnvironmentInquirer
  DEFAULT_ENVIRONMENTS = ::T.let(nil, ::T.untyped)
  LOCAL_ENVIRONMENTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::ErrorReporter
  DEFAULT_RESCUE = ::T.let(nil, ::T.untyped)
  DEFAULT_SOURCE = ::T.let(nil, ::T.untyped)
  SEVERITIES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::ExecutionWrapper
  Null = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Gzip
end

class ActiveSupport::Gzip::Stream
  def initialize(*arg); end
end

class ActiveSupport::Gzip::Stream
end

module ActiveSupport::Gzip
  def self.compress(source, level=T.unsafe(nil), strategy=T.unsafe(nil)); end

  def self.decompress(source); end
end

class ActiveSupport::HashWithIndifferentAccess
  NOT_GIVEN = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Inflector
  ALLOWED_ENCODINGS_FOR_TRANSLITERATE = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::LogSubscriber
  LEVEL_CHECKS = ::T.let(nil, ::T.untyped)
  MODES = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::MessageEncryptor
  include ::ActiveSupport::Messages::Rotator
  AUTH_TAG_LENGTH = ::T.let(nil, ::T.untyped)
  SEPARATOR = ::T.let(nil, ::T.untyped)
end

ActiveSupport::MessageEncryptor::OpenSSLCipherError = OpenSSL::Cipher::CipherError

class ActiveSupport::MessageEncryptors
end

class ActiveSupport::MessageEncryptors
end

class ActiveSupport::MessageVerifier
  include ::ActiveSupport::Messages::Rotator
  SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_LENGTH = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Messages::Metadata
  ENVELOPE_SERIALIZERS = ::T.let(nil, ::T.untyped)
  TIMESTAMP_SERIALIZERS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Messages::SerializerWithFallback
  SERIALIZERS = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Messages::SerializerWithFallback::JsonWithFallback
  JSON_START_WITH = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Messages::SerializerWithFallback::MarshalWithFallback
  MARSHAL_SIGNATURE = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def execute(); end

  def initialize(number, options); end

  def namespace(); end

  def namespace=(namespace); end

  def namespace?(); end

  def number(); end

  def opts(); end

  def validate_float(); end

  def validate_float=(validate_float); end

  def validate_float?(); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberConverter
  def self.convert(number, options); end

  def self.namespace(); end

  def self.namespace=(value); end

  def self.namespace?(); end

  def self.validate_float(); end

  def self.validate_float=(value); end

  def self.validate_float?(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToCurrencyConverter
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
  def convert(); end
  DEFAULT_DELIMITER_REGEX = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToDelimitedConverter
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
  def convert(); end
  DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
  INVERTED_DECIMAL_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanConverter
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
  def convert(); end
  STORAGE_UNITS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::NumberHelper::NumberToHumanSizeConverter
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPercentageConverter
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToPhoneConverter
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
  def convert(); end
end

class ActiveSupport::NumberHelper::NumberToRoundedConverter
end

class ActiveSupport::NumberHelper::RoundingHelper
  def digit_count(number); end

  def initialize(options); end

  def options(); end

  def round(number); end
end

class ActiveSupport::NumberHelper::RoundingHelper
end

class ActiveSupport::OrderedHash
  def encode_with(coder); end

  def reject(*args, &block); end

  def select(*args, &block); end

  def to_yaml_type(); end
end

module ActiveSupport::RangeWithFormat
  RANGE_FORMATS = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::SecureCompareRotator
  include ::ActiveSupport::SecurityUtils
  def initialize(value, on_rotation: T.unsafe(nil)); end

  def rotate(previous_value); end

  def secure_compare!(other_value, on_rotation: T.unsafe(nil)); end
end

class ActiveSupport::SecureCompareRotator::InvalidMatch
end

class ActiveSupport::SecureCompareRotator::InvalidMatch
end

class ActiveSupport::SecureCompareRotator
end

class ActiveSupport::SyntaxErrorProxy
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::SyntaxErrorProxy::BacktraceLocationProxy
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TestCase
  include ::ActiveSupport::Testing::SetupAndTeardown
  include ::ActiveSupport::Testing::TestsWithoutAssertions
  def fixture_class_names(); end

  def fixture_class_names=(fixture_class_names); end

  def fixture_class_names?(); end

  def fixture_paths(); end

  def fixture_paths?(); end

  def fixture_sets(); end

  def fixture_sets=(fixture_sets); end

  def fixture_sets?(); end

  def fixture_table_names(); end

  def fixture_table_names=(fixture_table_names); end

  def fixture_table_names?(); end

  def lock_threads(); end

  def lock_threads=(lock_threads); end

  def lock_threads?(); end

  def pre_loaded_fixtures(); end

  def pre_loaded_fixtures=(pre_loaded_fixtures); end

  def pre_loaded_fixtures?(); end

  def use_instantiated_fixtures(); end

  def use_instantiated_fixtures=(use_instantiated_fixtures); end

  def use_instantiated_fixtures?(); end

  def use_transactional_tests(); end

  def use_transactional_tests=(use_transactional_tests); end

  def use_transactional_tests?(); end
end

class ActiveSupport::TestCase
  def self.fixture_class_names(); end

  def self.fixture_class_names=(value); end

  def self.fixture_class_names?(); end

  def self.fixture_paths(); end

  def self.fixture_paths=(value); end

  def self.fixture_paths?(); end

  def self.fixture_sets(); end

  def self.fixture_sets=(value); end

  def self.fixture_sets?(); end

  def self.fixture_table_names(); end

  def self.fixture_table_names=(value); end

  def self.fixture_table_names?(); end

  def self.lock_threads(); end

  def self.lock_threads=(value); end

  def self.lock_threads?(); end

  def self.pre_loaded_fixtures(); end

  def self.pre_loaded_fixtures=(value); end

  def self.pre_loaded_fixtures?(); end

  def self.use_instantiated_fixtures(); end

  def self.use_instantiated_fixtures=(value); end

  def self.use_instantiated_fixtures?(); end

  def self.use_transactional_tests(); end

  def self.use_transactional_tests=(value); end

  def self.use_transactional_tests?(); end
end

module ActiveSupport::Testing::Assertions
  UNTRACKED = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::Testing::Isolation::Subprocess
  ORIG_ARGV = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeWithZone
  include ::DateAndTime::Compatibility
  PRECISIONS = ::T.let(nil, ::T.untyped)
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::TimeZone
  MAPPING = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class ActiveSupport::XMLConverter
  DISALLOWED_TYPES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini
  def backend(); end

  def backend=(name); end

  def depth(); end

  def depth=(depth); end

  def parse(*arg, **arg1, &arg2); end

  def rename_key(key, options=T.unsafe(nil)); end

  def to_tag(key, value, options); end

  def with_backend(name); end
  DEFAULT_ENCODINGS = ::T.let(nil, ::T.untyped)
  FORMATTING = ::T.let(nil, ::T.untyped)
  PARSING = ::T.let(nil, ::T.untyped)
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

module ActiveSupport::XmlMini::FileLike
  def content_type(); end

  def content_type=(content_type); end

  def original_filename(); end

  def original_filename=(original_filename); end
end

module ActiveSupport::XmlMini::FileLike
end

module ActiveSupport::XmlMini
  extend ::ActiveSupport::XmlMini
end

module Addressable::IDNA
  ACE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  ACE_PREFIX = ::T.let(nil, ::T.untyped)
  COMPOSITION_TABLE = ::T.let(nil, ::T.untyped)
  PUNYCODE_BASE = ::T.let(nil, ::T.untyped)
  PUNYCODE_DAMP = ::T.let(nil, ::T.untyped)
  PUNYCODE_DELIMITER = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_BIAS = ::T.let(nil, ::T.untyped)
  PUNYCODE_INITIAL_N = ::T.let(nil, ::T.untyped)
  PUNYCODE_MAXINT = ::T.let(nil, ::T.untyped)
  PUNYCODE_PRINT_ASCII = ::T.let(nil, ::T.untyped)
  PUNYCODE_SKEW = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMAX = ::T.let(nil, ::T.untyped)
  PUNYCODE_TMIN = ::T.let(nil, ::T.untyped)
  UNICODE_DATA = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_CANONICAL = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMBINING_CLASS = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_COMPATIBILITY = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_EXCLUSION = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_LOWERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_TITLECASE = ::T.let(nil, ::T.untyped)
  UNICODE_DATA_UPPERCASE = ::T.let(nil, ::T.untyped)
  UNICODE_MAX_LENGTH = ::T.let(nil, ::T.untyped)
  UNICODE_TABLE = ::T.let(nil, ::T.untyped)
  UTF8_REGEX = ::T.let(nil, ::T.untyped)
  UTF8_REGEX_MULTIBYTE = ::T.let(nil, ::T.untyped)
end

class Addressable::Template
  EXPRESSION = ::T.let(nil, ::T.untyped)
  JOINERS = ::T.let(nil, ::T.untyped)
  LEADERS = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  VARIABLE_LIST = ::T.let(nil, ::T.untyped)
  VARNAME = ::T.let(nil, ::T.untyped)
  VARSPEC = ::T.let(nil, ::T.untyped)
end

class Addressable::URI
  EMPTY_STR = ::T.let(nil, ::T.untyped)
  NORMPATH = ::T.let(nil, ::T.untyped)
  PARENT = ::T.let(nil, ::T.untyped)
  PORT_MAPPING = ::T.let(nil, ::T.untyped)
  RULE_2A = ::T.let(nil, ::T.untyped)
  RULE_2B_2C = ::T.let(nil, ::T.untyped)
  RULE_2D = ::T.let(nil, ::T.untyped)
  RULE_PREFIXED_PARENT = ::T.let(nil, ::T.untyped)
  SELF_REF = ::T.let(nil, ::T.untyped)
  SEQUENCE_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SEQUENCE_UPCASED_PERCENT_ENCODING_TABLE = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
  URIREGEX = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::CharacterClasses
  ALPHA = ::T.let(nil, ::T.untyped)
  AUTHORITY = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  GEN_DELIMS = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESERVED_AND_UNRESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SUB_DELIMS = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::CharacterClassesRegexps
  AUTHORITY = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PATH = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESERVED_AND_UNRESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::URI::NormalizeCharacterClasses
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  PCHAR = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
end

module Addressable::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

class Addrinfo
  def connect_internal(local_addrinfo, timeout=T.unsafe(nil)); end
end

module Annotate
  FLAG_OPTIONS = ::T.let(nil, ::T.untyped)
  OTHER_OPTIONS = ::T.let(nil, ::T.untyped)
  PATH_OPTIONS = ::T.let(nil, ::T.untyped)
  POSITION_OPTIONS = ::T.let(nil, ::T.untyped)
  TRUE_RE = ::T.let(nil, ::T.untyped)
end

module AnnotateModels
  FACTORY_GIRL_SPEC_DIR = ::T.let(nil, ::T.untyped)
  FACTORY_GIRL_TEST_DIR = ::T.let(nil, ::T.untyped)
  FACTORY_PATTERNS = ::T.let(nil, ::T.untyped)
  FIXTURE_PATTERNS = ::T.let(nil, ::T.untyped)
  PATTERN = ::T.let(nil, ::T.untyped)
  TEST_PATTERNS = ::T.let(nil, ::T.untyped)
end

module ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::Turbo::Streams::ActionHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Importmap::ImportmapTagsHelper
  include ::ApplicationHelper
end

module ApplicationController::HelperMethods
end

class ApplicationRecord
  include ::ApplicationRecord::GeneratedAttributeMethods
  include ::ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAssociationMethods
end

module ApplicationRecord::GeneratedAttributeMethods
end

module ApplicationRecord::GeneratedAttributeMethods
end

module Arel
  VERSION = ::T.let(nil, ::T.untyped)
end

Arel::Attribute = Arel::Attributes::Attribute

class Arel::SelectManager
  STRING_OR_SYMBOL_CLASS = ::T.let(nil, ::T.untyped)
end

class ArgumentError
  include ::ErrorHighlight::CoreExt
end

class Array
  def deconstruct(); end

  def fetch_values(*indexes, &block); end

  def to_h(); end
end

class Array
  def self.new(*arg); end
end

class Artist
  include ::Artist::GeneratedAttributeMethods
  include ::Artist::GeneratedAssociationMethods
end

module Artist::GeneratedAssociationMethods
end

module Artist::GeneratedAssociationMethods
end

module Artist::GeneratedAttributeMethods
end

module Artist::GeneratedAttributeMethods
end

module AutoprefixerRails
  IS_SECTION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class AutoprefixerRails::Processor
  SUPPORTED_RUNTIMES = ::T.let(nil, ::T.untyped)
end

module Base64
  VERSION = ::T.let(nil, ::T.untyped)
end

BasicObject::BasicObject = BasicObject

module Benchmark
  VERSION = ::T.let(nil, ::T.untyped)
end

class BigDecimal
  include ::ActiveSupport::BigDecimalWithDefaultFormat
  VERSION = ::T.let(nil, ::T.untyped)
end

Bindex = Skiptrace

class Binding
  def clone(); end
end

module Bootsnap
  VERSION = ::T.let(nil, ::T.untyped)
end

module Bootsnap::CompileCache
  UNCOMPILABLE = ::T.let(nil, ::T.untyped)
end

module Bootsnap::CompileCache::YAML
  SUPPORTED_INTERNAL_ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Bootsnap::ExplicitRequire
  ARCHDIR = ::T.let(nil, ::T.untyped)
  DLEXT = ::T.let(nil, ::T.untyped)
  RUBYLIBDIR = ::T.let(nil, ::T.untyped)
end

module Bootsnap::LoadPathCache
  CACHED_EXTENSIONS = ::T.let(nil, ::T.untyped)
  DLEXT = ::T.let(nil, ::T.untyped)
  DLEXT2 = ::T.let(nil, ::T.untyped)
  DL_EXTENSIONS = ::T.let(nil, ::T.untyped)
  DOT_RB = ::T.let(nil, ::T.untyped)
  DOT_SO = ::T.let(nil, ::T.untyped)
  FALLBACK_SCAN = ::T.let(nil, ::T.untyped)
  SLASH = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Cache
  AGE_THRESHOLD = ::T.let(nil, ::T.untyped)
  BUILTIN_FEATURES = ::T.let(nil, ::T.untyped)
  TRUFFLERUBY_LIB_DIR_PREFIX = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Path
  RUBY_LIBDIR = ::T.let(nil, ::T.untyped)
  RUBY_SITEDIR = ::T.let(nil, ::T.untyped)
  STABLE = ::T.let(nil, ::T.untyped)
  VOLATILE = ::T.let(nil, ::T.untyped)
end

module Bootsnap::LoadPathCache::PathScanner
  ALTERNATIVE_NATIVE_EXTENSIONS_PATTERN = ::T.let(nil, ::T.untyped)
  BUNDLE_PATH = ::T.let(nil, ::T.untyped)
  NORMALIZE_NATIVE_EXTENSIONS = ::T.let(nil, ::T.untyped)
  REQUIRABLE_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Bootsnap::LoadPathCache::Store
  CURRENT_VERSION = ::T.let(nil, ::T.untyped)
  VERSION_KEY = ::T.let(nil, ::T.untyped)
end

module Bootstrap
  BOOTSTRAP_SHA = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::APIResponseInvalidDependenciesError
  def status_code(); end
end

class Bundler::APIResponseInvalidDependenciesError
end

module Bundler::CIDetector
  ENV_DESCRIPTORS = ::T.let(nil, ::T.untyped)
  ENV_INDICATORS = ::T.let(nil, ::T.untyped)
end

module Bundler::CIDetector
  def self.ci?(); end

  def self.ci_strings(); end
end

class Bundler::CLI
  def add(*gems); end

  def binstubs(*gems); end

  def cache(); end

  def check(); end

  def clean(); end

  def cli_help(); end

  def config(*args); end

  def console(group=T.unsafe(nil)); end

  def doctor(); end

  def env(); end

  def exec(*args); end

  def fund(); end

  def gem(name); end

  def help(cli=T.unsafe(nil)); end

  def info(gem_name); end

  def init(); end

  def initialize(*args); end

  def inject(name, version); end

  def install(); end

  def issue(); end

  def licenses(); end

  def list(); end

  def lock(); end

  def open(name); end

  def outdated(*gems); end

  def platform(); end

  def plugin(*args); end

  def pristine(*gems); end

  def remove(*gems); end

  def show(gem_name=T.unsafe(nil)); end

  def update(*gems); end

  def version(); end

  def viz(); end
  AUTO_INSTALL_CMDS = ::T.let(nil, ::T.untyped)
  COMMAND_ALIASES = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  PARSEABLE_COMMANDS = ::T.let(nil, ::T.untyped)
end

module Bundler::CLI::Common
end

module Bundler::CLI::Common
  def self.ask_for_spec_from(specs); end

  def self.clean_after_install?(); end

  def self.configure_gem_version_promoter(definition, options); end

  def self.default_gem_spec(name); end

  def self.ensure_all_gems_in_lockfile!(names, locked_gems=T.unsafe(nil)); end

  def self.gem_not_found_message(missing_gem_name, alternatives); end

  def self.output_fund_metadata_summary(); end

  def self.output_post_install_messages(messages); end

  def self.output_without_groups_message(command); end

  def self.patch_level_options(options); end

  def self.print_post_install_message(name, msg); end

  def self.select_spec(name, regex_match=T.unsafe(nil)); end

  def self.verbalize_groups(groups); end

  def self.without_groups_message(command); end
end

class Bundler::CLI::Config
  def base(name=T.unsafe(nil), *value); end

  def get(name); end

  def list(); end

  def set(name, value, *value_); end

  def unset(name); end
end

class Bundler::CLI::Config::Base
  def confirm(name); end

  def confirm_all(); end

  def explicit_scope?(); end

  def initialize(options, name, value, thor); end

  def message(); end

  def name(); end

  def new_value(); end

  def options(); end

  def run(); end

  def scope(); end

  def show_pretty_values_for(setting); end

  def thor(); end

  def validate_scope!(); end

  def value(); end

  def warn_unused_scope(msg); end
end

class Bundler::CLI::Config::Base
end

class Bundler::CLI::Config
end

class Bundler::CLI::Install
  def initialize(options); end

  def options(); end

  def run(); end
end

class Bundler::CLI::Install
end

class Bundler::CLI::Plugin
  def install(*plugins); end

  def list(); end

  def uninstall(*plugins); end
end

class Bundler::CLI::Plugin
end

class Bundler::CLI
  def self.aliases_for(command_name); end

  def self.all_aliases(); end

  def self.check_deprecated_ext_option(arguments); end

  def self.deprecated_ext_value?(arguments); end

  def self.dispatch(*arg); end

  def self.reformatted_help_args(args); end

  def self.source_root(); end

  def self.start(*arg); end
end

class Bundler::Checksum
  def ==(other); end

  def algo(); end

  def digest(); end

  def eql?(other); end

  def formatted_sources(); end

  def initialize(algo, digest, source); end

  def match?(other); end

  def merge!(other); end

  def removable?(); end

  def removal_instructions(); end

  def same_source?(other); end

  def sources(); end

  def to_lock(); end
  ALGO_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Bundler::Checksum::Source
  def ==(other); end

  def initialize(type, location); end

  def location(); end

  def removable?(); end

  def removal(); end

  def type(); end
end

class Bundler::Checksum::Source
end

class Bundler::Checksum::Store
  def merge!(other); end

  def register(spec, checksum); end

  def replace(spec, checksum); end

  def store(); end

  def to_lock(spec); end
end

class Bundler::Checksum::Store
end

class Bundler::Checksum
  def self.from_api(digest, source_uri, algo=T.unsafe(nil)); end

  def self.from_gem(io, pathname, algo=T.unsafe(nil)); end

  def self.from_gem_package(gem_package, algo=T.unsafe(nil)); end

  def self.from_lock(lock_checksum, lockfile_location); end

  def self.to_hexdigest(digest, algo=T.unsafe(nil)); end
end

class Bundler::ChecksumMismatchError
  def initialize(lock_name, existing, checksum); end

  def mismatch_resolution_instructions(); end
end

class Bundler::ChecksumMismatchError
end

class Bundler::CompactIndexClient
  def available?(); end

  def dependencies(names); end

  def info(name); end

  def initialize(directory, fetcher=T.unsafe(nil)); end

  def latest_version(name); end

  def names(); end

  def reset!(); end

  def versions(); end
  DEBUG_MUTEX = ::T.let(nil, ::T.untyped)
  INFO_DEPS = ::T.let(nil, ::T.untyped)
  INFO_NAME = ::T.let(nil, ::T.untyped)
  INFO_PLATFORM = ::T.let(nil, ::T.untyped)
  INFO_REQS = ::T.let(nil, ::T.untyped)
  INFO_VERSION = ::T.let(nil, ::T.untyped)
  SUPPORTED_DIGESTS = ::T.let(nil, ::T.untyped)
end

class Bundler::CompactIndexClient::Cache
  def directory(); end

  def info(name, remote_checksum=T.unsafe(nil)); end

  def initialize(directory, fetcher=T.unsafe(nil)); end

  def names(); end

  def reset!(); end

  def versions(); end
end

class Bundler::CompactIndexClient::Cache
end

class Bundler::CompactIndexClient::CacheFile
  def append(data); end

  def close(); end

  def commit(); end

  def commit!(); end

  def digests=(expected_digests); end

  def digests?(); end

  def initialize(original_path, &block); end

  def initialize_digests(keys=T.unsafe(nil)); end

  def open(write_mode=T.unsafe(nil), perm=T.unsafe(nil), &block); end

  def original_path(); end

  def path(); end

  def reset_digests(); end

  def size(); end

  def verify(); end

  def write(data); end
end

class Bundler::CompactIndexClient::CacheFile::ClosedError
end

class Bundler::CompactIndexClient::CacheFile::ClosedError
end

class Bundler::CompactIndexClient::CacheFile::DigestMismatchError
  def initialize(digests, expected_digests); end
end

class Bundler::CompactIndexClient::CacheFile::DigestMismatchError
end

class Bundler::CompactIndexClient::CacheFile::Error
end

class Bundler::CompactIndexClient::CacheFile::Error
end

class Bundler::CompactIndexClient::CacheFile
  def self.copy(path, &block); end

  def self.write(path, data, digests=T.unsafe(nil)); end
end

class Bundler::CompactIndexClient::Error
end

class Bundler::CompactIndexClient::Error
end

Bundler::CompactIndexClient::GemParser = Gem::Resolver::APISet::GemParser

class Bundler::CompactIndexClient::Parser
  def available?(); end

  def info(name); end

  def initialize(compact_index); end

  def names(); end

  def versions(); end
end

class Bundler::CompactIndexClient::Parser
end

class Bundler::CompactIndexClient::Updater
  def initialize(fetcher); end

  def update(remote_path, local_path, etag_path); end
end

class Bundler::CompactIndexClient::Updater::MismatchedChecksumError
  def initialize(path, message); end
end

class Bundler::CompactIndexClient::Updater::MismatchedChecksumError
end

class Bundler::CompactIndexClient::Updater
end

class Bundler::CompactIndexClient
  def self.debug(); end
end

class Bundler::ConnectionPool
  def auto_reload_after_fork(); end

  def available(); end

  def checkin(force: T.unsafe(nil)); end

  def checkout(options=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil), &block); end

  def reload(&block); end

  def shutdown(&block); end

  def size(); end

  def then(options=T.unsafe(nil)); end

  def with(options=T.unsafe(nil)); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::ConnectionPool::TimedStack
  def <<(obj, options=T.unsafe(nil)); end

  def empty?(); end

  def initialize(size=T.unsafe(nil), &block); end

  def length(); end

  def max(); end

  def pop(timeout=T.unsafe(nil), options=T.unsafe(nil)); end

  def push(obj, options=T.unsafe(nil)); end

  def shutdown(reload: T.unsafe(nil), &block); end
end

class Bundler::ConnectionPool::TimedStack
end

class Bundler::ConnectionPool
  def self.after_fork(); end

  def self.wrap(options, &block); end
end

class Bundler::CorruptBundlerInstallError
  def initialize(loaded_spec); end

  def status_code(); end
end

class Bundler::CorruptBundlerInstallError
end

class Bundler::CurrentRuby
  def jruby_30?(); end

  def jruby_31?(); end

  def jruby_32?(); end

  def jruby_33?(); end

  def jruby_3?(); end

  def maglev_30?(); end

  def maglev_31?(); end

  def maglev_32?(); end

  def maglev_33?(); end

  def maglev_3?(); end

  def mingw_30?(); end

  def mingw_31?(); end

  def mingw_32?(); end

  def mingw_33?(); end

  def mingw_3?(); end

  def mri_30?(); end

  def mri_31?(); end

  def mri_32?(); end

  def mri_33?(); end

  def mri_3?(); end

  def mswin64_30?(); end

  def mswin64_31?(); end

  def mswin64_32?(); end

  def mswin64_33?(); end

  def mswin64_3?(); end

  def mswin_30?(); end

  def mswin_31?(); end

  def mswin_32?(); end

  def mswin_33?(); end

  def mswin_3?(); end

  def on_30?(); end

  def on_31?(); end

  def on_32?(); end

  def on_33?(); end

  def on_3?(); end

  def rbx_30?(); end

  def rbx_31?(); end

  def rbx_32?(); end

  def rbx_33?(); end

  def rbx_3?(); end

  def ruby_30?(); end

  def ruby_31?(); end

  def ruby_32?(); end

  def ruby_33?(); end

  def ruby_3?(); end

  def truffleruby_30?(); end

  def truffleruby_31?(); end

  def truffleruby_32?(); end

  def truffleruby_33?(); end

  def truffleruby_3?(); end

  def windows?(); end

  def windows_18?(); end

  def windows_19?(); end

  def windows_1?(); end

  def windows_20?(); end

  def windows_21?(); end

  def windows_22?(); end

  def windows_23?(); end

  def windows_24?(); end

  def windows_25?(); end

  def windows_26?(); end

  def windows_27?(); end

  def windows_2?(); end

  def windows_30?(); end

  def windows_31?(); end

  def windows_32?(); end

  def windows_33?(); end

  def windows_3?(); end

  def x64_mingw_30?(); end

  def x64_mingw_31?(); end

  def x64_mingw_32?(); end

  def x64_mingw_33?(); end

  def x64_mingw_3?(); end
end

class Bundler::Definition
  def add_checksums(); end

  def bundler_version_to_lock(); end

  def check!(); end

  def current_locked_dependencies(); end

  def deleted_deps(); end

  def dependencies_for(groups); end

  def filter_relevant(dependencies); end

  def locked_checksums(); end

  def locked_dependencies(); end

  def new_deps(); end

  def no_resolve_needed?(); end

  def normalize_platforms(); end

  def prefer_local!(); end

  def remotely!(); end

  def requested_dependencies(); end

  def setup_domain!(options=T.unsafe(nil)); end

  def source_requirements=(source_requirements); end

  def sources(); end

  def with_cache!(); end
end

class Bundler::Definition
  def self.no_lock(); end

  def self.no_lock=(no_lock); end
end

class Bundler::Dependency
  def branch(); end

  def expanded_platforms(); end

  def gemspec_dev_dep?(); end

  def git(); end

  def github(); end

  def glob(); end

  def path(); end

  def ref(); end
  ALL_RUBY_VERSIONS = ::T.let(nil, ::T.untyped)
end

Bundler::Deprecate = Gem::Deprecate

module Bundler::Digest
  SHA1_MASK = ::T.let(nil, ::T.untyped)
  SHA1_WORDS = ::T.let(nil, ::T.untyped)
end

module Bundler::Digest
  def self.sha1(string); end
end

class Bundler::DirectoryRemovalError
  def initialize(orig_exception, msg); end

  def status_code(); end
end

class Bundler::DirectoryRemovalError
end

class Bundler::Dsl
  def check_primary_source_safety(); end

  def gemfile(); end
  GITHUB_PULL_REQUEST_URL = ::T.let(nil, ::T.untyped)
  GITLAB_MERGE_REQUEST_URL = ::T.let(nil, ::T.untyped)
end

class Bundler::EndpointSpecification
  include ::Bundler::MatchRemoteMetadata
  include ::Bundler::FetchMetadata
  def locked_platform(); end

  def locked_platform=(locked_platform); end
end

class Bundler::Env
end

class Bundler::Env
  def self.environment(); end

  def self.report(options=T.unsafe(nil)); end

  def self.write(io); end
end

class Bundler::EnvironmentPreserver
  def replace_with_backup(); end
end

class Bundler::EnvironmentPreserver
  def self.from_env(); end
end

class Bundler::FeatureFlag
  def lockfile_checksums?(); end
end

module Bundler::FetchMetadata
  def matches_current_ruby?(); end

  def matches_current_rubygems?(); end
end

module Bundler::FetchMetadata
end

class Bundler::Fetcher
  def api_fetcher?(); end

  def fetch_spec(spec); end

  def gem_remote_fetcher(); end

  def http_proxy(); end

  def initialize(remote); end

  def specs(gem_names, source); end

  def specs_with_retry(gem_names, source); end

  def uri(); end

  def user_agent(); end
  FAIL_ERRORS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
  NET_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Fetcher::AuthenticationForbiddenError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::AuthenticationForbiddenError
end

class Bundler::Fetcher::AuthenticationRequiredError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::BadAuthenticationError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::Base
  def api_fetcher?(); end

  def available?(); end

  def display_uri(); end

  def downloader(); end

  def fetch_uri(); end

  def gem_remote_fetcher(); end

  def initialize(downloader, remote, display_uri, gem_remote_fetcher); end

  def remote(); end

  def remote_uri(); end
end

class Bundler::Fetcher::Base
end

class Bundler::Fetcher::CertificateFailureError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::CompactIndex
  def available?(*args, &blk); end

  def specs(*args, &blk); end

  def specs_for_names(gem_names); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def call(path, headers); end

  def fetcher(); end

  def fetcher=(_); end

  def ui(); end

  def ui=(_); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Bundler::Fetcher::CompactIndex
  def self.compact_index_request(method_name); end
end

class Bundler::Fetcher::Dependency
  def dependency_api_uri(gem_names=T.unsafe(nil)); end

  def dependency_specs(gem_names); end

  def get_formatted_specs_and_deps(gem_list); end

  def specs(gem_names, full_dependency_list=T.unsafe(nil), last_spec_list=T.unsafe(nil)); end

  def unmarshalled_dep_gems(gem_names); end
end

class Bundler::Fetcher::Dependency
end

class Bundler::Fetcher::Downloader
  def connection(); end

  def fetch(uri, headers=T.unsafe(nil), counter=T.unsafe(nil)); end

  def initialize(connection, redirect_limit); end

  def redirect_limit(); end

  def request(uri, headers); end
end

class Bundler::Fetcher::Downloader
end

class Bundler::Fetcher::Index
  def specs(_gem_names); end
end

class Bundler::Fetcher::Index
end

class Bundler::Fetcher::SSLError
  def initialize(msg=T.unsafe(nil)); end
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher
  def self.api_timeout(); end

  def self.api_timeout=(api_timeout); end

  def self.disable_endpoint(); end

  def self.disable_endpoint=(disable_endpoint); end

  def self.max_retries(); end

  def self.max_retries=(max_retries); end

  def self.redirect_limit(); end

  def self.redirect_limit=(redirect_limit); end
end

module Bundler::FileUtils
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::FileUtils::Entry_
  def link(dest); end
end

module Bundler::FileUtils
  def self.cp_lr(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

  def self.link_entry(src, dest, dereference_root=T.unsafe(nil), remove_destination=T.unsafe(nil)); end

  def self.ln_sr(src, dest, target_directory: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end
end

module Bundler::ForcePlatform
  def default_force_ruby_platform(); end
end

module Bundler::ForcePlatform
end

class Bundler::GemHelper
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

class Bundler::GemHelpers::PlatformMatch
  def self.specificity_score(spec_platform, user_platform); end
end

module Bundler::GemHelpers
  def self.generic_local_platform_is_ruby?(); end

  def self.local_platform(); end

  def self.same_deps(spec, exemplary_spec); end

  def self.same_specificity(platform, spec, exemplary_spec); end

  def self.select_all_platform_match(specs, platform, force_ruby: T.unsafe(nil), prefer_locked: T.unsafe(nil)); end

  def self.select_best_local_platform_match(specs, force_ruby: T.unsafe(nil)); end

  def self.sort_and_filter_best_platform_match(matching, platform); end

  def self.sort_best_platform_match(matching, platform); end
end

class Bundler::GemInstaller
  def force(); end

  def initialize(spec, installer, standalone=T.unsafe(nil), worker=T.unsafe(nil), force=T.unsafe(nil), local=T.unsafe(nil)); end

  def install_from_spec(); end

  def installer(); end

  def local(); end

  def spec(); end

  def standalone(); end

  def worker(); end
end

class Bundler::GemInstaller
end

class Bundler::GemVersionPromoter
  def filter_versions(package, specs); end

  def level(); end

  def level=(value); end

  def major?(); end

  def minor?(); end

  def pre(); end

  def pre=(pre); end

  def pre?(); end

  def sort_versions(package, specs); end

  def strict(); end

  def strict=(strict); end
end

class Bundler::GemVersionPromoter
end

class Bundler::Graph
  def edge_options(); end

  def groups(); end

  def initialize(env, output_file, show_version=T.unsafe(nil), show_requirements=T.unsafe(nil), output_format=T.unsafe(nil), without=T.unsafe(nil)); end

  def node_options(); end

  def output_file(); end

  def output_format(); end

  def relations(); end

  def viz(); end
  GRAPH_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Graph::GraphVizClient
  def g(); end

  def initialize(graph_instance); end

  def run(); end
end

class Bundler::Graph::GraphVizClient
end

class Bundler::Graph
end

class Bundler::IncorrectLockfileDependencies
  def initialize(spec); end

  def spec(); end

  def status_code(); end
end

class Bundler::IncorrectLockfileDependencies
end

class Bundler::Index
  include ::Enumerable
  def add(spec); end

  def duplicates(); end

  def merge!(other); end

  def subset?(other); end
end

class Bundler::Injector
  def initialize(deps, options=T.unsafe(nil)); end

  def inject(gemfile_path, lockfile_path); end

  def remove(gemfile_path, lockfile_path); end
  INJECTED_GEMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Injector
  def self.inject(new_deps, options=T.unsafe(nil)); end

  def self.remove(gems, options=T.unsafe(nil)); end
end

class Bundler::InsecureInstallPathError
  def initialize(name, path); end

  def status_code(); end
end

class Bundler::InsecureInstallPathError
end

class Bundler::Installer
  include ::ReshimInstaller
  def definition(); end
end

class Bundler::InvalidArgumentError
  def status_code(); end
end

class Bundler::InvalidArgumentError
end

class Bundler::LazySpecification
  include ::Bundler::MatchMetadata
  include ::Bundler::ForcePlatform
  def dependencies=(dependencies); end

  def eql?(other); end

  def force_ruby_platform(); end

  def force_ruby_platform!(); end

  def force_ruby_platform=(force_ruby_platform); end

  def incomplete?(); end

  def lock_name(); end

  def materialization(); end

  def materialize_for_installation(); end

  def materialize_strictly(); end

  def materialized_for_installation(); end

  def missing?(); end

  def most_specific_locked_platform(); end

  def most_specific_locked_platform=(most_specific_locked_platform); end

  def name_tuple(); end

  def required_ruby_version(); end

  def required_ruby_version=(required_ruby_version); end

  def required_rubygems_version(); end

  def required_rubygems_version=(required_rubygems_version); end

  def runtime_dependencies(); end

  def source_changed?(); end
end

class Bundler::LazySpecification
  def self.from_spec(s); end
end

class Bundler::LockfileParser
  include ::Bundler::GemHelpers
  def checksums(); end

  def may_include_redundant_platform_specific_gems?(); end

  def most_specific_locked_platform(); end
  CHECKSUMS = ::T.let(nil, ::T.untyped)
end

class Bundler::LockfileParser::Position
  def advance!(string); end

  def column(); end

  def initialize(line, column); end

  def line(); end
end

class Bundler::LockfileParser::Position
end

class Bundler::LockfileParser
  def self.bundled_with(); end
end

module Bundler::MatchMetadata
  def matches_current_metadata?(); end

  def matches_current_ruby?(); end

  def matches_current_rubygems?(); end
end

module Bundler::MatchMetadata
end

module Bundler::MatchRemoteMetadata
  include ::Bundler::MatchMetadata
  include ::Bundler::FetchMetadata
end

module Bundler::MatchRemoteMetadata
end

class Bundler::Materialization
  def complete?(); end

  def completely_missing_specs(); end

  def dependencies(); end

  def incomplete_specs(); end

  def initialize(dep, platform, candidates:); end

  def materialized_spec(); end

  def partially_missing_specs(); end

  def specs(); end
end

class Bundler::Materialization
end

class Bundler::ParallelInstaller
  def call(); end

  def initialize(installer, all_specs, size, standalone, force, local: T.unsafe(nil), skip: T.unsafe(nil)); end

  def size(); end
end

class Bundler::ParallelInstaller::SpecInstallation
  def all_dependencies(); end

  def dependencies(); end

  def dependencies_installed?(installed_specs); end

  def enqueued?(); end

  def error(); end

  def error=(error); end

  def failed?(); end

  def full_name(); end

  def full_name=(full_name); end

  def has_post_install_message?(); end

  def ignorable_dependency?(dep); end

  def initialize(spec); end

  def installed?(); end

  def name(); end

  def name=(name); end

  def post_install_message(); end

  def post_install_message=(post_install_message); end

  def ready_to_enqueue?(); end

  def spec(); end

  def spec=(spec); end

  def state(); end

  def state=(state); end
end

class Bundler::ParallelInstaller::SpecInstallation
end

class Bundler::ParallelInstaller
  def self.call(*args, **kwargs); end
end

class Bundler::PermissionError
  def parent_folder(); end

  def permission_type(); end
end

module Bundler::Plugin::API::Source
  def ==(other); end

  def add_dependency_names(names); end

  def app_cache_dirname(); end

  def app_cache_path(custom_path=T.unsafe(nil)); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def can_lock?(spec); end

  def checksum_store(); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def double_check_for(*arg); end

  def eql?(other); end

  def fetch_gemspec_files(); end

  def gem_install_dir(); end

  def hash(); end

  def identifier(); end

  def include?(other); end

  def initialize(opts); end

  def install(spec, opts); end

  def install_path(); end

  def installed?(); end

  def local!(); end

  def name(); end

  def options(); end

  def options_to_lock(); end

  def post_install(spec, disable_exts=T.unsafe(nil)); end

  def remote!(); end

  def root(); end

  def spec_names(); end

  def specs(); end

  def to_lock(); end

  def to_s(); end

  def unlock!(); end

  def unmet_deps(); end

  def uri(); end

  def uri_hash(); end
end

module Bundler::Plugin::API::Source
end

module Bundler::Plugin::Events
  GEM_AFTER_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_REQUIRE = ::T.let(nil, ::T.untyped)
  GEM_AFTER_REQUIRE_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_REQUIRE = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_REQUIRE_ALL = ::T.let(nil, ::T.untyped)
end

class Bundler::Plugin::Index
  def installed_in_plugin_root?(name); end

  def installed_plugins(); end

  def plugin_commands(plugin); end

  def unregister_plugin(name); end
end

class Bundler::Plugin::Index::CommandConflict
  def initialize(plugin, commands); end
end

class Bundler::Plugin::Index::CommandConflict
end

class Bundler::Plugin::Index::SourceConflict
  def initialize(plugin, sources); end
end

class Bundler::Plugin::Index::SourceConflict
end

class Bundler::Plugin::Installer
  def install(names, options); end

  def install_definition(definition); end
end

class Bundler::Plugin::Installer::Git
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Git
end

class Bundler::Plugin::Installer::Path
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Path
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer
end

class Bundler::Plugin::PluginInstallError
end

class Bundler::Plugin::PluginInstallError
end

class Bundler::Plugin::SourceList
end

class Bundler::Plugin::SourceList
end

module Bundler::Plugin
  def self.from_lock(locked_opts); end

  def self.list(); end

  def self.loaded?(plugin); end

  def self.save_plugin(name, spec, optional_plugin=T.unsafe(nil)); end

  def self.uninstall(names, options); end
end

class Bundler::ProcessLock
end

class Bundler::ProcessLock
  def self.lock(bundle_path=T.unsafe(nil), &block); end
end

class Bundler::PubGrub::Incompatibility
  def cause(); end

  def conflict?(); end

  def eql?(other); end

  def external_incompatibilities(); end

  def failure?(); end

  def initialize(terms, cause:, custom_explanation: T.unsafe(nil)); end

  def terms(); end
end

class Bundler::PubGrub::Incompatibility
end

class Bundler::RemoteSpecification
  include ::Bundler::MatchRemoteMetadata
  include ::Bundler::MatchMetadata
  include ::Bundler::FetchMetadata
  def insecurely_materialized?(); end

  def locked_platform(); end

  def locked_platform=(locked_platform); end

  def runtime_dependencies(); end
end

class Bundler::Resolver
  include ::Bundler::GemHelpers
  def all_versions_for(package); end

  def bundler_pinned_to_current_version?(); end

  def default_bundler_source(); end

  def find_names_to_relax(incompatibility); end

  def incompatibilities_for(package, version); end

  def no_versions_incompatibility_for(package, unsatisfied_term); end

  def parse_dependency(package, dependency); end

  def raise_not_found!(package); end

  def setup_solver(); end

  def solve_versions(root:, logger:); end

  def source_for(name); end

  def versions_for(package, range=T.unsafe(nil)); end
end

class Bundler::Resolver::Base
  def [](name); end

  def base_requirements(); end

  def delete(specs); end

  def get_package(name); end

  def include_prereleases(names); end

  def include_remote_specs(names); end

  def initialize(source_requirements, dependencies, base, platforms, options); end

  def packages(); end

  def requirements(); end

  def source_requirements(); end

  def unlock_names(names); end
end

class Bundler::Resolver::Base
end

class Bundler::Resolver::Candidate
  include ::Comparable
  def ==(other); end

  def dependencies(); end

  def eql?(other); end

  def initialize(version, group: T.unsafe(nil), priority: T.unsafe(nil)); end

  def prerelease?(); end

  def segments(); end

  def sort_obj(); end

  def to_specs(package, most_specific_locked_platform); end

  def version(); end
end

class Bundler::Resolver::Candidate
end

class Bundler::Resolver::Incompatibility
  def extended_explanation(); end

  def initialize(terms, cause:, custom_explanation: T.unsafe(nil), extended_explanation: T.unsafe(nil)); end
end

class Bundler::Resolver::Incompatibility
end

class Bundler::Resolver::Package
  def ==(other); end

  def consider_prereleases!(); end

  def consider_remote_versions!(); end

  def current_platform?(); end

  def dependency(); end

  def force_ruby_platform?(); end

  def ignores_prereleases?(); end

  def initialize(name, platforms, locked_specs:, unlock:, prerelease: T.unsafe(nil), prefer_local: T.unsafe(nil), dependency: T.unsafe(nil)); end

  def locked_version(); end

  def meta?(); end

  def name(); end

  def platform_specs(specs); end

  def platforms(); end

  def prefer_local?(); end

  def prerelease_specified?(); end

  def root?(); end

  def top_level?(); end

  def unlock?(); end
end

class Bundler::Resolver::Package
end

class Bundler::Resolver::Root
  def initialize(name); end
end

class Bundler::Resolver::Root
end

class Bundler::Resolver::SpecGroup
  def dependencies(); end

  def empty?(); end

  def merge(other); end

  def sorted_spec_names(); end

  def specs(); end
end

class Bundler::Retry
  def attempt(&block); end

  def attempts(&block); end

  def current_run(); end

  def current_run=(current_run); end

  def initialize(name, exceptions=T.unsafe(nil), retries=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def total_runs(); end

  def total_runs=(total_runs); end
end

class Bundler::Retry
  def self.attempts(); end

  def self.default_attempts(); end

  def self.default_retries(); end
end

module Bundler::RubyDsl
  def normalize_ruby_file(filename); end
end

class Bundler::RubygemsIntegration
  def add_default_gems_to(specs); end

  def all_specs(); end

  def default_specs(); end

  def default_stubs(); end

  def find_bundler(version); end

  def find_name(name); end

  def installed_specs(); end

  def load_env_plugins(); end

  def plain_specs(); end

  def plain_specs=(specs); end

  def set_target_rbconfig(path); end

  def stub_rubygems(specs); end
end

module Bundler::SafeMarshal
  ALLOWED_CLASSES = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  PROC = ::T.let(nil, ::T.untyped)
end

module Bundler::SafeMarshal
end

class Bundler::SelfManager
  def install_locked_bundler_and_restart_with_it_if_needed(); end

  def restart_with_locked_bundler_if_needed(); end

  def update_bundler_and_restart_with_it_if_needed(target); end
end

class Bundler::SelfManager
end

class Bundler::Settings
  def processor_count(); end
  FALLBACK_TIMEOUT_URI_OPTION = ::T.let(nil, ::T.untyped)
  REMEMBERED_KEYS = ::T.let(nil, ::T.untyped)
  STRING_KEYS = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
  def ==(other); end

  def fallback_timeout(); end

  def fallback_timeout=(timeout); end

  def initialize(uri=T.unsafe(nil), fallback_timeout=T.unsafe(nil)); end

  def uri(); end

  def uri=(uri); end

  def valid?(); end

  def validate!(probe=T.unsafe(nil)); end
  DEFAULT_FALLBACK_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
end

class Bundler::Settings::Mirrors
  def each(&blk); end

  def for(uri); end

  def initialize(prober=T.unsafe(nil)); end

  def parse(key, value); end
end

class Bundler::Settings::Mirrors
end

class Bundler::Settings::Path
  def self.keyword_init?(); end
end

class Bundler::Settings::Validator
end

class Bundler::Settings::Validator::Rule
  def description(); end

  def fail!(key, value, *reasons); end

  def initialize(keys, description, &validate); end

  def k(key); end

  def set(settings, key, value, *reasons); end

  def validate!(key, value, settings); end
end

class Bundler::Settings::Validator::Rule
end

class Bundler::Settings::Validator
  def self.validate!(key, value, settings); end
end

class Bundler::Settings
  def self.key_for(key); end

  def self.key_to_s(key); end
end

module Bundler::SharedHelpers
  def bundle_bin_path(); end

  def checksum_for_file(path, digest); end

  def gemspec_path(); end

  def relative_gemfile_path(); end

  def relative_lockfile_path(); end

  def relative_path_to(destination, from: T.unsafe(nil)); end
end

class Bundler::SolveFailure
  def status_code(); end
end

class Bundler::SolveFailure
end

class Bundler::Source
  def add_dependency_names(names); end

  def cached!(); end

  def checksum_store(); end

  def identifier(); end

  def local!(); end

  def local_only!(); end

  def remote!(); end

  def spec_names(); end
end

class Bundler::Source::Git
  def current_branch(); end

  def glob(); end

  def local?(); end

  def migrate_cache(custom_path=T.unsafe(nil), local: T.unsafe(nil)); end

  def uri_with_specifiers(specifiers); end
end

class Bundler::Source::Path
  def to_gemfile(); end
end

class Bundler::Source::Rubygems
  def default_cache_path_for(dir); end

  def default_specs(); end

  def dependency_api_available?(); end

  def fetch_gem_if_possible(spec, previous_spec=T.unsafe(nil)); end

  def multiple_remotes?(); end

  def no_remotes?(); end

  def package_path(cache_path, spec); end

  def remote_fetchers(); end

  def remote_names(); end

  def remotes=(remotes); end

  def to_gemfile(); end
end

class Bundler::Source::RubygemsAggregate
  def identifier(); end

  def initialize(sources, source_map); end

  def source_map(); end

  def sources(); end

  def specs(); end
end

class Bundler::Source::RubygemsAggregate
end

class Bundler::SourceList
  def add_global_rubygems_remote(uri); end

  def aggregate_global_source?(); end

  def expired_sources?(replacement_sources); end

  def global_path_source(); end

  def implicit_global_source?(); end

  def local!(); end

  def local_mode?(); end

  def local_only!(); end

  def lock_other_sources(); end

  def lock_rubygems_sources(); end

  def merged_gem_lockfile_sections!(replacement_source); end

  def merged_gem_lockfile_sections?(); end

  def non_default_explicit_sources(); end

  def non_global_rubygems_sources(); end
end

class Bundler::SourceMap
  def all_requirements(); end

  def dependencies(); end

  def direct_requirements(); end

  def initialize(sources, dependencies, locked_specs); end

  def locked_requirements(); end

  def locked_specs(); end

  def pinned_spec_names(skip=T.unsafe(nil)); end

  def sources(); end
end

class Bundler::SourceMap
end

class Bundler::SpecSet
  include ::Enumerable
  include ::Bundler::TSort
  def -(other); end

  def add_extra_platforms!(platforms); end

  def delete(specs); end

  def delete_by_name(name); end

  def incomplete_for_platform?(deps, platform); end

  def incomplete_specs(); end

  def insecurely_materialized_specs(); end

  def missing_specs(); end

  def missing_specs_for(dependencies); end

  def names(); end

  def normalize_platforms!(deps, platforms); end

  def partially_missing_specs(); end

  def valid?(s); end

  def validate_deps(s); end
end

class Bundler::Standalone
  def generate(); end

  def initialize(groups, definition); end
end

class Bundler::Standalone
end

class Bundler::StubSpecification
  def activated?(); end

  def base_dir=(path); end

  def checksum(); end

  def extensions(); end

  def full_gem_path=(path); end

  def gem_build_complete_path(); end

  def ignored?(); end

  def manually_installed?(); end

  def require_paths(); end
end

module Bundler::TSort
  def each_strongly_connected_component(&block); end

  def each_strongly_connected_component_from(node, id_map=T.unsafe(nil), stack=T.unsafe(nil), &block); end

  def strongly_connected_components(); end

  def tsort(); end

  def tsort_each(&block); end

  def tsort_each_child(node); end

  def tsort_each_node(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::TSort::Cyclic
end

class Bundler::TSort::Cyclic
end

module Bundler::TSort
  def self.each_strongly_connected_component(each_node, each_child); end

  def self.each_strongly_connected_component_from(node, each_child, id_map=T.unsafe(nil), stack=T.unsafe(nil)); end

  def self.strongly_connected_components(each_node, each_child); end

  def self.tsort(each_node, each_child); end

  def self.tsort_each(each_node, each_child); end
end

class Bundler::Thor
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def help(command=T.unsafe(nil), subcommand=T.unsafe(nil)); end
  Correctable = ::T.let(nil, ::T.untyped)
  HELP_MAPPINGS = ::T.let(nil, ::T.untyped)
  TEMPLATE_EXTNAME = ::T.let(nil, ::T.untyped)
  THOR_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module Bundler::Thor::Actions
  def _cleanup_options_and_set(options, key); end

  def _shared_configuration(); end

  def action(instance); end

  def add_file(destination, *args, &block); end

  def add_link(destination, *args); end

  def append_file(path, *args, &block); end

  def append_to_file(path, *args, &block); end

  def apply(path, config=T.unsafe(nil)); end

  def behavior(); end

  def behavior=(behavior); end

  def chmod(path, mode, config=T.unsafe(nil)); end

  def comment_lines(path, flag, *args); end

  def copy_file(source, *args, &block); end

  def create_file(destination, *args, &block); end

  def create_link(destination, *args); end

  def destination_root(); end

  def destination_root=(root); end

  def directory(source, *args, &block); end

  def empty_directory(destination, config=T.unsafe(nil)); end

  def find_in_source_paths(file); end

  def get(source, *args, &block); end

  def gsub_file(path, flag, *args, &block); end

  def in_root(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def inject_into_class(path, klass, *args, &block); end

  def inject_into_file(destination, *args, &block); end

  def inject_into_module(path, module_name, *args, &block); end

  def insert_into_file(destination, *args, &block); end

  def inside(dir=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def link_file(source, *args); end

  def prepend_file(path, *args, &block); end

  def prepend_to_file(path, *args, &block); end

  def relative_to_original_destination_root(path, remove_dot=T.unsafe(nil)); end

  def remove_dir(path, config=T.unsafe(nil)); end

  def remove_file(path, config=T.unsafe(nil)); end

  def run(command, config=T.unsafe(nil)); end

  def run_ruby_script(command, config=T.unsafe(nil)); end

  def source_paths(); end

  def template(source, *args, &block); end

  def thor(command, *args); end

  def uncomment_lines(path, flag, *args); end
  WARNINGS = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Actions::CapturableERB
end

class Bundler::Thor::Actions::CapturableERB
end

module Bundler::Thor::Actions::ClassMethods
  def add_runtime_options!(); end

  def source_paths(); end

  def source_paths_for_search(); end

  def source_root(path=T.unsafe(nil)); end
end

module Bundler::Thor::Actions::ClassMethods
end

class Bundler::Thor::Actions::CreateFile
  def data(); end

  def force_on_collision?(); end

  def force_or_skip_or_conflict(force, skip, &block); end

  def identical?(); end

  def initialize(base, destination, data, config=T.unsafe(nil)); end

  def on_conflict_behavior(&block); end

  def render(); end
end

class Bundler::Thor::Actions::CreateFile
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::Directory
  def execute!(); end

  def file_level_lookup(previous_lookup); end

  def files(lookup); end

  def initialize(base, source, destination=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def source(); end
end

class Bundler::Thor::Actions::Directory
end

class Bundler::Thor::Actions::EmptyDirectory
  def base(); end

  def config(); end

  def convert_encoded_instructions(filename); end

  def destination(); end

  def destination=(destination); end

  def exists?(); end

  def given_destination(); end

  def initialize(base, destination, config=T.unsafe(nil)); end

  def invoke!(); end

  def invoke_with_conflict_check(&block); end

  def on_conflict_behavior(); end

  def on_file_clash_behavior(); end

  def pretend?(); end

  def relative_destination(); end

  def revoke!(); end

  def say_status(status, color); end
end

class Bundler::Thor::Actions::EmptyDirectory
end

class Bundler::Thor::Actions::InjectIntoFile
  def behavior(); end

  def content(); end

  def flag(); end

  def initialize(base, destination, data, config); end

  def replace!(regexp, string, force); end

  def replacement(); end

  def replacement_present?(); end

  def say_status(behavior, warning: T.unsafe(nil), color: T.unsafe(nil)); end
end

class Bundler::Thor::Actions::InjectIntoFile
end

module Bundler::Thor::Actions
  def self.included(base); end
end

class Bundler::Thor::AmbiguousCommandError
end

class Bundler::Thor::AmbiguousCommandError
end

Bundler::Thor::AmbiguousTaskError = Bundler::Thor::AmbiguousCommandError

class Bundler::Thor::Argument
  def banner(); end

  def default(); end

  def default_banner(); end

  def description(); end

  def enum(); end

  def enum_to_s(); end

  def human_name(); end

  def initialize(name, options=T.unsafe(nil)); end

  def name(); end

  def print_default(); end

  def required(); end

  def required?(); end

  def show_default?(); end

  def type(); end

  def usage(); end

  def valid_type?(type); end

  def validate!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Argument
end

class Bundler::Thor::Arguments
  def initialize(arguments=T.unsafe(nil)); end

  def parse(args); end

  def remaining(); end
  NUMERIC = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Arguments
  def self.parse(*args); end

  def self.split(args); end
end

class Bundler::Thor::AtLeastOneRequiredArgumentError
end

class Bundler::Thor::AtLeastOneRequiredArgumentError
end

module Bundler::Thor::Base
  def args(); end

  def args=(args); end

  def initialize(args=T.unsafe(nil), local_options=T.unsafe(nil), config=T.unsafe(nil)); end

  def options(); end

  def options=(options); end

  def parent_options(); end

  def parent_options=(parent_options); end
end

module Bundler::Thor::Base
  def self.included(base); end

  def self.register_klass_file(klass); end

  def self.shell(); end

  def self.shell=(shell); end

  def self.subclass_files(); end

  def self.subclasses(); end
end

class Bundler::Thor::Command
  def formatted_usage(klass, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def handle_argument_error?(instance, error, caller); end

  def handle_no_method_error?(instance, error, caller); end

  def hidden?(); end

  def initialize(name, description, long_description, wrap_long_description, usage, options=T.unsafe(nil), options_relation=T.unsafe(nil)); end

  def local_method?(instance, name); end

  def method_at_least_one_option_names(); end

  def method_exclusive_option_names(); end

  def not_debugging?(instance); end

  def private_method?(instance); end

  def public_method?(instance); end

  def required_arguments_for(klass, usage); end

  def required_options(); end

  def run(instance, args=T.unsafe(nil)); end

  def sans_backtrace(backtrace, caller); end
  FILE_REGEXP = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Command
end

module Bundler::Thor::CoreExt
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
  def [](key); end

  def []=(key, value); end

  def convert_key(key); end

  def delete(key); end

  def except(*keys); end

  def fetch(key, *args); end

  def initialize(hash=T.unsafe(nil)); end

  def key?(key); end

  def merge(other); end

  def merge!(other); end

  def method_missing(method, *args); end

  def replace(other_hash); end

  def reverse_merge(other); end

  def slice(*keys); end

  def values_at(*indices); end
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
end

module Bundler::Thor::CoreExt
end

class Bundler::Thor::DynamicCommand
  def initialize(name, options=T.unsafe(nil)); end
end

class Bundler::Thor::DynamicCommand
end

Bundler::Thor::DynamicTask = Bundler::Thor::DynamicCommand

class Bundler::Thor::Error
end

class Bundler::Thor::Error
end

class Bundler::Thor::ExclusiveArgumentError
end

class Bundler::Thor::ExclusiveArgumentError
end

class Bundler::Thor::Group
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def _invoke_for_class_method(klass, command=T.unsafe(nil), *args, &block); end
end

class Bundler::Thor::Group
  def self.banner(); end

  def self.command_exists?(command_name); end

  def self.desc(description=T.unsafe(nil)); end

  def self.get_options_from_invocations(group_options, base_options); end

  def self.handle_argument_error(command, error, _args, arity); end

  def self.help(shell); end

  def self.invocation_blocks(); end

  def self.invocations(); end

  def self.invoke(*names, &block); end

  def self.invoke_from_option(*names, &block); end

  def self.printable_commands(*arg); end

  def self.printable_tasks(*arg); end

  def self.remove_invocation(*names); end

  def self.self_command(); end

  def self.self_task(); end
end

class Bundler::Thor::HiddenCommand
end

class Bundler::Thor::HiddenCommand
end

Bundler::Thor::HiddenTask = Bundler::Thor::HiddenCommand

module Bundler::Thor::Invocation
  def _parse_initialization_options(args, opts, config); end

  def _retrieve_class_and_command(name, sent_command=T.unsafe(nil)); end

  def _retrieve_class_and_task(name, sent_command=T.unsafe(nil)); end

  def _shared_configuration(); end

  def current_command_chain(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def invoke(name=T.unsafe(nil), *args); end

  def invoke_all(); end

  def invoke_command(command, *args); end

  def invoke_task(command, *args); end

  def invoke_with_padding(*args); end
end

module Bundler::Thor::Invocation
  def self.included(base); end
end

class Bundler::Thor::InvocationError
end

class Bundler::Thor::InvocationError
end

module Bundler::Thor::LineEditor
end

class Bundler::Thor::LineEditor::Basic
  def initialize(prompt, options); end

  def options(); end

  def prompt(); end

  def readline(); end
end

class Bundler::Thor::LineEditor::Basic
  def self.available?(); end
end

class Bundler::Thor::LineEditor::Readline
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
  def initialize(text); end

  def matches(); end
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
end

class Bundler::Thor::LineEditor::Readline
end

module Bundler::Thor::LineEditor
  def self.best_available(); end

  def self.readline(prompt, options=T.unsafe(nil)); end
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::NestedContext
  def enter(); end

  def entered?(); end
end

class Bundler::Thor::NestedContext
end

class Bundler::Thor::Option
  def aliases(); end

  def aliases_for_usage(); end

  def array?(); end

  def boolean?(); end

  def dasherize(str); end

  def dasherized?(); end

  def group(); end

  def hash?(); end

  def hide(); end

  def lazy_default(); end

  def numeric?(); end

  def repeatable(); end

  def string?(); end

  def switch_name(); end

  def undasherize(str); end

  def usage(padding=T.unsafe(nil)); end

  def validate_default_type!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Option
  def self.parse(key, value); end
end

class Bundler::Thor::Options
  def assign_result!(option, result); end

  def check_at_least_one!(); end

  def check_exclusive!(); end

  def check_unknown!(); end

  def current_is_switch?(); end

  def current_is_switch_formatted?(); end

  def initialize(hash_options=T.unsafe(nil), defaults=T.unsafe(nil), stop_on_unknown=T.unsafe(nil), disable_required_check=T.unsafe(nil), relations=T.unsafe(nil)); end

  def names_to_switch_names(names=T.unsafe(nil)); end

  def normalize_switch(arg); end

  def parse_boolean(switch); end

  def parse_peek(switch, option); end

  def parsing_options?(); end

  def switch?(arg); end

  def switch_option(arg); end

  def unshift(arg, is_value: T.unsafe(nil)); end
  EQ_RE = ::T.let(nil, ::T.untyped)
  LONG_RE = ::T.let(nil, ::T.untyped)
  OPTS_END = ::T.let(nil, ::T.untyped)
  SHORT_NUM = ::T.let(nil, ::T.untyped)
  SHORT_RE = ::T.let(nil, ::T.untyped)
  SHORT_SQ_RE = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Options
  def self.to_switches(options); end
end

module Bundler::Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module Bundler::Thor::RakeCompat
  def self.included(base); end

  def self.rake_classes(); end
end

class Bundler::Thor::RequiredArgumentMissingError
end

class Bundler::Thor::RequiredArgumentMissingError
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Shell
  def _shared_configuration(); end

  def ask(*args, &block); end

  def error(*args, &block); end

  def file_collision(*args, &block); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def no?(*args, &block); end

  def print_in_columns(*args, &block); end

  def print_table(*args, &block); end

  def print_wrapped(*args, &block); end

  def say(*args, &block); end

  def say_error(*args, &block); end

  def say_status(*args, &block); end

  def set_color(*args, &block); end

  def shell(); end

  def shell=(shell); end

  def terminal_width(*args, &block); end

  def with_padding(); end

  def yes?(*args, &block); end
  SHELL_DELEGATED_METHODS = ::T.let(nil, ::T.untyped)
end

module Bundler::Thor::Shell
end

Bundler::Thor::Task = Bundler::Thor::Command

class Bundler::Thor::UndefinedCommandError
  def all_commands(); end

  def command(); end

  def initialize(command, all_commands, namespace); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
end

class Bundler::Thor::UndefinedCommandError
end

Bundler::Thor::UndefinedTaskError = Bundler::Thor::UndefinedCommandError

class Bundler::Thor::UnknownArgumentError
  def initialize(switches, unknown); end

  def switches(); end

  def unknown(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
end

class Bundler::Thor::UnknownArgumentError
end

module Bundler::Thor::Util
end

module Bundler::Thor::Util
  def self.camel_case(str); end

  def self.escape_globs(path); end

  def self.escape_html(string); end

  def self.find_by_namespace(namespace); end

  def self.find_class_and_command_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.find_class_and_task_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.globs_for(path); end

  def self.load_thorfile(path, content=T.unsafe(nil), debug=T.unsafe(nil)); end

  def self.namespace_from_thor_class(constant); end

  def self.namespaces_in_content(contents, file=T.unsafe(nil)); end

  def self.ruby_command(); end

  def self.snake_case(str); end

  def self.thor_classes_in(klass); end

  def self.thor_root(); end

  def self.thor_root_glob(); end

  def self.user_home(); end
end

class Bundler::Thor
  def self.at_least_one(*args, &block); end

  def self.banner(command, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.check_unknown_options!(options=T.unsafe(nil)); end

  def self.command_exists?(command_name); end

  def self.command_help(shell, command_name); end

  def self.default_command(meth=T.unsafe(nil)); end

  def self.default_task(meth=T.unsafe(nil)); end

  def self.deprecation_warning(message); end

  def self.desc(usage, description, options=T.unsafe(nil)); end

  def self.disable_required_check(); end

  def self.disable_required_check!(*command_names); end

  def self.disable_required_check?(command); end

  def self.dispatch(meth, given_args, given_opts, config); end

  def self.dynamic_command_class(); end

  def self.exclusive(*args, &block); end

  def self.find_command_possibilities(meth); end

  def self.find_task_possibilities(meth); end

  def self.help(shell, subcommand=T.unsafe(nil)); end

  def self.long_desc(long_description, options=T.unsafe(nil)); end

  def self.map(mappings=T.unsafe(nil), **kw); end

  def self.method_at_least_one(*args, &block); end

  def self.method_at_least_one_option_names(); end

  def self.method_exclusive(*args, &block); end

  def self.method_exclusive_option_names(); end

  def self.method_option(name, options=T.unsafe(nil)); end

  def self.method_options(options=T.unsafe(nil)); end

  def self.normalize_command_name(meth); end

  def self.normalize_task_name(meth); end

  def self.option(name, options=T.unsafe(nil)); end

  def self.options(options=T.unsafe(nil)); end

  def self.package_name(name, _=T.unsafe(nil)); end

  def self.print_at_least_one_required_options(shell, command=T.unsafe(nil)); end

  def self.print_exclusive_options(shell, command=T.unsafe(nil)); end

  def self.printable_commands(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.printable_tasks(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.register(klass, subcommand_name, usage, description, options=T.unsafe(nil)); end

  def self.retrieve_command_name(args); end

  def self.retrieve_task_name(args); end

  def self.sort_commands!(list); end

  def self.stop_on_unknown_option(); end

  def self.stop_on_unknown_option!(*command_names); end

  def self.stop_on_unknown_option?(command); end

  def self.subcommand(subcommand, subcommand_class); end

  def self.subcommand_classes(); end

  def self.subcommand_help(cmd); end

  def self.subcommands(); end

  def self.subtask(subcommand, subcommand_class); end

  def self.subtask_help(cmd); end

  def self.subtasks(); end

  def self.task_help(shell, command_name); end
end

class Bundler::UI::Shell
  def add_color(string, *color); end

  def ask(msg); end

  def confirm(msg=T.unsafe(nil), newline=T.unsafe(nil)); end

  def confirm?(); end

  def debug(msg=T.unsafe(nil), newline=T.unsafe(nil)); end

  def error(msg=T.unsafe(nil), newline=T.unsafe(nil), color=T.unsafe(nil)); end

  def error?(); end

  def info(msg=T.unsafe(nil), newline=T.unsafe(nil)); end

  def info?(); end

  def initialize(options=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(level); end

  def no?(msg); end

  def output_stream(); end

  def output_stream=(symbol); end

  def progress(&blk); end

  def quiet?(); end

  def shell=(shell); end

  def silence(&blk); end

  def trace(e, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(msg=T.unsafe(nil), newline=T.unsafe(nil), color=T.unsafe(nil)); end

  def warn?(); end

  def yes?(msg); end
  LEVELS = ::T.let(nil, ::T.untyped)
  OUTPUT_STREAMS = ::T.let(nil, ::T.untyped)
end

class Bundler::UI::Shell
end

class Bundler::UI::Silent
  def confirm?(); end

  def error?(); end

  def info?(); end

  def output_stream(); end

  def output_stream=(_symbol); end

  def progress(); end

  def warn?(); end
end

module Bundler::URINormalizer
end

module Bundler::URINormalizer
  def self.normalize_suffix(uri, trailing_slash: T.unsafe(nil)); end
end

class Bundler::Worker
  def deq(); end

  def enq(obj); end

  def initialize(size, name, func); end

  def name(); end

  def stop(); end
  POISON = ::T.let(nil, ::T.untyped)
end

class Bundler::Worker::WrappedException
  def exception(); end

  def initialize(exn); end
end

class Bundler::Worker::WrappedException
end

class Bundler::Worker
end

module Bundler
  def self.auto_install(); end

  def self.auto_switch(); end

  def self.configure_gem_home_and_path(path=T.unsafe(nil)); end

  def self.create_bundle_path(); end

  def self.find_executable(path); end

  def self.gem_version(); end

  def self.load_plugins(definition=T.unsafe(nil)); end

  def self.original_exec(*args); end

  def self.preferred_gemfile_name(); end

  def self.reset_settings_and_root!(); end

  def self.safe_load_marshal(data); end

  def self.self_manager(); end

  def self.unbundle_env!(); end

  def self.unbundled_env(); end

  def self.unbundled_exec(*args); end

  def self.unbundled_system(*args); end
end

class CGI
  VERSION = ::T.let(nil, ::T.untyped)
end

class CGI::Cookie
  DOMAIN_VALUE_RE = ::T.let(nil, ::T.untyped)
  PATH_VALUE_RE = ::T.let(nil, ::T.untyped)
  TOKEN_RE = ::T.let(nil, ::T.untyped)
end

module CGI::Escape
  def escape_uri_component(arg); end

  def unescape_uri_component(*arg); end
end

module CGI::HtmlExtension
  def a(href=T.unsafe(nil)); end

  def base(href=T.unsafe(nil)); end

  def blockquote(cite=T.unsafe(nil)); end

  def caption(align=T.unsafe(nil)); end

  def checkbox(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def checkbox_group(name=T.unsafe(nil), *values); end

  def file_field(name=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def form(method=T.unsafe(nil), action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def hidden(name=T.unsafe(nil), value=T.unsafe(nil)); end

  def html(attributes=T.unsafe(nil)); end

  def image_button(src=T.unsafe(nil), name=T.unsafe(nil), alt=T.unsafe(nil)); end

  def img(src=T.unsafe(nil), alt=T.unsafe(nil), width=T.unsafe(nil), height=T.unsafe(nil)); end

  def multipart_form(action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def password_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def popup_menu(name=T.unsafe(nil), *values); end

  def radio_button(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def radio_group(name=T.unsafe(nil), *values); end

  def reset(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def scrolling_list(name=T.unsafe(nil), *values); end

  def submit(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def text_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def textarea(name=T.unsafe(nil), cols=T.unsafe(nil), rows=T.unsafe(nil)); end
end

module CGI::HtmlExtension
end

module CGI::Util
  def escape_uri_component(arg); end

  def unescape_uri_component(*arg); end
end

module Capybara
  VERSION = ::T.let(nil, ::T.untyped)
end

class Capybara::Config
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara::DSL
  def accept_alert(*arg, **arg1, &arg2); end

  def accept_confirm(*arg, **arg1, &arg2); end

  def accept_prompt(*arg, **arg1, &arg2); end

  def all(*arg, **arg1, &arg2); end

  def assert_all_of_selectors(*arg, **arg1, &arg2); end

  def assert_any_of_selectors(*arg, **arg1, &arg2); end

  def assert_current_path(*arg, **arg1, &arg2); end

  def assert_no_current_path(*arg, **arg1, &arg2); end

  def assert_no_selector(*arg, **arg1, &arg2); end

  def assert_no_text(*arg, **arg1, &arg2); end

  def assert_no_title(*arg, **arg1, &arg2); end

  def assert_none_of_selectors(*arg, **arg1, &arg2); end

  def assert_selector(*arg, **arg1, &arg2); end

  def assert_text(*arg, **arg1, &arg2); end

  def assert_title(*arg, **arg1, &arg2); end

  def attach_file(*arg, **arg1, &arg2); end

  def body(*arg, **arg1, &arg2); end

  def check(*arg, **arg1, &arg2); end

  def choose(*arg, **arg1, &arg2); end

  def click(*arg, **arg1, &arg2); end

  def click_button(*arg, **arg1, &arg2); end

  def click_link(*arg, **arg1, &arg2); end

  def click_link_or_button(*arg, **arg1, &arg2); end

  def click_on(*arg, **arg1, &arg2); end

  def current_host(*arg, **arg1, &arg2); end

  def current_path(*arg, **arg1, &arg2); end

  def current_scope(*arg, **arg1, &arg2); end

  def current_url(*arg, **arg1, &arg2); end

  def current_window(*arg, **arg1, &arg2); end

  def dismiss_confirm(*arg, **arg1, &arg2); end

  def dismiss_prompt(*arg, **arg1, &arg2); end

  def double_click(*arg, **arg1, &arg2); end

  def evaluate_async_script(*arg, **arg1, &arg2); end

  def evaluate_script(*arg, **arg1, &arg2); end

  def execute_script(*arg, **arg1, &arg2); end

  def fill_in(*arg, **arg1, &arg2); end

  def find(*arg, **arg1, &arg2); end

  def find_all(*arg, **arg1, &arg2); end

  def find_button(*arg, **arg1, &arg2); end

  def find_by_id(*arg, **arg1, &arg2); end

  def find_field(*arg, **arg1, &arg2); end

  def find_link(*arg, **arg1, &arg2); end

  def first(*arg, **arg1, &arg2); end

  def go_back(*arg, **arg1, &arg2); end

  def go_forward(*arg, **arg1, &arg2); end

  def has_button?(*arg, **arg1, &arg2); end

  def has_checked_field?(*arg, **arg1, &arg2); end

  def has_content?(*arg, **arg1, &arg2); end

  def has_css?(*arg, **arg1, &arg2); end

  def has_current_path?(*arg, **arg1, &arg2); end

  def has_element?(*arg, **arg1, &arg2); end

  def has_field?(*arg, **arg1, &arg2); end

  def has_link?(*arg, **arg1, &arg2); end

  def has_no_button?(*arg, **arg1, &arg2); end

  def has_no_checked_field?(*arg, **arg1, &arg2); end

  def has_no_content?(*arg, **arg1, &arg2); end

  def has_no_css?(*arg, **arg1, &arg2); end

  def has_no_current_path?(*arg, **arg1, &arg2); end

  def has_no_element?(*arg, **arg1, &arg2); end

  def has_no_field?(*arg, **arg1, &arg2); end

  def has_no_link?(*arg, **arg1, &arg2); end

  def has_no_select?(*arg, **arg1, &arg2); end

  def has_no_selector?(*arg, **arg1, &arg2); end

  def has_no_table?(*arg, **arg1, &arg2); end

  def has_no_text?(*arg, **arg1, &arg2); end

  def has_no_title?(*arg, **arg1, &arg2); end

  def has_no_unchecked_field?(*arg, **arg1, &arg2); end

  def has_no_xpath?(*arg, **arg1, &arg2); end

  def has_select?(*arg, **arg1, &arg2); end

  def has_selector?(*arg, **arg1, &arg2); end

  def has_table?(*arg, **arg1, &arg2); end

  def has_text?(*arg, **arg1, &arg2); end

  def has_title?(*arg, **arg1, &arg2); end

  def has_unchecked_field?(*arg, **arg1, &arg2); end

  def has_xpath?(*arg, **arg1, &arg2); end

  def html(*arg, **arg1, &arg2); end

  def open_new_window(*arg, **arg1, &arg2); end

  def page(); end

  def query(*arg, **arg1, &arg2); end

  def refresh(*arg, **arg1, &arg2); end

  def refute_selector(*arg, **arg1, &arg2); end

  def reset_session!(*arg, **arg1, &arg2); end

  def response_headers(*arg, **arg1, &arg2); end

  def right_click(*arg, **arg1, &arg2); end

  def save_and_open_page(*arg, **arg1, &arg2); end

  def save_and_open_screenshot(*arg, **arg1, &arg2); end

  def save_page(*arg, **arg1, &arg2); end

  def save_screenshot(*arg, **arg1, &arg2); end

  def scroll_by(*arg, **arg1, &arg2); end

  def scroll_to(*arg, **arg1, &arg2); end

  def select(*arg, **arg1, &arg2); end

  def send_keys(*arg, **arg1, &arg2); end

  def source(*arg, **arg1, &arg2); end

  def status_code(*arg, **arg1, &arg2); end

  def switch_to_frame(*arg, **arg1, &arg2); end

  def switch_to_window(*arg, **arg1, &arg2); end

  def text(*arg, **arg1, &arg2); end

  def title(*arg, **arg1, &arg2); end

  def uncheck(*arg, **arg1, &arg2); end

  def unselect(*arg, **arg1, &arg2); end

  def using_session(name_or_session, &block); end

  def using_wait_time(seconds, &block); end

  def visit(*arg, **arg1, &arg2); end

  def window_opened_by(*arg, **arg1, &arg2); end

  def windows(*arg, **arg1, &arg2); end

  def within(*arg, **arg1, &arg2); end

  def within_element(*arg, **arg1, &arg2); end

  def within_fieldset(*arg, **arg1, &arg2); end

  def within_frame(*arg, **arg1, &arg2); end

  def within_table(*arg, **arg1, &arg2); end

  def within_window(*arg, **arg1, &arg2); end
end

module Capybara::DSL
  def self.extended(base); end

  def self.included(base); end
end

module Capybara::Minitest
end

module Capybara::Minitest::Assertions
  def assert_all_of_selectors(*args, &optional_filter_block); end

  def assert_ancestor(*args, &optional_filter_block); end

  def assert_any_of_selectors(*args, &optional_filter_block); end

  def assert_button(*args, &optional_filter_block); end

  def assert_checked_field(*args, &optional_filter_block); end

  def assert_content(*args, **kwargs, &optional_filter_block); end

  def assert_css(*args, &optional_filter_block); end

  def assert_current_path(*args, **kwargs, &optional_filter_block); end

  def assert_element(*args, &optional_filter_block); end

  def assert_field(*args, &optional_filter_block); end

  def assert_link(*args, &optional_filter_block); end

  def assert_matches_css(*args, &optional_filter_block); end

  def assert_matches_selector(*args, &optional_filter_block); end

  def assert_matches_style(*args, &optional_filter_block); end

  def assert_matches_xpath(*args, &optional_filter_block); end

  def assert_no_ancestor(*args, &optional_filter_block); end

  def assert_no_button(*args, &optional_filter_block); end

  def assert_no_checked_field(*args, &optional_filter_block); end

  def assert_no_content(*args, **kwargs, &optional_filter_block); end

  def assert_no_css(*args, &optional_filter_block); end

  def assert_no_current_path(*args, **kwargs, &optional_filter_block); end

  def assert_no_element(*args, &optional_filter_block); end

  def assert_no_field(*args, &optional_filter_block); end

  def assert_no_link(*args, &optional_filter_block); end

  def assert_no_select(*args, &optional_filter_block); end

  def assert_no_selector(*args, &optional_filter_block); end

  def assert_no_sibling(*args, &optional_filter_block); end

  def assert_no_table(*args, &optional_filter_block); end

  def assert_no_text(*args, **kwargs, &optional_filter_block); end

  def assert_no_title(*args, **kwargs, &optional_filter_block); end

  def assert_no_unchecked_field(*args, &optional_filter_block); end

  def assert_no_xpath(*args, &optional_filter_block); end

  def assert_none_of_selectors(*args, &optional_filter_block); end

  def assert_not_matches_css(*args, &optional_filter_block); end

  def assert_not_matches_selector(*args, &optional_filter_block); end

  def assert_not_matches_xpath(*args, &optional_filter_block); end

  def assert_select(*args, &optional_filter_block); end

  def assert_selector(*args, &optional_filter_block); end

  def assert_sibling(*args, &optional_filter_block); end

  def assert_table(*args, &optional_filter_block); end

  def assert_text(*args, **kwargs, &optional_filter_block); end

  def assert_title(*args, **kwargs, &optional_filter_block); end

  def assert_unchecked_field(*args, &optional_filter_block); end

  def assert_xpath(*args, &optional_filter_block); end

  def refute_ancestor(*args, &optional_filter_block); end

  def refute_button(*args, &optional_filter_block); end

  def refute_checked_field(*args, &optional_filter_block); end

  def refute_content(*args, **kwargs, &optional_filter_block); end

  def refute_css(*args, &optional_filter_block); end

  def refute_current_path(*args, **kwargs, &optional_filter_block); end

  def refute_element(*args, &optional_filter_block); end

  def refute_field(*args, &optional_filter_block); end

  def refute_link(*args, &optional_filter_block); end

  def refute_matches_css(*args, &optional_filter_block); end

  def refute_matches_selector(*args, &optional_filter_block); end

  def refute_matches_xpath(*args, &optional_filter_block); end

  def refute_select(*args, &optional_filter_block); end

  def refute_selector(*args, &optional_filter_block); end

  def refute_sibling(*args, &optional_filter_block); end

  def refute_table(*args, &optional_filter_block); end

  def refute_text(*args, **kwargs, &optional_filter_block); end

  def refute_title(*args, **kwargs, &optional_filter_block); end

  def refute_unchecked_field(*args, &optional_filter_block); end

  def refute_xpath(*args, &optional_filter_block); end
end

module Capybara::Minitest::Assertions
end

module Capybara::Minitest
end

module Capybara::Node::Actions
  CAPTURE_FILE_ELEMENT_SCRIPT = ::T.let(nil, ::T.untyped)
  DATALIST_OPTIONS_SCRIPT = ::T.let(nil, ::T.untyped)
  RESET_STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
  UPDATE_STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
end

class Capybara::Node::Element
  STYLE_SCRIPT = ::T.let(nil, ::T.untyped)
end

class Capybara::Node::Simple
  VISIBILITY_XPATH = ::T.let(nil, ::T.untyped)
end

module Capybara::Node::WhitespaceNormalizer
  BREAKING_SPACES = ::T.let(nil, ::T.untyped)
  EMPTY_LINES = ::T.let(nil, ::T.untyped)
  LEADING_SPACES = ::T.let(nil, ::T.untyped)
  LEFT_TO_RIGHT_MARK = ::T.let(nil, ::T.untyped)
  LINE_SEPERATOR = ::T.let(nil, ::T.untyped)
  NON_BREAKING_SPACE = ::T.let(nil, ::T.untyped)
  PARAGRAPH_SEPERATOR = ::T.let(nil, ::T.untyped)
  REMOVED_CHARACTERS = ::T.let(nil, ::T.untyped)
  RIGHT_TO_LEFT_MARK = ::T.let(nil, ::T.untyped)
  SQUEEZED_SPACES = ::T.let(nil, ::T.untyped)
  TRAILING_SPACES = ::T.let(nil, ::T.untyped)
  ZERO_WIDTH_SPACE = ::T.let(nil, ::T.untyped)
end

class Capybara::Queries::BaseQuery
  COUNT_KEYS = ::T.let(nil, ::T.untyped)
end

class Capybara::Queries::SelectorQuery
  SPATIAL_KEYS = ::T.let(nil, ::T.untyped)
  VALID_KEYS = ::T.let(nil, ::T.untyped)
  VALID_MATCH = ::T.let(nil, ::T.untyped)
end

class Capybara::RackTest::CSSHandlers
  include ::DEBUGGER__::TrapInterceptor
end

class Capybara::RackTest::Driver
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Capybara::RackTest::Node
  BLOCK_ELEMENTS = ::T.let(nil, ::T.untyped)
  DISABLED_BY_FIELDSET_XPATH = ::T.let(nil, ::T.untyped)
  OPTION_OWNER_XPATH = ::T.let(nil, ::T.untyped)
end

class Capybara::ReadOnlySessionConfig
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Capybara::Selector
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Capybara::Selector::CSS
  ESCAPE = ::T.let(nil, ::T.untyped)
  H = ::T.let(nil, ::T.untyped)
  NMSTART = ::T.let(nil, ::T.untyped)
  NONASCII = ::T.let(nil, ::T.untyped)
  S = ::T.let(nil, ::T.untyped)
  UNICODE = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::ChromeLogs
  COMMANDS = ::T.let(nil, ::T.untyped)
  LOG_MSG = ::T.let(nil, ::T.untyped)
end

class Capybara::Selenium::Driver
  CAPS_VERSION = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  SPECIAL_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Capybara::Selenium::Node
  GET_XPATH_SCRIPT = ::T.let(nil, ::T.untyped)
  OBSCURED_OR_OFFSET_SCRIPT = ::T.let(nil, ::T.untyped)
  RAPID_APPEND_TEXT = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::Node::Html5Drag
  ATTACH_FILE = ::T.let(nil, ::T.untyped)
  DROP_FILE = ::T.let(nil, ::T.untyped)
  DROP_STRING = ::T.let(nil, ::T.untyped)
  HTML5_DRAG_DROP_SCRIPT = ::T.let(nil, ::T.untyped)
  LEGACY_DRAG_CHECK = ::T.let(nil, ::T.untyped)
  MOUSEDOWN_TRACKER = ::T.let(nil, ::T.untyped)
end

class Capybara::Selenium::SafariNode
  MODIFIER_KEYS = ::T.let(nil, ::T.untyped)
end

module Capybara::Selenium::Scroll
  SCROLL_POSITIONS = ::T.let(nil, ::T.untyped)
end

class Capybara::Server::AnimationDisabler
  DISABLE_CSS_MARKUP_TEMPLATE = ::T.let(nil, ::T.untyped)
  DISABLE_JS_MARKUP_TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Capybara::Server::Checker
  TRY_HTTPS_ERRORS = ::T.let(nil, ::T.untyped)
end

class Capybara::Session
  DOCUMENT_METHODS = ::T.let(nil, ::T.untyped)
  DSL_METHODS = ::T.let(nil, ::T.untyped)
  MODAL_METHODS = ::T.let(nil, ::T.untyped)
  NODE_METHODS = ::T.let(nil, ::T.untyped)
  SESSION_METHODS = ::T.let(nil, ::T.untyped)
end

class Capybara::SessionConfig
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module Capybara
  extend ::Capybara::DSL
end

class Class
  include ::ActiveSupport::DescendantsTracker::ReloadedClassesFiltering
  def json_creatable?(); end
end

module Concurrent
  NULL = ::T.let(nil, ::T.untyped)
  NULL_LOGGER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Concurrent::AbstractExecutorService
  FALLBACK_POLICIES = ::T.let(nil, ::T.untyped)
end

Concurrent::Collection::MapImplementation = Concurrent::Collection::MriMapBackend

module Concurrent::Concern::Logging
  DEBUG = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  FATAL = ::T.let(nil, ::T.untyped)
  INFO = ::T.let(nil, ::T.untyped)
  SEV_LABEL = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  WARN = ::T.let(nil, ::T.untyped)
end

class Concurrent::ConcurrentUpdateError
  CONC_UP_ERR_BACKTRACE = ::T.let(nil, ::T.untyped)
end

class Concurrent::FiberLocalVar
  LOCALS = ::T.let(nil, ::T.untyped)
end

class Concurrent::LockFreeStack
  EMPTY = ::T.let(nil, ::T.untyped)
end

Concurrent::LockLocalVar = Concurrent::FiberLocalVar

class Concurrent::MVar
  EMPTY = ::T.let(nil, ::T.untyped)
  TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::Maybe
  NONE = ::T.let(nil, ::T.untyped)
end

module Concurrent::Promises::InternalStates
  PENDING = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  RESOLVED = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
end

class Concurrent::ReentrantReadWriteLock
  MAX_READERS = ::T.let(nil, ::T.untyped)
  MAX_WRITERS = ::T.let(nil, ::T.untyped)
  READER_BITS = ::T.let(nil, ::T.untyped)
  READ_LOCK_MASK = ::T.let(nil, ::T.untyped)
  RUNNING_WRITER = ::T.let(nil, ::T.untyped)
  WAITING_WRITER = ::T.let(nil, ::T.untyped)
  WRITER_BITS = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_HELD = ::T.let(nil, ::T.untyped)
  WRITE_LOCK_MASK = ::T.let(nil, ::T.untyped)
end

class Concurrent::RubyThreadPoolExecutor
  DEFAULT_MAX_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_QUEUE_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_MIN_POOL_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_SYNCHRONOUS = ::T.let(nil, ::T.untyped)
  DEFAULT_THREAD_IDLETIMEOUT = ::T.let(nil, ::T.untyped)
end

class Concurrent::SerializedExecutionDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Concurrent::SynchronizedDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Concurrent::ThreadLocalVar
  LOCALS = ::T.let(nil, ::T.untyped)
end

module Concurrent::ThreadSafe::Util
  CPU_COUNT = ::T.let(nil, ::T.untyped)
  FIXNUM_BIT_SIZE = ::T.let(nil, ::T.untyped)
  MAX_INT = ::T.let(nil, ::T.untyped)
end

class Concurrent::TimerTask
  DEFAULT_INTERVAL_TYPE = ::T.let(nil, ::T.untyped)
  EXECUTION_INTERVAL = ::T.let(nil, ::T.untyped)
  FIXED_DELAY = ::T.let(nil, ::T.untyped)
  FIXED_RATE = ::T.let(nil, ::T.untyped)
end

class Concurrent::Transaction
  ABORTED = ::T.let(nil, ::T.untyped)
end

module Concurrent::Utility::NativeInteger
  MAX_VALUE = ::T.let(nil, ::T.untyped)
  MIN_VALUE = ::T.let(nil, ::T.untyped)
end

class ConnectionPool
  DEFAULTS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class ConnectionPool::Wrapper
  METHODS = ::T.let(nil, ::T.untyped)
end

class Crass::Parser
  BLOCK_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Crass::Tokenizer
  RE_COMMENT_CLOSE = ::T.let(nil, ::T.untyped)
  RE_DIGIT = ::T.let(nil, ::T.untyped)
  RE_ESCAPE = ::T.let(nil, ::T.untyped)
  RE_HEX = ::T.let(nil, ::T.untyped)
  RE_NAME = ::T.let(nil, ::T.untyped)
  RE_NAME_START = ::T.let(nil, ::T.untyped)
  RE_NON_PRINTABLE = ::T.let(nil, ::T.untyped)
  RE_NUMBER_DECIMAL = ::T.let(nil, ::T.untyped)
  RE_NUMBER_EXPONENT = ::T.let(nil, ::T.untyped)
  RE_NUMBER_SIGN = ::T.let(nil, ::T.untyped)
  RE_NUMBER_STR = ::T.let(nil, ::T.untyped)
  RE_QUOTED_URL_START = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_END = ::T.let(nil, ::T.untyped)
  RE_UNICODE_RANGE_START = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE = ::T.let(nil, ::T.untyped)
  RE_WHITESPACE_ANCHORED = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__
  CONFIG = ::T.let(nil, ::T.untyped)
  CONFIG_MAP = ::T.let(nil, ::T.untyped)
  CONFIG_SET = ::T.let(nil, ::T.untyped)
  LOG_LEVELS = ::T.let(nil, ::T.untyped)
  M_CLASS = ::T.let(nil, ::T.untyped)
  M_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
  M_INSTANCE_VARIABLE_GET = ::T.let(nil, ::T.untyped)
  M_KIND_OF_P = ::T.let(nil, ::T.untyped)
  M_METHOD = ::T.let(nil, ::T.untyped)
  M_NAME = ::T.let(nil, ::T.untyped)
  M_OBJECT_ID = ::T.let(nil, ::T.untyped)
  M_RESPOND_TO_P = ::T.let(nil, ::T.untyped)
  M_SINGLETON_CLASS = ::T.let(nil, ::T.untyped)
  SESSION = ::T.let(nil, ::T.untyped)
  SHORT_INSPECT_LENGTH = ::T.let(nil, ::T.untyped)
  SO_VERSION = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::Color
  SUPPORT_COLORABLE_OPTION = ::T.let(nil, ::T.untyped)
end

class DEBUGGER__::Console
  def deactivate(); end

  def history(); end

  def history_file(); end

  def load_history(); end

  def load_history_if_not_loaded(); end

  def parse_input(buff, commands); end

  def read_history_file(); end

  def readline(prompt); end

  def readline_setup(prompt); end
  FH = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::ForkInterceptor
  def _fork(); end
end

module DEBUGGER__::ForkInterceptor::DaemonInterceptor
  def daemon(*args); end
end

class DEBUGGER__::FrameInfo
  BLOCK_LABL_REGEXP = ::T.let(nil, ::T.untyped)
  HOME = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::GlobalVariablesHelper
  SKIP_GLOBAL_LIST = ::T.let(nil, ::T.untyped)
end

class DEBUGGER__::LimitedPP
  def <<(other); end

  def buf(); end

  def initialize(max); end
end

class DEBUGGER__::LimitedPP
  def self.pp(obj, max=T.unsafe(nil)); end
end

module DEBUGGER__::MultiProcessGroup
  def after_fork(child: T.unsafe(nil)); end

  def info(msg); end

  def lock(); end

  def locked?(); end

  def multi_process!(); end

  def sync(&b); end

  def unlock(); end
end

class DEBUGGER__::ProcessGroup
  def after_fork(); end

  def lock(); end

  def locked?(); end

  def multi?(); end

  def multi_process!(); end

  def sync(); end

  def trylock(); end

  def unlock(); end
end

class DEBUGGER__::Session
  def activate_irb_integration(); end

  def after_fork_parent(); end

  def before_fork(need_lock=T.unsafe(nil)); end

  def capture_exception_frames(*exclude_path); end

  def check_postmortem(); end

  def check_unsafe(); end

  def enter_postmortem_session(exc); end

  def extend_feature(session: T.unsafe(nil), thread_client: T.unsafe(nil), ui: T.unsafe(nil)); end

  def intercept_trap_sigint(flag, &b); end

  def intercept_trap_sigint?(); end

  def intercept_trap_sigint_end(); end

  def intercept_trap_sigint_start(prev); end

  def postmortem=(is_enable); end

  def process_info(); end

  def save_int_trap(cmd); end

  def set_no_sigint_hook(old, new); end

  def width(); end
  BREAK_KEYWORDS = ::T.let(nil, ::T.untyped)
  METHOD_ADDED_TRACKERS = ::T.let(nil, ::T.untyped)
end

class DEBUGGER__::Session
  def self.activate_method_added_trackers(); end

  def self.create_method_added_tracker(mod, method_added_id, method_accessor=T.unsafe(nil)); end

  def self.deactivate_method_added_trackers(); end
end

class DEBUGGER__::ThreadClient
  SPECIAL_LOCAL_VARS = ::T.let(nil, ::T.untyped)
  SUPPORT_TARGET_THREAD = ::T.let(nil, ::T.untyped)
end

module DEBUGGER__::TrapInterceptor
  def trap(sig, *command, &command_proc); end
end

class DEBUGGER__::UI_Base
  def event(type, *args); end

  def flush(); end

  def ignore_output_on_suspend?(); end
end

class DEBUGGER__::UI_LocalConsole
  def activate(session, on_fork: T.unsafe(nil)); end

  def activate_sigint(); end

  def after_fork_parent(); end

  def ask(prompt); end

  def deactivate(); end

  def deactivate_sigint(); end

  def puts(str=T.unsafe(nil)); end

  def quit(n); end

  def readline(prompt=T.unsafe(nil)); end

  def remote?(); end

  def setup_interrupt(); end

  def width(); end
end

module DEBUGGER__
  def self.add_catch_breakpoint(pat); end

  def self.add_line_breakpoint(file, line, **kw); end

  def self.check_loglevel(level); end

  def self.compare_path(a, b); end

  def self.debug(&b); end

  def self.info(msg); end

  def self.initialize_session(&init_ui); end

  def self.load_rc(); end

  def self.log(level, msg); end

  def self.open(host: T.unsafe(nil), port: T.unsafe(nil), sock_path: T.unsafe(nil), sock_dir: T.unsafe(nil), nonstop: T.unsafe(nil), **kw); end

  def self.open_tcp(port:, host: T.unsafe(nil), nonstop: T.unsafe(nil), **kw); end

  def self.open_unix(sock_path: T.unsafe(nil), sock_dir: T.unsafe(nil), nonstop: T.unsafe(nil), **kw); end

  def self.require_location(); end

  def self.safe_inspect(obj, max_length: T.unsafe(nil), short: T.unsafe(nil)); end

  def self.setup_initial_suspend(); end

  def self.skip?(); end

  def self.skip_all(); end

  def self.start(nonstop: T.unsafe(nil), **kw); end

  def self.step_in(&b); end

  def self.warn(msg); end
end

module DRb
  VERSION = ::T.let(nil, ::T.untyped)
end

class DRb::DRbUNIXSocket
  Max_try = ::T.let(nil, ::T.untyped)
end

DRbIdConv = DRb::DRbIdConv

DRbObject = DRb::DRbObject

DRbUndumped = DRb::DRbUndumped

module Dalli
  MIN_SUPPORTED_MEMCACHED_VERSION = ::T.let(nil, ::T.untyped)
  NOT_FOUND = ::T.let(nil, ::T.untyped)
  QUIET = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Dalli::Client
  ALLOWED_STAT_KEYS = ::T.let(nil, ::T.untyped)
  CACHE_NILS = ::T.let(nil, ::T.untyped)
end

class Dalli::KeyManager
  DEFAULTS = ::T.let(nil, ::T.untyped)
  MAX_KEY_LENGTH = ::T.let(nil, ::T.untyped)
  NAMESPACE_SEPARATOR = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  TRUNCATED_KEY_SEPARATOR = ::T.let(nil, ::T.untyped)
  TRUNCATED_KEY_TARGET_SIZE = ::T.let(nil, ::T.untyped)
end

module Dalli::Protocol
  NOT_FOUND = ::T.let(nil, ::T.untyped)
  TIMEOUT_ERRORS = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::Base
  ALLOWED_QUIET_OPS = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::Binary
  NOT_FOUND_EXPIRY = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::Binary::RequestFormatter
  BODY_FORMATS = ::T.let(nil, ::T.untyped)
  FORMAT = ::T.let(nil, ::T.untyped)
  INCR_DECR = ::T.let(nil, ::T.untyped)
  KEY_AND_VALUE = ::T.let(nil, ::T.untyped)
  KEY_ONLY = ::T.let(nil, ::T.untyped)
  NO_BODY = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  REQUEST = ::T.let(nil, ::T.untyped)
  REQ_HEADER_FORMAT = ::T.let(nil, ::T.untyped)
  TTL_AND_KEY = ::T.let(nil, ::T.untyped)
  TTL_ONLY = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::Binary::ResponseHeader
  FMT = ::T.let(nil, ::T.untyped)
  NOT_STORED_STATUSES = ::T.let(nil, ::T.untyped)
  SIZE = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::Binary::ResponseProcessor
  RESPONSE_CODES = ::T.let(nil, ::T.untyped)
end

module Dalli::Protocol::Binary::SaslAuthentication
  PLAIN_AUTH = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::ConnectionManager
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::Meta
  TERMINATOR = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::Meta::KeyRegularizer
  WHITESPACE = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::Meta::ResponseProcessor
  EN = ::T.let(nil, ::T.untyped)
  END_TOKEN = ::T.let(nil, ::T.untyped)
  EX = ::T.let(nil, ::T.untyped)
  HD = ::T.let(nil, ::T.untyped)
  MN = ::T.let(nil, ::T.untyped)
  NF = ::T.let(nil, ::T.untyped)
  NS = ::T.let(nil, ::T.untyped)
  OK = ::T.let(nil, ::T.untyped)
  RESET = ::T.let(nil, ::T.untyped)
  STAT = ::T.let(nil, ::T.untyped)
  VA = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::ServerConfigParser
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_WEIGHT = ::T.let(nil, ::T.untyped)
  MEMCACHED_URI_PROTOCOL = ::T.let(nil, ::T.untyped)
  SERVER_CONFIG_REGEXP = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::TtlSanitizer
  MAX_ACCEPTABLE_EXPIRATION_INTERVAL = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::ValueCompressor
  DEFAULTS = ::T.let(nil, ::T.untyped)
  FLAG_COMPRESSED = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::ValueMarshaller
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
end

class Dalli::Protocol::ValueSerializer
  ARGUMENT_ERR_REGEXP = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  FLAG_SERIALIZED = ::T.let(nil, ::T.untyped)
  NAME_ERR_STR = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  TYPE_ERR_REGEXP = ::T.let(nil, ::T.untyped)
end

class Dalli::Ring
  POINTS_PER_SERVER = ::T.let(nil, ::T.untyped)
end

Dalli::Server = Dalli::Protocol::Binary

module Dalli::ServersArgNormalizer
  DEFAULT_SERVERS = ::T.let(nil, ::T.untyped)
  ENV_VAR_NAME = ::T.let(nil, ::T.untyped)
end

module Dalli::Socket::InstanceMethods
  FILTERED_OUT_OPTIONS = ::T.let(nil, ::T.untyped)
  WAIT_RCS = ::T.let(nil, ::T.untyped)
end

class Data
  def initialize(*arg); end
end

class Date
  VERSION = ::T.let(nil, ::T.untyped)
end

module Debase
  FRONT_END = ::T.let(nil, ::T.untyped)
  IDE_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Debase::AddBreakpoint
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::BreakpointsCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::CatchCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::Command
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ConditionCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ContinueCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::DeleteBreakpointCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::DetachCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::DisableCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  Subcommands = ::T.let(nil, ::T.untyped)
end

class Debase::DownCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::EnableCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  Subcommands = ::T.let(nil, ::T.untyped)
end

class Debase::EvalCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ExcludeFile
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ExpressionInfoCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::FileFilterCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::FinishCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::FrameCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::IncludeFile
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::InspectCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::InterruptCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::JumpCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::LoadCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::NextCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Debase::OverflowMessageType
  EXCEPTION_MESSAGE = ::T.let(nil, ::T.untyped)
  NIL_MESSAGE = ::T.let(nil, ::T.untyped)
  SPECIAL_SYMBOL_MESSAGE = ::T.let(nil, ::T.untyped)
end

class Debase::PPCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::PauseCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::QuitCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::RestartCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::SetTypeCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::StartCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::StepCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ThreadCurrentCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ThreadInspectCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ThreadListCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ThreadResumeCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ThreadStopCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::ThreadSwitchCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::UpCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::VarConstantCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::VarGlobalCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::VarInstanceCommand
  BINDING_COMMAND = ::T.let(nil, ::T.untyped)
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::VarLocalCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Debase::WhereCommand
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

Debugger = Debase

class Delegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class DidYouMean::ClassNameChecker
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

module DidYouMean::Correctable
  def corrections(); end

  def detailed_message(highlight: T.unsafe(nil), did_you_mean: T.unsafe(nil), **arg); end

  def original_message(); end

  def spell_checker(); end
end

class DidYouMean::Formatter
  def message_for(corrections); end
end

class DidYouMean::Formatter
  def self.message_for(corrections); end
end

module DidYouMean::Jaro
  def self.distance(str1, str2); end
end

class DidYouMean::KeyErrorChecker
  def corrections(); end

  def initialize(key_error); end
end

class DidYouMean::KeyErrorChecker
end

module DidYouMean::Levenshtein
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def names_to_exclude(); end

  def receiver(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

class DidYouMean::NullChecker
  def corrections(); end

  def initialize(*arg); end
end

class DidYouMean::PatternKeyNameChecker
  def corrections(); end

  def initialize(no_matching_pattern_key_error); end
end

class DidYouMean::PatternKeyNameChecker
end

DidYouMean::PlainFormatter = DidYouMean::Formatter

class DidYouMean::RequirePathChecker
  def corrections(); end

  def initialize(exception); end

  def path(); end
end

class DidYouMean::RequirePathChecker
  def self.requireables(); end
end

class DidYouMean::TreeSpellChecker
  def augment(); end

  def correct(input); end

  def dictionary(); end

  def dictionary_without_leaves(); end

  def dimensions(); end

  def find_leaves(path); end

  def initialize(dictionary:, separator: T.unsafe(nil), augment: T.unsafe(nil)); end

  def plausible_dimensions(input); end

  def possible_paths(states); end

  def separator(); end

  def tree_depth(); end
end

class DidYouMean::TreeSpellChecker
end

class DidYouMean::VariableNameChecker
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module DidYouMean
  def self.correct_error(error_class, spell_checker); end

  def self.formatter(); end

  def self.formatter=(formatter); end

  def self.spell_checkers(); end
end

module Digest
  VERSION = ::T.let(nil, ::T.untyped)
end

module Digest::UUID
  DNS_NAMESPACE = ::T.let(nil, ::T.untyped)
  OID_NAMESPACE = ::T.let(nil, ::T.untyped)
  URL_NAMESPACE = ::T.let(nil, ::T.untyped)
  X500_NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Dir
  def chdir(); end

  def children(); end

  def each_child(); end
end

module Dir::Tmpname
  TMPDIR_CANDIDATES = ::T.let(nil, ::T.untyped)
  UNUSABLE_CHARS = ::T.let(nil, ::T.untyped)
end

class Dir
  def self.fchdir(arg); end

  def self.for_fd(arg); end
end

module Dotenv
  VERSION = ::T.let(nil, ::T.untyped)
end

class Dotenv::Parser
  LINE = ::T.let(nil, ::T.untyped)
  QUOTED_STRING = ::T.let(nil, ::T.untyped)
end

class Dotenv::Rails
  TEST_RAKE_TASKS = ::T.let(nil, ::T.untyped)
end

class ERB
  def def_method(mod, methodname, fname=T.unsafe(nil)); end

  def def_module(methodname=T.unsafe(nil)); end
end

class ERB::Compiler::Scanner
  DEFAULT_ETAGS = ::T.let(nil, ::T.untyped)
  DEFAULT_STAGS = ::T.let(nil, ::T.untyped)
end

module ERB::Escape
end

module ERB::Escape
  def self.html_escape(arg); end
end

module ERB::Util
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActiveSupport::CoreExt::ERBUtil
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_ONCE_REGEXP = ::T.let(nil, ::T.untyped)
  INVALID_TAG_NAME_FOLLOWING_REGEXP = ::T.let(nil, ::T.untyped)
  INVALID_TAG_NAME_START_REGEXP = ::T.let(nil, ::T.untyped)
  SAFE_XML_TAG_NAME_REGEXP = ::T.let(nil, ::T.untyped)
  TAG_NAME_FOLLOWING_CODEPOINTS = ::T.let(nil, ::T.untyped)
  TAG_NAME_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
  TAG_NAME_START_CODEPOINTS = ::T.let(nil, ::T.untyped)
end

module ERB::Util
  extend ::ActiveSupport::CoreExt::ERBUtil
end

class Encoding
  def _dump(*arg); end
end

class Encoding::Converter
  def initialize(*arg); end
  LF_NEWLINE_DECORATOR = ::T.let(nil, ::T.untyped)
end

class Encoding
  def self._load(arg); end
end

module Enumerable
  def compact(); end
end

module Enumerable
  extend ::ActiveSupport::EnumerableCoreExt::Constants
end

class Enumerator
  def each_with_index(); end
end

class Enumerator::ArithmeticSequence
  def begin(); end

  def each(&blk); end

  def end(); end

  def exclude_end?(); end

  def last(*arg); end

  def step(); end
end

class Enumerator::ArithmeticSequence
end

class Enumerator::Generator
  def each(*arg, &blk); end

  def initialize(*arg); end
end

class Enumerator::Producer
  def each(&blk); end
end

class Enumerator::Producer
end

class Enumerator::Product
  def each(&blk); end
end

class Enumerator::Product
end

class Enumerator
  def self.product(*arg); end
end

class Errno::EAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EAUTH
end

class Errno::EBADARCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADARCH
end

class Errno::EBADEXEC
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADEXEC
end

class Errno::EBADMACHO
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADMACHO
end

class Errno::EBADRPC
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EBADRPC
end

Errno::ECAPMODE = Errno::NOERROR

Errno::EDEADLOCK = Errno::NOERROR

class Errno::EDEVERR
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EDEVERR
end

Errno::EDOOFUS = Errno::NOERROR

class Errno::EFTYPE
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EFTYPE
end

Errno::EIPSEC = Errno::NOERROR

Errno::ELAST = Errno::EQFULL

class Errno::ENEEDAUTH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENEEDAUTH
end

class Errno::ENOATTR
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOATTR
end

class Errno::ENOPOLICY
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOPOLICY
end

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTSUP
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOTSUP
end

class Errno::EPROCLIM
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCLIM
end

class Errno::EPROCUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROCUNAVAIL
end

class Errno::EPROGMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGMISMATCH
end

class Errno::EPROGUNAVAIL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPROGUNAVAIL
end

class Errno::EPWROFF
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EPWROFF
end

class Errno::EQFULL
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::EQFULL
end

class Errno::ERPCMISMATCH
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ERPCMISMATCH
end

class Errno::ESHLIBVERS
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ESHLIBVERS
end

module ErrorHighlight::CoreExt
  def detailed_message(highlight: T.unsafe(nil), error_highlight: T.unsafe(nil), **arg); end
end

class ErrorHighlight::DefaultFormatter
  MIN_SNIPPET_WIDTH = ::T.let(nil, ::T.untyped)
end

class ErrorHighlight::DefaultFormatter
  def self.max_snippet_width(); end

  def self.max_snippet_width=(width); end

  def self.terminal_width(); end
end

module Erubi
  FREEZE_TEMPLATE_LITERALS = ::T.let(nil, ::T.untyped)
  MATCH_METHOD = ::T.let(nil, ::T.untyped)
  RANGE_FIRST = ::T.let(nil, ::T.untyped)
  RANGE_LAST = ::T.let(nil, ::T.untyped)
  SKIP_DEFINED_FOR_INSTANCE_VARIABLE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Erubi::Engine
  DEFAULT_REGEXP = ::T.let(nil, ::T.untyped)
end

module EtOrbi
  VERSION = ::T.let(nil, ::T.untyped)
  ZONE_ALIASES = ::T.let(nil, ::T.untyped)
end

class EtOrbi::EoTime
  DAY_S = ::T.let(nil, ::T.untyped)
  WEEK_S = ::T.let(nil, ::T.untyped)
end

module Etc
  VERSION = ::T.let(nil, ::T.untyped)
end

class Etc::Group
  def gid=(_); end

  def mem=(_); end

  def name=(_); end

  def passwd=(_); end
end

class Etc::Group
  extend ::Enumerable
  def self.[](*arg); end

  def self.each(&blk); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Etc::Passwd
  def change(); end

  def change=(_); end

  def dir=(_); end

  def expire(); end

  def expire=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid=(_); end

  def name=(_); end

  def passwd=(_); end

  def shell=(_); end

  def uclass(); end

  def uclass=(_); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::Enumerable
  def self.[](*arg); end

  def self.each(&blk); end

  def self.keyword_init?(); end

  def self.members(); end
end

module ExecJS
  VERSION = ::T.let(nil, ::T.untyped)
end

ExecJS::GraalJSRuntime::Context::ForeignException = RuntimeError

module ExecJS::Runtimes
  Bun = ::T.let(nil, ::T.untyped)
  Disabled = ::T.let(nil, ::T.untyped)
  Duktape = ::T.let(nil, ::T.untyped)
  GraalJS = ::T.let(nil, ::T.untyped)
  JScript = ::T.let(nil, ::T.untyped)
  JavaScriptCore = ::T.let(nil, ::T.untyped)
  MiniRacer = ::T.let(nil, ::T.untyped)
  Node = ::T.let(nil, ::T.untyped)
  RubyRhino = ::T.let(nil, ::T.untyped)
  SpiderMonkey = ::T.let(nil, ::T.untyped)
  Spidermonkey = ::T.let(nil, ::T.untyped)
  V8 = ::T.let(nil, ::T.untyped)
end

class ExitCalledError
end

class ExitCalledError
end

module FFI
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  TYPE_BOOL = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_IN = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  TYPE_BUFFER_OUT = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT32 = ::T.let(nil, ::T.untyped)
  TYPE_FLOAT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT16 = ::T.let(nil, ::T.untyped)
  TYPE_INT32 = ::T.let(nil, ::T.untyped)
  TYPE_INT64 = ::T.let(nil, ::T.untyped)
  TYPE_INT8 = ::T.let(nil, ::T.untyped)
  TYPE_LONG = ::T.let(nil, ::T.untyped)
  TYPE_LONGDOUBLE = ::T.let(nil, ::T.untyped)
  TYPE_POINTER = ::T.let(nil, ::T.untyped)
  TYPE_STRING = ::T.let(nil, ::T.untyped)
  TYPE_UINT16 = ::T.let(nil, ::T.untyped)
  TYPE_UINT32 = ::T.let(nil, ::T.untyped)
  TYPE_UINT64 = ::T.let(nil, ::T.untyped)
  TYPE_UINT8 = ::T.let(nil, ::T.untyped)
  TYPE_ULONG = ::T.let(nil, ::T.untyped)
  TYPE_VARARGS = ::T.let(nil, ::T.untyped)
  TYPE_VOID = ::T.let(nil, ::T.untyped)
  TypeDefs = ::T.let(nil, ::T.untyped)
  USE_THIS_PROCESS_AS_LIBRARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

FFI::CallbackInfo = FFI::FunctionType

class FFI::DynamicLibrary
  RTLD_ALL_MASK = ::T.let(nil, ::T.untyped)
  RTLD_BINDING_MASK = ::T.let(nil, ::T.untyped)
  RTLD_DEEPBIND = ::T.let(nil, ::T.untyped)
  RTLD_FIRST = ::T.let(nil, ::T.untyped)
  RTLD_GLOBAL = ::T.let(nil, ::T.untyped)
  RTLD_LAZY = ::T.let(nil, ::T.untyped)
  RTLD_LOCAL = ::T.let(nil, ::T.untyped)
  RTLD_LOCATION_MASK = ::T.let(nil, ::T.untyped)
  RTLD_MEMBER = ::T.let(nil, ::T.untyped)
  RTLD_NODELETE = ::T.let(nil, ::T.untyped)
  RTLD_NOLOAD = ::T.let(nil, ::T.untyped)
  RTLD_NOW = ::T.let(nil, ::T.untyped)
  SEARCH_PATH = ::T.let(nil, ::T.untyped)
  SEARCH_PATH_MESSAGE = ::T.let(nil, ::T.untyped)
end

class FFI::Function
  include ::FFI::Function::RegisterAttach
end

FFI::FunctionInfo = FFI::FunctionType

module FFI::Library
  CURRENT_PROCESS = ::T.let(nil, ::T.untyped)
  FlagsMap = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
end

FFI::NativeLibrary = FFI::DynamicLibrary

module FFI::NativeType
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

module FFI::NativeType
end

class FFI::NullPointerError
end

class FFI::NullPointerError
end

module FFI::Platform
  ADDRESS_ALIGN = ::T.let(nil, ::T.untyped)
  ADDRESS_SIZE = ::T.let(nil, ::T.untyped)
  ARCH = ::T.let(nil, ::T.untyped)
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  BYTE_ORDER = ::T.let(nil, ::T.untyped)
  CONF_DIR = ::T.let(nil, ::T.untyped)
  CPU = ::T.let(nil, ::T.untyped)
  DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  FLOAT_ALIGN = ::T.let(nil, ::T.untyped)
  FLOAT_SIZE = ::T.let(nil, ::T.untyped)
  INT16_ALIGN = ::T.let(nil, ::T.untyped)
  INT16_SIZE = ::T.let(nil, ::T.untyped)
  INT32_ALIGN = ::T.let(nil, ::T.untyped)
  INT32_SIZE = ::T.let(nil, ::T.untyped)
  INT64_ALIGN = ::T.let(nil, ::T.untyped)
  INT64_SIZE = ::T.let(nil, ::T.untyped)
  INT8_ALIGN = ::T.let(nil, ::T.untyped)
  INT8_SIZE = ::T.let(nil, ::T.untyped)
  IS_BSD = ::T.let(nil, ::T.untyped)
  IS_DRAGONFLYBSD = ::T.let(nil, ::T.untyped)
  IS_FREEBSD = ::T.let(nil, ::T.untyped)
  IS_GNU = ::T.let(nil, ::T.untyped)
  IS_LINUX = ::T.let(nil, ::T.untyped)
  IS_MAC = ::T.let(nil, ::T.untyped)
  IS_NETBSD = ::T.let(nil, ::T.untyped)
  IS_OPENBSD = ::T.let(nil, ::T.untyped)
  IS_SOLARIS = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  LIBC = ::T.let(nil, ::T.untyped)
  LIBPREFIX = ::T.let(nil, ::T.untyped)
  LIBSUFFIX = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  LONG_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_ALIGN = ::T.let(nil, ::T.untyped)
  LONG_DOUBLE_SIZE = ::T.let(nil, ::T.untyped)
  LONG_SIZE = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  OS = ::T.let(nil, ::T.untyped)
  OSVERSION = ::T.let(nil, ::T.untyped)
end

class FFI::Pointer
  NULL = ::T.let(nil, ::T.untyped)
  SIZE = ::T.let(nil, ::T.untyped)
end

class FFI::Struct::InlineArray
  include ::Enumerable
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Number
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::Pointer
end

class FFI::StructLayout::String
end

class FFI::StructLayout::String
end

class FFI::StructLayoutBuilder
  NUMBER_TYPES = ::T.let(nil, ::T.untyped)
end

class FFI::Type
  BOOL = ::T.let(nil, ::T.untyped)
  BUFFER_IN = ::T.let(nil, ::T.untyped)
  BUFFER_INOUT = ::T.let(nil, ::T.untyped)
  BUFFER_OUT = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  DOUBLE = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  FLOAT32 = ::T.let(nil, ::T.untyped)
  FLOAT64 = ::T.let(nil, ::T.untyped)
  INT = ::T.let(nil, ::T.untyped)
  INT16 = ::T.let(nil, ::T.untyped)
  INT32 = ::T.let(nil, ::T.untyped)
  INT64 = ::T.let(nil, ::T.untyped)
  INT8 = ::T.let(nil, ::T.untyped)
  LONG = ::T.let(nil, ::T.untyped)
  LONGDOUBLE = ::T.let(nil, ::T.untyped)
  LONG_LONG = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  SCHAR = ::T.let(nil, ::T.untyped)
  SHORT = ::T.let(nil, ::T.untyped)
  SINT = ::T.let(nil, ::T.untyped)
  SLONG = ::T.let(nil, ::T.untyped)
  SLONG_LONG = ::T.let(nil, ::T.untyped)
  SSHORT = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  UCHAR = ::T.let(nil, ::T.untyped)
  UINT = ::T.let(nil, ::T.untyped)
  UINT16 = ::T.let(nil, ::T.untyped)
  UINT32 = ::T.let(nil, ::T.untyped)
  UINT64 = ::T.let(nil, ::T.untyped)
  UINT8 = ::T.let(nil, ::T.untyped)
  ULONG = ::T.let(nil, ::T.untyped)
  ULONG_LONG = ::T.let(nil, ::T.untyped)
  USHORT = ::T.let(nil, ::T.untyped)
  VARARGS = ::T.let(nil, ::T.untyped)
  VOID = ::T.let(nil, ::T.untyped)
end

FFI::Type::Array = FFI::ArrayType

FFI::Type::Function = FFI::FunctionType

FFI::Type::Struct = FFI::StructByValue

class FSEvent
  def callback(); end

  def initialize(args=T.unsafe(nil), &block); end

  def open_pipe(); end

  def paths(); end

  def process_running?(pid); end

  def run(); end

  def stop(); end

  def watch(watch_paths, options=T.unsafe(nil), &block); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class FSEvent
  def self.root_path(); end

  def self.watcher_path(); end
end

class Fiber
  def backtrace(*arg); end

  def backtrace_locations(*arg); end

  def blocking?(); end

  def initialize(*arg); end

  def kill(); end

  def storage(); end

  def storage=(storage); end
end

class Fiber
  def self.blocking(); end

  def self.blocking?(); end

  def self.current_scheduler(); end

  def self.schedule(*arg); end

  def self.scheduler(); end

  def self.set_scheduler(arg); end
end

class File
  RELATIVE_PARENTDIR = ::T.let(nil, ::T.untyped)
  RELATIVE_SAMEDIR = ::T.let(nil, ::T.untyped)
end

class File
  def self.absolute_path?(arg); end

  def self.atomic_write(file_name, temp_dir=T.unsafe(nil)); end

  def self.cleanpath(path, rel_root=T.unsafe(nil)); end

  def self.open!(file, *args, &block); end

  def self.probe_stat_in(dir); end

  def self.read_binary(file); end

  def self.relative_path(from, to); end
end

FileList = Rake::FileList

module FileUtils
  include ::FileUtils::StreamUtils_
  LN_SUPPORTED = ::T.let(nil, ::T.untyped)
  RUBY = ::T.let(nil, ::T.untyped)
end

module FileUtils::DryRun
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::DryRun
  extend ::FileUtils::DryRun
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  extend ::FileUtils::NoWrite
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils
  extend ::FileUtils::StreamUtils_
  def self.ln_sr(src, dest, target_directory: T.unsafe(nil), force: T.unsafe(nil), noop: T.unsafe(nil), verbose: T.unsafe(nil)); end
end

module Find
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  def self._compile_method(src, file, line); end

  def self._delegator_method(obj, accessor, method, ali); end

  def self._valid_method?(method); end

  def self.debug(); end

  def self.debug=(debug); end
end

module Fugit
  DAY_S = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  YEAR_S = ::T.let(nil, ::T.untyped)
end

class Fugit::Cron
  FREQUENCY_CACHE = ::T.let(nil, ::T.untyped)
  MAXDAYS = ::T.let(nil, ::T.untyped)
  MAX_ITERATION_COUNT = ::T.let(nil, ::T.untyped)
  SLOTS = ::T.let(nil, ::T.untyped)
  SPECIALS = ::T.let(nil, ::T.untyped)
end

module Fugit::Cron::Parser
  def _dom(i); end

  def _dow(i); end

  def _hou(i); end

  def _mon(i); end

  def _mos(i); end

  def _tz(i); end

  def _tz_delta(i); end

  def _tz_name(i); end

  def and?(i); end

  def classic_cron(i); end

  def comma(i); end

  def comma?(i); end

  def cron(i); end

  def dom(i); end

  def dom_elt(i); end

  def dow(i); end

  def dow_elt(i); end

  def dow_elt_(i); end

  def dow_hash(i); end

  def h_dow(i); end

  def hou(i); end

  def hou_elt(i); end

  def hyphen(i); end

  def ldom_(i); end

  def ldow(i); end

  def lhou_(i); end

  def list_dom(i); end

  def list_dow(i); end

  def list_hou(i); end

  def list_min(i); end

  def list_mon(i); end

  def list_sec(i); end

  def lmin_(i); end

  def lmon_(i); end

  def lsec_(i); end

  def mod(i); end

  def mod_dow(i); end

  def mon(i); end

  def mon_elt(i); end

  def mos(i); end

  def mos_elt(i); end

  def r_dom(i); end

  def r_dow(i); end

  def r_hou(i); end

  def r_mon(i); end

  def r_mos(i); end

  def rewrite_bound(k, t); end

  def rewrite_cron(t); end

  def rewrite_elt(k, t); end

  def rewrite_entry(t); end

  def rewrite_mod(k, t); end

  def rewrite_tz(t); end

  def s(i); end

  def second_cron(i); end

  def slash(i); end

  def sor_dom(i); end

  def sor_dow(i); end

  def sor_hou(i); end

  def sor_mon(i); end

  def sor_mos(i); end

  def sorws_dom(i); end

  def sorws_dow(i); end

  def sorws_hou(i); end

  def sorws_mon(i); end

  def sorws_mos(i); end

  def star(i); end
  DOW_REX = ::T.let(nil, ::T.untyped)
  MONTHS = ::T.let(nil, ::T.untyped)
  MONTH_REX = ::T.let(nil, ::T.untyped)
  WEEKDAYS = ::T.let(nil, ::T.untyped)
  WEEKDS = ::T.let(nil, ::T.untyped)
end

class Fugit::Duration
  INFLA_KEYS = ::T.let(nil, ::T.untyped)
  KEYS = ::T.let(nil, ::T.untyped)
  NON_INFLA_KEYS = ::T.let(nil, ::T.untyped)
  SECOND_ROUND = ::T.let(nil, ::T.untyped)
end

module Fugit::Duration::IsoParser
  def date(i); end

  def day(i); end

  def delt(i); end

  def dur(i); end

  def hou(i); end

  def min(i); end

  def mon(i); end

  def p(i); end

  def rewrite_dur(t); end

  def sec(i); end

  def t(i); end

  def t_time(i); end

  def telt(i); end

  def time(i); end

  def wee(i); end

  def yea(i); end
end

module Fugit::Duration::Parser
  def day(i); end

  def dur(i); end

  def elt(i); end

  def hou(i); end

  def merge(h0, h1); end

  def min(i); end

  def mon(i); end

  def rewrite_dur(t); end

  def rewrite_sdur(t); end

  def sdur(i); end

  def sec(i); end

  def sek(i); end

  def sep(i); end

  def sign(i); end

  def wee(i); end

  def yea(i); end
end

module Fugit::Nat
  MAX_INPUT_LENGTH = ::T.let(nil, ::T.untyped)
end

module Fugit::Nat::Parser
  def _and(i); end

  def _and_or_or(i); end

  def _and_or_or_or_comma(i); end

  def _at(i); end

  def _day_s(i); end

  def _dmin(i); end

  def _every(i); end

  def _from(i); end

  def _in_or_on(i); end

  def _minute(i); end

  def _on(i); end

  def _point(i); end

  def _rewrite_sub(t, key=T.unsafe(nil)); end

  def _rewrite_subs(t, key=T.unsafe(nil)); end

  def _sep(i); end

  def _space(i); end

  def _the(i); end

  def _to(i); end

  def _to_or_dash(i); end

  def adjust_h(h, m, ap); end

  def ampm(i); end

  def and_dmin(i); end

  def at(i); end

  def at_object(i); end

  def at_objects(i); end

  def at_p(i); end

  def at_point(i); end

  def city_tz(i); end

  def count(i); end

  def counts(i); end

  def dark(i); end

  def delta_tz(i); end

  def digital_h(i); end

  def digital_hour(i); end

  def every(i); end

  def every_interval(i); end

  def every_named(i); end

  def every_object(i); end

  def every_objects(i); end

  def every_of_the_month(i); end

  def every_single_interval(i); end

  def every_weekday(i); end

  def from(i); end

  def from_object(i); end

  def from_objects(i); end

  def interval(i); end

  def monthday(i); end

  def monthdays(i); end

  def named_h(i); end

  def named_hour(i); end

  def named_m(i); end

  def named_min(i); end

  def named_tz(i); end

  def nat(i); end

  def nat_elt(i); end

  def omonthday(i); end

  def omonthdays(i); end

  def on(i); end

  def on_days(i); end

  def on_minutes(i); end

  def on_object(i); end

  def on_objects(i); end

  def on_the(i); end

  def on_thes(i); end

  def on_thex(i); end

  def on_weekdays(i); end

  def otm(i); end

  def rewrite_at(t); end

  def rewrite_at_p(t); end

  def rewrite_digital_hour(t); end

  def rewrite_dmin(t); end

  def rewrite_every(t); end

  def rewrite_every_interval(t); end

  def rewrite_every_named(t); end

  def rewrite_every_single_interval(t); end

  def rewrite_monthday(t); end

  def rewrite_named_hour(t); end

  def rewrite_nat(t); end

  def rewrite_omonthday(t); end

  def rewrite_on(t); end

  def rewrite_on_days(t); end

  def rewrite_on_minutes(t); end

  def rewrite_on_thes(t); end

  def rewrite_on_thex(t); end

  def rewrite_on_weekdays(t); end

  def rewrite_simple_hour(t); end

  def rewrite_to_hour(t); end

  def rewrite_to_omonthday(t); end

  def rewrite_to_weekday(t); end

  def rewrite_tz(t); end

  def rewrite_weekday(t); end

  def rewrite_weekdays(t); end

  def simple_h(i); end

  def simple_hour(i); end

  def slot(key, data0, data1=T.unsafe(nil), opts=T.unsafe(nil)); end

  def to_hour(i); end

  def to_omonthday(i); end

  def to_weekday(i); end

  def tz(i); end

  def tzone(i); end

  def weekday(i); end

  def weekday_range(i); end

  def weekdays(i); end
  INTERVALS = ::T.let(nil, ::T.untyped)
  INTERVAL_REX = ::T.let(nil, ::T.untyped)
  MONTHDAY_REX = ::T.let(nil, ::T.untyped)
  NAMED_H_REX = ::T.let(nil, ::T.untyped)
  NAMED_M_REX = ::T.let(nil, ::T.untyped)
  NHOURS = ::T.let(nil, ::T.untyped)
  NMINUTES = ::T.let(nil, ::T.untyped)
  OMONTHDAYS = ::T.let(nil, ::T.untyped)
  OMONTHDAY_REX = ::T.let(nil, ::T.untyped)
  POINTS = ::T.let(nil, ::T.untyped)
  POINT_REX = ::T.let(nil, ::T.untyped)
  WEEKDAYS = ::T.let(nil, ::T.untyped)
  WEEKDAY_REX = ::T.let(nil, ::T.untyped)
end

module GC
  def garbage_collect(full_mark: T.unsafe(nil), immediate_mark: T.unsafe(nil), immediate_sweep: T.unsafe(nil)); end
end

module GC
  def self.config(hash=T.unsafe(nil)); end

  def self.latest_compact_info(); end
end

module GLib
  GLIB_TO_SEVERITY = ::T.let(nil, ::T.untyped)
  G_FREE = ::T.let(nil, ::T.untyped)
  LOG_FLAG_FATAL = ::T.let(nil, ::T.untyped)
  LOG_FLAG_RECURSION = ::T.let(nil, ::T.untyped)
  LOG_HANDLER = ::T.let(nil, ::T.untyped)
  LOG_LEVEL_CRITICAL = ::T.let(nil, ::T.untyped)
  LOG_LEVEL_DEBUG = ::T.let(nil, ::T.untyped)
  LOG_LEVEL_ERROR = ::T.let(nil, ::T.untyped)
  LOG_LEVEL_INFO = ::T.let(nil, ::T.untyped)
  LOG_LEVEL_MESSAGE = ::T.let(nil, ::T.untyped)
  LOG_LEVEL_WARNING = ::T.let(nil, ::T.untyped)
end

module GObject
  GBOOL_TYPE = ::T.let(nil, ::T.untyped)
  GDOUBLE_TYPE = ::T.let(nil, ::T.untyped)
  GENUM_TYPE = ::T.let(nil, ::T.untyped)
  GFLAGS_TYPE = ::T.let(nil, ::T.untyped)
  GINT_TYPE = ::T.let(nil, ::T.untyped)
  GOBJECT_TYPE = ::T.let(nil, ::T.untyped)
  GSTR_TYPE = ::T.let(nil, ::T.untyped)
  GUINT64_TYPE = ::T.let(nil, ::T.untyped)
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  FLATTENS_REQUIRED_PATHS = ::T.let(nil, ::T.untyped)
  HAVE_OPENSSL = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  VALIDATES_FOR_RESOLUTION = ::T.let(nil, ::T.untyped)
end

module Gem::BUNDLED_GEMS
  SINCE_FAST_PATH = ::T.let(nil, ::T.untyped)
end

module Gem::BUNDLED_GEMS
  def self.build_message(gem); end

  def self.find_gem(path); end

  def self.replace_require(specs); end

  def self.uplevel(); end

  def self.warning?(name, specs: T.unsafe(nil)); end
end

class Gem::BasicSpecification
  def base_dir_priority(gem_path); end

  def default_gem_priority(); end

  def full_name_with_location(); end

  def ignored?(); end

  def plugins(); end
end

module Gem::BetterPermissionError
  def data(); end
end

module Gem::BetterPermissionError
end

module Gem::CIDetector
  ENV_DESCRIPTORS = ::T.let(nil, ::T.untyped)
  ENV_INDICATORS = ::T.let(nil, ::T.untyped)
end

module Gem::CIDetector
  def self.ci?(); end

  def self.ci_strings(); end
end

Gem::Cache = Gem::SourceIndex

class Gem::ConfigFile
  def install_extension_in_lib(); end

  def install_extension_in_lib=(install_extension_in_lib); end

  def ipv4_fallback_enabled(); end

  def ipv4_fallback_enabled=(ipv4_fallback_enabled); end

  def last_update_check(); end

  def last_update_check=(timestamp); end

  def state_file_name(); end

  def state_file_writable?(); end
  DEFAULT_INSTALL_EXTENSION_IN_LIB = ::T.let(nil, ::T.untyped)
  DEFAULT_IPV4_FALLBACK_ENABLED = ::T.let(nil, ::T.untyped)
end

class Gem::ConfigFile
  def self.deep_transform_config_keys!(config); end

  def self.dump_with_rubygems_yaml(content); end

  def self.load_with_rubygems_config_hash(yaml); end
end

class Gem::Dependency
  include ::Bundler::ForcePlatform
  def force_ruby_platform(); end
end

class Gem::DependencyList
  include ::Gem::TSort
end

module Gem::Deprecate
  def deprecate(name, repl, year, month); end
end

module Gem::Deprecate
  def self.next_rubygems_major_version(); end

  def self.rubygems_deprecate(name, replacement=T.unsafe(nil)); end

  def self.rubygems_deprecate_command(version=T.unsafe(nil)); end
end

class Gem::Installer
  include ::Gem::InstallerUninstallerUtils
  def ensure_writable_dir(dir); end

  def explicit_version_requirement(name); end

  def gemdeps_load(name); end

  def generate_plugins(); end
end

class Gem::Installer::ExtensionBuildError
end

class Gem::Installer::ExtensionBuildError
end

class Gem::Installer::FakePackage
  def copy_to(path); end

  def data_mode(); end

  def data_mode=(data_mode); end

  def dir_mode(); end

  def dir_mode=(dir_mode); end

  def extract_files(destination_dir, pattern=T.unsafe(nil)); end

  def initialize(spec); end

  def prog_mode(); end

  def prog_mode=(prog_mode); end

  def spec(); end

  def spec=(spec); end
end

class Gem::Installer::FakePackage
end

class Gem::Installer
  def self.inherited(klass); end
end

module Gem::InstallerUninstallerUtils
  def regenerate_plugins_for(spec, plugins_dir); end

  def remove_plugins_for(spec, plugins_dir); end
end

module Gem::InstallerUninstallerUtils
end

class Gem::Licenses
  DEPRECATED_EXCEPTION_IDENTIFIERS = ::T.let(nil, ::T.untyped)
  DEPRECATED_EXCEPTION_REGEXP = ::T.let(nil, ::T.untyped)
  DEPRECATED_LICENSE_IDENTIFIERS = ::T.let(nil, ::T.untyped)
  DEPRECATED_LICENSE_REGEXP = ::T.let(nil, ::T.untyped)
  LICENSE_REF = ::T.let(nil, ::T.untyped)
  VALID_REGEXP = ::T.let(nil, ::T.untyped)
end

class Gem::Licenses
  def self.deprecated_exception_id?(license); end

  def self.deprecated_license_id?(license); end
end

module Gem::Molinillo
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Molinillo::CircularDependencyError
  def dependencies(); end

  def initialize(vertices); end
end

class Gem::Molinillo::CircularDependencyError
end

module Gem::Molinillo::Delegates
end

module Gem::Molinillo::Delegates::ResolutionState
  def activated(); end

  def conflicts(); end

  def depth(); end

  def name(); end

  def possibilities(); end

  def requirement(); end

  def requirements(); end

  def unused_unwind_options(); end
end

module Gem::Molinillo::Delegates::ResolutionState
end

module Gem::Molinillo::Delegates::SpecificationProvider
  def allow_missing?(dependency); end

  def dependencies_equal?(dependencies, other_dependencies); end

  def dependencies_for(specification); end

  def name_for(dependency); end

  def name_for_explicit_dependency_source(); end

  def name_for_locking_dependency_source(); end

  def requirement_satisfied_by?(requirement, activated, spec); end

  def search_for(dependency); end

  def sort_dependencies(dependencies, activated, conflicts); end
end

module Gem::Molinillo::Delegates::SpecificationProvider
end

module Gem::Molinillo::Delegates
end

class Gem::Molinillo::DependencyGraph
  include ::Enumerable
  include ::Gem::TSort
  def ==(other); end

  def add_child_vertex(name, payload, parent_names, requirement); end

  def add_edge(origin, destination, requirement); end

  def add_vertex(name, payload, root=T.unsafe(nil)); end

  def delete_edge(edge); end

  def detach_vertex_named(name); end

  def each(&blk); end

  def rewind_to(tag); end

  def root_vertex_named(name); end

  def set_payload(name, payload); end

  def tag(tag); end

  def to_dot(options=T.unsafe(nil)); end

  def tsort_each_child(vertex, &block); end

  def vertex_named(name); end

  def vertices(); end
end

class Gem::Molinillo::DependencyGraph::Action
  def down(graph); end

  def next(); end

  def next=(arg); end

  def previous(); end

  def previous=(previous); end

  def up(graph); end
end

class Gem::Molinillo::DependencyGraph::Action
  def self.action_name(); end
end

class Gem::Molinillo::DependencyGraph::AddEdgeNoCircular
  def destination(); end

  def initialize(origin, destination, requirement); end

  def make_edge(graph); end

  def origin(); end

  def requirement(); end
end

class Gem::Molinillo::DependencyGraph::AddEdgeNoCircular
end

class Gem::Molinillo::DependencyGraph::AddVertex
  def initialize(name, payload, root); end

  def name(); end

  def payload(); end

  def root(); end
end

class Gem::Molinillo::DependencyGraph::AddVertex
end

class Gem::Molinillo::DependencyGraph::DeleteEdge
  def destination_name(); end

  def initialize(origin_name, destination_name, requirement); end

  def make_edge(graph); end

  def origin_name(); end

  def requirement(); end
end

class Gem::Molinillo::DependencyGraph::DeleteEdge
end

class Gem::Molinillo::DependencyGraph::DetachVertexNamed
  def initialize(name); end

  def name(); end
end

class Gem::Molinillo::DependencyGraph::DetachVertexNamed
end

class Gem::Molinillo::DependencyGraph::Edge
  def destination(); end

  def destination=(_); end

  def origin(); end

  def origin=(_); end

  def requirement(); end

  def requirement=(_); end
end

class Gem::Molinillo::DependencyGraph::Edge
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(&blk); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Gem::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Gem::Molinillo::DependencyGraph::SetPayload
  def initialize(name, payload); end

  def name(); end

  def payload(); end
end

class Gem::Molinillo::DependencyGraph::SetPayload
end

class Gem::Molinillo::DependencyGraph::Tag
  def initialize(tag); end

  def tag(); end
end

class Gem::Molinillo::DependencyGraph::Tag
end

class Gem::Molinillo::DependencyGraph::Vertex
  def ==(other); end

  def _path_to?(other, visited=T.unsafe(nil)); end

  def _recursive_predecessors(vertices=T.unsafe(nil)); end

  def _recursive_successors(vertices=T.unsafe(nil)); end

  def ancestor?(other); end

  def descendent?(other); end

  def eql?(other); end

  def explicit_requirements(); end

  def incoming_edges(); end

  def incoming_edges=(incoming_edges); end

  def initialize(name, payload); end

  def is_reachable_from?(other); end

  def name(); end

  def name=(name); end

  def outgoing_edges(); end

  def outgoing_edges=(outgoing_edges); end

  def path_to?(other); end

  def payload(); end

  def payload=(payload); end

  def predecessors(); end

  def recursive_predecessors(); end

  def recursive_successors(); end

  def requirements(); end

  def root(); end

  def root=(root); end

  def root?(); end

  def shallow_eql?(other); end

  def successors(); end
end

class Gem::Molinillo::DependencyGraph::Vertex
end

class Gem::Molinillo::DependencyGraph
  def self.tsort(vertices); end
end

class Gem::Molinillo::DependencyState
  def pop_possibility_state(); end
end

class Gem::Molinillo::DependencyState
end

class Gem::Molinillo::NoSuchDependencyError
  def dependency(); end

  def dependency=(dependency); end

  def initialize(dependency, required_by=T.unsafe(nil)); end

  def required_by(); end

  def required_by=(required_by); end
end

class Gem::Molinillo::NoSuchDependencyError
end

class Gem::Molinillo::PossibilityState
end

class Gem::Molinillo::PossibilityState
end

class Gem::Molinillo::ResolutionState
  def activated(); end

  def activated=(_); end

  def conflicts(); end

  def conflicts=(_); end

  def depth(); end

  def depth=(_); end

  def name(); end

  def name=(_); end

  def possibilities(); end

  def possibilities=(_); end

  def requirement(); end

  def requirement=(_); end

  def requirements(); end

  def requirements=(_); end

  def unused_unwind_options(); end

  def unused_unwind_options=(_); end
end

class Gem::Molinillo::ResolutionState
  def self.[](*arg); end

  def self.empty(); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::Resolver
  def initialize(specification_provider, resolver_ui); end

  def resolve(requested, base=T.unsafe(nil)); end

  def resolver_ui(); end

  def specification_provider(); end
end

class Gem::Molinillo::Resolver::Resolution
  include ::Gem::Molinillo::Delegates::ResolutionState
  include ::Gem::Molinillo::Delegates::SpecificationProvider
  def base(); end

  def initialize(specification_provider, resolver_ui, requested, base); end

  def iteration_rate=(iteration_rate); end

  def original_requested(); end

  def resolve(); end

  def resolver_ui(); end

  def specification_provider(); end

  def started_at=(started_at); end

  def states=(states); end
end

class Gem::Molinillo::Resolver::Resolution::Conflict
  def activated_by_name(); end

  def activated_by_name=(_); end

  def existing(); end

  def existing=(_); end

  def locked_requirement(); end

  def locked_requirement=(_); end

  def possibility(); end

  def possibility_set(); end

  def possibility_set=(_); end

  def requirement(); end

  def requirement=(_); end

  def requirement_trees(); end

  def requirement_trees=(_); end

  def requirements(); end

  def requirements=(_); end

  def underlying_error(); end

  def underlying_error=(_); end
end

class Gem::Molinillo::Resolver::Resolution::Conflict
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::Resolver::Resolution::PossibilitySet
  def dependencies(); end

  def dependencies=(_); end

  def latest_version(); end

  def possibilities(); end

  def possibilities=(_); end
end

class Gem::Molinillo::Resolver::Resolution::PossibilitySet
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::Resolver::Resolution::UnwindDetails
  include ::Comparable
  def all_requirements(); end

  def conflicting_requirements(); end

  def conflicting_requirements=(_); end

  def requirement_tree(); end

  def requirement_tree=(_); end

  def requirement_trees(); end

  def requirement_trees=(_); end

  def requirements_unwound_to_instead(); end

  def requirements_unwound_to_instead=(_); end

  def reversed_requirement_tree_index(); end

  def state_index(); end

  def state_index=(_); end

  def state_requirement(); end

  def state_requirement=(_); end

  def sub_dependencies_to_avoid(); end

  def unwinding_to_primary_requirement?(); end
end

class Gem::Molinillo::Resolver::Resolution::UnwindDetails
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Gem::Molinillo::Resolver::Resolution
end

class Gem::Molinillo::Resolver
end

class Gem::Molinillo::ResolverError
end

class Gem::Molinillo::ResolverError
end

module Gem::Molinillo::SpecificationProvider
  def allow_missing?(dependency); end

  def dependencies_equal?(dependencies, other_dependencies); end

  def dependencies_for(specification); end

  def name_for(dependency); end

  def name_for_explicit_dependency_source(); end

  def name_for_locking_dependency_source(); end

  def requirement_satisfied_by?(requirement, activated, spec); end

  def search_for(dependency); end

  def sort_dependencies(dependencies, activated, conflicts); end
end

module Gem::Molinillo::SpecificationProvider
end

module Gem::Molinillo::UI
  def after_resolution(); end

  def before_resolution(); end

  def debug(depth=T.unsafe(nil)); end

  def debug?(); end

  def indicate_progress(); end

  def output(); end

  def progress_rate(); end
end

module Gem::Molinillo::UI
end

class Gem::Molinillo::VersionConflict
  include ::Gem::Molinillo::Delegates::SpecificationProvider
  def conflicts(); end

  def initialize(conflicts, specification_provider); end

  def message_with_trees(opts=T.unsafe(nil)); end

  def specification_provider(); end
end

class Gem::Molinillo::VersionConflict
end

module Gem::Molinillo
end

class Gem::NameTuple
  def lock_name(); end
end

module Gem::Net
end

class Gem::Net::BufferedIO
  def <<(*strs); end

  def close(); end

  def closed?(); end

  def continue_timeout(); end

  def continue_timeout=(continue_timeout); end

  def debug_output(); end

  def debug_output=(debug_output); end

  def eof?(); end

  def initialize(io, read_timeout: T.unsafe(nil), write_timeout: T.unsafe(nil), continue_timeout: T.unsafe(nil), debug_output: T.unsafe(nil)); end

  def io(); end

  def read(len, dest=T.unsafe(nil), ignore_eof=T.unsafe(nil)); end

  def read_all(dest=T.unsafe(nil)); end

  def read_timeout(); end

  def read_timeout=(read_timeout); end

  def readline(); end

  def readuntil(terminator, ignore_eof=T.unsafe(nil)); end

  def write(*strs); end

  def write_timeout(); end

  def write_timeout=(write_timeout); end

  def writeline(str); end
  BUFSIZE = ::T.let(nil, ::T.untyped)
end

class Gem::Net::BufferedIO
end

class Gem::Net::HTTP
  def active?(); end

  def address(); end

  def ca_file(); end

  def ca_file=(ca_file); end

  def ca_path(); end

  def ca_path=(ca_path); end

  def cert(); end

  def cert=(cert); end

  def cert_store(); end

  def cert_store=(cert_store); end

  def ciphers(); end

  def ciphers=(ciphers); end

  def close_on_empty_response(); end

  def close_on_empty_response=(close_on_empty_response); end

  def continue_timeout(); end

  def continue_timeout=(sec); end

  def copy(path, initheader=T.unsafe(nil)); end

  def delete(path, initheader=T.unsafe(nil)); end

  def extra_chain_cert(); end

  def extra_chain_cert=(extra_chain_cert); end

  def finish(); end

  def get(path, initheader=T.unsafe(nil), dest=T.unsafe(nil), &block); end

  def get2(path, initheader=T.unsafe(nil), &block); end

  def head(path, initheader=T.unsafe(nil)); end

  def head2(path, initheader=T.unsafe(nil), &block); end

  def ignore_eof(); end

  def ignore_eof=(ignore_eof); end

  def initialize(address, port=T.unsafe(nil)); end

  def ipaddr(); end

  def ipaddr=(addr); end

  def keep_alive_timeout(); end

  def keep_alive_timeout=(keep_alive_timeout); end

  def key(); end

  def key=(key); end

  def local_host(); end

  def local_host=(local_host); end

  def local_port(); end

  def local_port=(local_port); end

  def lock(path, body, initheader=T.unsafe(nil)); end

  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def mkcol(path, body=T.unsafe(nil), initheader=T.unsafe(nil)); end

  def move(path, initheader=T.unsafe(nil)); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def options(path, initheader=T.unsafe(nil)); end

  def patch(path, data, initheader=T.unsafe(nil), dest=T.unsafe(nil), &block); end

  def peer_cert(); end

  def port(); end

  def post(path, data, initheader=T.unsafe(nil), dest=T.unsafe(nil), &block); end

  def post2(path, data, initheader=T.unsafe(nil), &block); end

  def propfind(path, body=T.unsafe(nil), initheader=T.unsafe(nil)); end

  def proppatch(path, body, initheader=T.unsafe(nil)); end

  def proxy?(); end

  def proxy_address(); end

  def proxy_address=(proxy_address); end

  def proxy_from_env=(proxy_from_env); end

  def proxy_from_env?(); end

  def proxy_pass(); end

  def proxy_pass=(proxy_pass); end

  def proxy_port(); end

  def proxy_port=(proxy_port); end

  def proxy_uri(); end

  def proxy_use_ssl=(proxy_use_ssl); end

  def proxy_user(); end

  def proxy_user=(proxy_user); end

  def proxyaddr(); end

  def proxyport(); end

  def put(path, data, initheader=T.unsafe(nil)); end

  def put2(path, data, initheader=T.unsafe(nil), &block); end

  def read_timeout(); end

  def read_timeout=(sec); end

  def request(req, body=T.unsafe(nil), &block); end

  def request_get(path, initheader=T.unsafe(nil), &block); end

  def request_head(path, initheader=T.unsafe(nil), &block); end

  def request_post(path, data, initheader=T.unsafe(nil), &block); end

  def request_put(path, data, initheader=T.unsafe(nil), &block); end

  def response_body_encoding(); end

  def response_body_encoding=(value); end

  def send_request(name, path, data=T.unsafe(nil), header=T.unsafe(nil)); end

  def set_debug_output(output); end

  def ssl_timeout(); end

  def ssl_timeout=(ssl_timeout); end

  def ssl_version(); end

  def ssl_version=(ssl_version); end

  def start(); end

  def started?(); end

  def trace(path, initheader=T.unsafe(nil)); end

  def unlock(path, body, initheader=T.unsafe(nil)); end

  def use_ssl=(flag); end

  def use_ssl?(); end

  def verify_callback(); end

  def verify_callback=(verify_callback); end

  def verify_depth(); end

  def verify_depth=(verify_depth); end

  def verify_hostname(); end

  def verify_hostname=(verify_hostname); end

  def verify_mode(); end

  def verify_mode=(verify_mode); end

  def write_timeout(); end

  def write_timeout=(sec); end
  HAVE_ZLIB = ::T.let(nil, ::T.untyped)
  HTTPVersion = ::T.let(nil, ::T.untyped)
  IDEMPOTENT_METHODS_ = ::T.let(nil, ::T.untyped)
  SSL_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SSL_IVNAMES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Copy
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Copy
end

class Gem::Net::HTTP::Delete
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Delete
end

class Gem::Net::HTTP::Get
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Get
end

class Gem::Net::HTTP::Head
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Head
end

class Gem::Net::HTTP::Lock
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Lock
end

class Gem::Net::HTTP::Mkcol
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Mkcol
end

class Gem::Net::HTTP::Move
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Move
end

class Gem::Net::HTTP::Options
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Options
end

class Gem::Net::HTTP::Patch
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Patch
end

class Gem::Net::HTTP::Persistent
  def ca_file(); end

  def ca_file=(file); end

  def ca_path(); end

  def ca_path=(path); end

  def cert(); end

  def cert=(certificate); end

  def cert_store(); end

  def cert_store=(store); end

  def certificate(); end

  def certificate=(certificate); end

  def ciphers(); end

  def ciphers=(ciphers); end

  def connection_for(uri); end

  def debug_output(); end

  def debug_output=(debug_output); end

  def escape(str); end

  def expired?(connection); end

  def finish(connection); end

  def generation(); end

  def headers(); end

  def http_version(uri); end

  def http_versions(); end

  def idle_timeout(); end

  def idle_timeout=(idle_timeout); end

  def initialize(name: T.unsafe(nil), proxy: T.unsafe(nil), pool_size: T.unsafe(nil)); end

  def keep_alive(); end

  def keep_alive=(keep_alive); end

  def key(); end

  def key=(key); end

  def max_requests(); end

  def max_requests=(max_requests); end

  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def name(); end

  def no_proxy(); end

  def normalize_uri(uri); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def override_headers(); end

  def pool(); end

  def private_key(); end

  def private_key=(key); end

  def proxy=(proxy); end

  def proxy_bypass?(host, port); end

  def proxy_from_env(); end

  def proxy_uri(); end

  def read_timeout(); end

  def read_timeout=(read_timeout); end

  def reconnect(); end

  def reconnect_ssl(); end

  def request(uri, req=T.unsafe(nil), &block); end

  def request_setup(req_or_uri); end

  def reset(connection); end

  def reuse_ssl_sessions(); end

  def reuse_ssl_sessions=(reuse_ssl_sessions); end

  def shutdown(); end

  def socket_options(); end

  def ssl(connection); end

  def ssl_generation(); end

  def ssl_timeout(); end

  def ssl_timeout=(ssl_timeout); end

  def ssl_version(); end

  def ssl_version=(ssl_version); end

  def start(http); end

  def timeout_key(); end

  def unescape(str); end

  def verify_callback(); end

  def verify_callback=(callback); end

  def verify_depth(); end

  def verify_depth=(verify_depth); end

  def verify_hostname(); end

  def verify_hostname=(verify_hostname); end

  def verify_mode(); end

  def verify_mode=(verify_mode); end

  def write_timeout(); end

  def write_timeout=(write_timeout); end
  DEFAULT_POOL_SIZE = ::T.let(nil, ::T.untyped)
  EPOCH = ::T.let(nil, ::T.untyped)
  HAVE_OPENSSL = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Persistent::Connection
  def close(); end

  def finish(); end

  def http(); end

  def http=(http); end

  def initialize(http_class, http_args, ssl_generation); end

  def last_use(); end

  def last_use=(last_use); end

  def requests(); end

  def requests=(requests); end

  def reset(); end

  def ressl(ssl_generation); end

  def ssl_generation(); end

  def ssl_generation=(ssl_generation); end
end

class Gem::Net::HTTP::Persistent::Connection
end

class Gem::Net::HTTP::Persistent::Error
end

class Gem::Net::HTTP::Persistent::Error
end

class Gem::Net::HTTP::Persistent::Pool
  def checkin(net_http_args); end

  def checkout(net_http_args); end

  def key(); end

  def shutdown(); end
end

class Gem::Net::HTTP::Persistent::Pool
end

class Gem::Net::HTTP::Persistent::TimedStackMulti
end

class Gem::Net::HTTP::Persistent::TimedStackMulti
  def self.hash_of_arrays(); end
end

class Gem::Net::HTTP::Persistent
  def self.detect_idle_timeout(uri, max=T.unsafe(nil)); end
end

class Gem::Net::HTTP::Post
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Post
end

class Gem::Net::HTTP::Propfind
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Propfind
end

class Gem::Net::HTTP::Proppatch
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Proppatch
end

module Gem::Net::HTTP::ProxyDelta
end

module Gem::Net::HTTP::ProxyDelta
end

class Gem::Net::HTTP::Put
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Put
end

class Gem::Net::HTTP::Trace
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Trace
end

class Gem::Net::HTTP::Unlock
  METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_HAS_BODY = ::T.let(nil, ::T.untyped)
  RESPONSE_HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTP::Unlock
end

class Gem::Net::HTTP
  def self.Proxy(p_addr=T.unsafe(nil), p_port=T.unsafe(nil), p_user=T.unsafe(nil), p_pass=T.unsafe(nil), p_use_ssl=T.unsafe(nil)); end

  def self.default_configuration(); end

  def self.default_configuration=(default_configuration); end

  def self.default_port(); end

  def self.get(uri_or_host, path_or_headers=T.unsafe(nil), port=T.unsafe(nil)); end

  def self.get_print(uri_or_host, path_or_headers=T.unsafe(nil), port=T.unsafe(nil)); end

  def self.get_response(uri_or_host, path_or_headers=T.unsafe(nil), port=T.unsafe(nil), &block); end

  def self.http_default_port(); end

  def self.https_default_port(); end

  def self.is_version_1_1?(); end

  def self.is_version_1_2?(); end

  def self.new(address, port=T.unsafe(nil), p_addr=T.unsafe(nil), p_port=T.unsafe(nil), p_user=T.unsafe(nil), p_pass=T.unsafe(nil), p_no_proxy=T.unsafe(nil), p_use_ssl=T.unsafe(nil)); end

  def self.newobj(*arg, **arg1); end

  def self.post(url, data, header=T.unsafe(nil)); end

  def self.post_form(url, params); end

  def self.proxy_address(); end

  def self.proxy_class?(); end

  def self.proxy_pass(); end

  def self.proxy_port(); end

  def self.proxy_use_ssl(); end

  def self.proxy_user(); end

  def self.put(url, data, header=T.unsafe(nil)); end

  def self.socket_type(); end

  def self.start(address, *arg, &block); end

  def self.version_1_1?(); end

  def self.version_1_2(); end

  def self.version_1_2?(); end
end

class Gem::Net::HTTPAccepted
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPAccepted
end

class Gem::Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPAlreadyReported
end

class Gem::Net::HTTPBadGateway
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPBadGateway
end

class Gem::Net::HTTPBadRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPBadRequest
end

class Gem::Net::HTTPBadResponse
end

class Gem::Net::HTTPBadResponse
end

class Gem::Net::HTTPClientError
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPClientError::EXCEPTION_TYPE = Gem::Net::HTTPClientException

class Gem::Net::HTTPClientError
end

class Gem::Net::HTTPClientException
  include ::Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPClientException
end

class Gem::Net::HTTPConflict
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPConflict
end

class Gem::Net::HTTPContinue
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPContinue
end

class Gem::Net::HTTPCreated
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPCreated
end

class Gem::Net::HTTPEarlyHints
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPEarlyHints
end

class Gem::Net::HTTPError
  include ::Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPError
end

module Gem::Net::HTTPExceptions
  def data(); end

  def initialize(msg, res); end

  def response(); end
end

module Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPExpectationFailed
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPExpectationFailed
end

class Gem::Net::HTTPFailedDependency
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPFailedDependency
end

class Gem::Net::HTTPFatalError
  include ::Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPFatalError
end

class Gem::Net::HTTPForbidden
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPForbidden
end

class Gem::Net::HTTPFound
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPFound
end

Gem::Net::HTTPGatewayTimeOut = Gem::Net::HTTPGatewayTimeout

class Gem::Net::HTTPGatewayTimeout
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPGatewayTimeout
end

class Gem::Net::HTTPGenericRequest
  include ::Gem::Net::HTTPHeader
  def body(); end

  def body=(str); end

  def body_exist?(); end

  def body_stream(); end

  def body_stream=(input); end

  def decode_content(); end

  def exec(sock, ver, path); end

  def initialize(m, reqbody, resbody, uri_or_path, initheader=T.unsafe(nil)); end

  def method(); end

  def path(); end

  def request_body_permitted?(); end

  def response_body_permitted?(); end

  def set_body_internal(str); end

  def update_uri(addr, port, ssl); end

  def uri(); end
end

class Gem::Net::HTTPGenericRequest::Chunker
  def finish(); end

  def initialize(sock); end

  def write(buf); end
end

class Gem::Net::HTTPGenericRequest::Chunker
end

class Gem::Net::HTTPGenericRequest
end

class Gem::Net::HTTPGone
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPGone
end

module Gem::Net::HTTPHeader
  def [](key); end

  def []=(key, val); end

  def add_field(key, val); end

  def basic_auth(account, password); end

  def canonical_each(); end

  def chunked?(); end

  def connection_close?(); end

  def connection_keep_alive?(); end

  def content_length(); end

  def content_length=(len); end

  def content_range(); end

  def content_type(); end

  def content_type=(type, params=T.unsafe(nil)); end

  def delete(key); end

  def each(&blk); end

  def each_capitalized(); end

  def each_capitalized_name(); end

  def each_header(); end

  def each_key(&block); end

  def each_name(&block); end

  def each_value(); end

  def fetch(key, *args, &block); end

  def form_data=(params, sep=T.unsafe(nil)); end

  def get_fields(key); end

  def initialize_http_header(initheader); end

  def key?(key); end

  def length(); end

  def main_type(); end

  def proxy_basic_auth(account, password); end

  def range(); end

  def range=(r, e=T.unsafe(nil)); end

  def range_length(); end

  def set_content_type(type, params=T.unsafe(nil)); end

  def set_form(params, enctype=T.unsafe(nil), formopt=T.unsafe(nil)); end

  def set_form_data(params, sep=T.unsafe(nil)); end

  def set_range(r, e=T.unsafe(nil)); end

  def size(); end

  def sub_type(); end

  def to_hash(); end

  def type_params(); end
  MAX_FIELD_LENGTH = ::T.let(nil, ::T.untyped)
  MAX_KEY_LENGTH = ::T.let(nil, ::T.untyped)
end

module Gem::Net::HTTPHeader
end

class Gem::Net::HTTPHeaderSyntaxError
end

class Gem::Net::HTTPHeaderSyntaxError
end

class Gem::Net::HTTPIMUsed
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPIMUsed
end

class Gem::Net::HTTPInformation
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPInformation::EXCEPTION_TYPE = Gem::Net::HTTPError

class Gem::Net::HTTPInformation
end

class Gem::Net::HTTPInsufficientStorage
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPInsufficientStorage
end

class Gem::Net::HTTPInternalServerError
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPInternalServerError
end

class Gem::Net::HTTPLengthRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPLengthRequired
end

class Gem::Net::HTTPLocked
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPLocked
end

class Gem::Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPLoopDetected
end

class Gem::Net::HTTPMethodNotAllowed
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMethodNotAllowed
end

class Gem::Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMisdirectedRequest
end

class Gem::Net::HTTPMovedPermanently
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMovedPermanently
end

Gem::Net::HTTPMovedTemporarily = Gem::Net::HTTPFound

class Gem::Net::HTTPMultiStatus
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMultiStatus
end

Gem::Net::HTTPMultipleChoice = Gem::Net::HTTPMultipleChoices

class Gem::Net::HTTPMultipleChoices
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPMultipleChoices
end

class Gem::Net::HTTPNetworkAuthenticationRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNetworkAuthenticationRequired
end

class Gem::Net::HTTPNoContent
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNoContent
end

class Gem::Net::HTTPNonAuthoritativeInformation
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNonAuthoritativeInformation
end

class Gem::Net::HTTPNotAcceptable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotAcceptable
end

class Gem::Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotExtended
end

class Gem::Net::HTTPNotFound
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotFound
end

class Gem::Net::HTTPNotImplemented
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotImplemented
end

class Gem::Net::HTTPNotModified
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPNotModified
end

class Gem::Net::HTTPOK
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPOK
end

class Gem::Net::HTTPPartialContent
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPartialContent
end

class Gem::Net::HTTPPayloadTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPayloadTooLarge
end

class Gem::Net::HTTPPaymentRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPaymentRequired
end

class Gem::Net::HTTPPermanentRedirect
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPermanentRedirect
end

class Gem::Net::HTTPPreconditionFailed
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPreconditionFailed
end

class Gem::Net::HTTPPreconditionRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPPreconditionRequired
end

class Gem::Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPProcessing
end

class Gem::Net::HTTPProxyAuthenticationRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPProxyAuthenticationRequired
end

class Gem::Net::HTTPRangeNotSatisfiable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPRangeNotSatisfiable
end

class Gem::Net::HTTPRedirection
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPRedirection::EXCEPTION_TYPE = Gem::Net::HTTPRetriableError

class Gem::Net::HTTPRedirection
end

class Gem::Net::HTTPRequest
  def initialize(path, initheader=T.unsafe(nil)); end
end

class Gem::Net::HTTPRequest
end

Gem::Net::HTTPRequestEntityTooLarge = Gem::Net::HTTPPayloadTooLarge

class Gem::Net::HTTPRequestHeaderFieldsTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPRequestHeaderFieldsTooLarge
end

Gem::Net::HTTPRequestTimeOut = Gem::Net::HTTPRequestTimeout

class Gem::Net::HTTPRequestTimeout
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPRequestTimeout
end

Gem::Net::HTTPRequestURITooLarge = Gem::Net::HTTPURITooLong

Gem::Net::HTTPRequestURITooLong = Gem::Net::HTTPURITooLong

Gem::Net::HTTPRequestedRangeNotSatisfiable = Gem::Net::HTTPRangeNotSatisfiable

class Gem::Net::HTTPResetContent
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPResetContent
end

class Gem::Net::HTTPResponse
  include ::Gem::Net::HTTPHeader
  def body(); end

  def body=(value); end

  def body_encoding(); end

  def body_encoding=(value); end

  def code(); end

  def code_type(); end

  def decode_content(); end

  def decode_content=(decode_content); end

  def entity(); end

  def error!(); end

  def error_type(); end

  def header(); end

  def http_version(); end

  def ignore_eof(); end

  def ignore_eof=(ignore_eof); end

  def initialize(httpv, code, msg); end

  def message(); end

  def msg(); end

  def read_body(dest=T.unsafe(nil), &block); end

  def read_header(); end

  def reading_body(sock, reqmethodallowbody); end

  def response(); end

  def uri(); end

  def uri=(uri); end

  def value(); end
  CODE_CLASS_TO_OBJ = ::T.let(nil, ::T.untyped)
  CODE_TO_OBJ = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPResponse::Inflater
  def bytes_inflated(); end

  def finish(); end

  def inflate_adapter(dest); end

  def initialize(socket); end

  def read(clen, dest, ignore_eof=T.unsafe(nil)); end

  def read_all(dest); end
end

class Gem::Net::HTTPResponse::Inflater
end

class Gem::Net::HTTPResponse
  def self.body_permitted?(); end

  def self.exception_type(); end

  def self.read_new(sock); end
end

class Gem::Net::HTTPRetriableError
  include ::Gem::Net::HTTPExceptions
end

class Gem::Net::HTTPRetriableError
end

class Gem::Net::HTTPSeeOther
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPSeeOther
end

class Gem::Net::HTTPServerError
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPServerError::EXCEPTION_TYPE = Gem::Net::HTTPFatalError

class Gem::Net::HTTPServerError
end

Gem::Net::HTTPServerException = Gem::Net::HTTPClientException

class Gem::Net::HTTPServiceUnavailable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPServiceUnavailable
end

Gem::Net::HTTPSession = Gem::Net::HTTP

class Gem::Net::HTTPSuccess
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPSuccess::EXCEPTION_TYPE = Gem::Net::HTTPError

class Gem::Net::HTTPSuccess
end

class Gem::Net::HTTPSwitchProtocol
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPSwitchProtocol
end

class Gem::Net::HTTPTemporaryRedirect
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPTemporaryRedirect
end

class Gem::Net::HTTPTooManyRequests
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPTooManyRequests
end

class Gem::Net::HTTPURITooLong
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPURITooLong
end

class Gem::Net::HTTPUnauthorized
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUnauthorized
end

class Gem::Net::HTTPUnavailableForLegalReasons
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUnavailableForLegalReasons
end

class Gem::Net::HTTPUnknownResponse
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

Gem::Net::HTTPUnknownResponse::EXCEPTION_TYPE = Gem::Net::HTTPError

class Gem::Net::HTTPUnknownResponse
end

class Gem::Net::HTTPUnprocessableEntity
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUnprocessableEntity
end

class Gem::Net::HTTPUnsupportedMediaType
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUnsupportedMediaType
end

class Gem::Net::HTTPUpgradeRequired
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUpgradeRequired
end

class Gem::Net::HTTPUseProxy
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPUseProxy
end

class Gem::Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPVariantAlsoNegotiates
end

class Gem::Net::HTTPVersionNotSupported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Gem::Net::HTTPVersionNotSupported
end

class Gem::Net::InternetMessageIO
  def each_list_item(); end

  def each_message_chunk(); end

  def initialize(*arg, **arg1); end

  def write_message(src); end

  def write_message_0(src); end

  def write_message_by_block(&block); end
end

class Gem::Net::InternetMessageIO
end

module Gem::Net::NetPrivate
end

Gem::Net::NetPrivate::Socket = Gem::Net::InternetMessageIO

module Gem::Net::NetPrivate
end

class Gem::Net::OpenTimeout
end

class Gem::Net::OpenTimeout
end

class Gem::Net::ProtoAuthError
end

class Gem::Net::ProtoAuthError
end

class Gem::Net::ProtoCommandError
end

class Gem::Net::ProtoCommandError
end

class Gem::Net::ProtoFatalError
end

class Gem::Net::ProtoFatalError
end

class Gem::Net::ProtoRetriableError
end

class Gem::Net::ProtoRetriableError
end

class Gem::Net::ProtoServerError
end

class Gem::Net::ProtoServerError
end

class Gem::Net::ProtoSyntaxError
end

class Gem::Net::ProtoSyntaxError
end

class Gem::Net::ProtoUnknownError
end

class Gem::Net::ProtoUnknownError
end

Gem::Net::ProtocRetryError = Gem::Net::ProtoRetriableError

class Gem::Net::Protocol
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Net::Protocol
  def self.protocol_param(name, val); end
end

class Gem::Net::ProtocolError
end

class Gem::Net::ProtocolError
end

class Gem::Net::ReadAdapter
  def <<(str); end

  def initialize(block); end
end

class Gem::Net::ReadAdapter
end

class Gem::Net::ReadTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class Gem::Net::ReadTimeout
end

class Gem::Net::WriteAdapter
  def <<(str); end

  def initialize(writer); end

  def print(str); end

  def printf(*args); end

  def puts(str=T.unsafe(nil)); end

  def write(str); end
end

class Gem::Net::WriteAdapter
end

class Gem::Net::WriteTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class Gem::Net::WriteTimeout
end

module Gem::Net
end

class Gem::Package
  def copy_stream(src, dst); end

  def gem(); end

  def limit_read(io, name, limit); end
end

class Gem::Package::DigestIO
  def digests(); end

  def initialize(io, digests); end

  def write(data); end
end

class Gem::Package::DigestIO
  def self.wrap(io, digests); end
end

class Gem::Package::FileSource
  def initialize(path); end

  def path(); end

  def start(); end

  def with_read_io(&block); end

  def with_write_io(&block); end
end

class Gem::Package::FileSource
end

class Gem::Package::IOSource
  def initialize(io); end

  def io(); end

  def path(); end

  def start(); end

  def with_read_io(); end

  def with_write_io(); end
end

class Gem::Package::IOSource
end

class Gem::Package::Old
  def extract_files(destination_dir); end

  def file_list(io); end

  def read_until_dashes(io); end

  def skip_ruby(io); end
end

class Gem::Package::Old
end

class Gem::Package::Source
end

class Gem::Package::Source
end

class Gem::Package::SymlinkError
  def initialize(name, destination, destination_dir); end
end

class Gem::Package::SymlinkError
end

class Gem::Package::TarHeader
  def ==(other); end

  def checksum(); end

  def devmajor(); end

  def devminor(); end

  def empty?(); end

  def full_name(); end

  def gid(); end

  def gname(); end

  def initialize(vals); end

  def linkname(); end

  def magic(); end

  def mode(); end

  def mtime(); end

  def name(); end

  def prefix(); end

  def size(); end

  def typeflag(); end

  def uid(); end

  def uname(); end

  def update_checksum(); end

  def version(); end
  EMPTY_HEADER = ::T.let(nil, ::T.untyped)
  FIELDS = ::T.let(nil, ::T.untyped)
  PACK_FORMAT = ::T.let(nil, ::T.untyped)
  UNPACK_FORMAT = ::T.let(nil, ::T.untyped)
end

class Gem::Package::TarHeader
  def self.from(stream); end

  def self.oct_or_256based(str); end

  def self.strict_oct(str); end
end

class Gem::Package::TarReader::Entry
  def check_closed(); end
end

class Gem::Package::TarReader
  def self.new(io); end
end

class Gem::Package::TarWriter
  def self.new(io); end
end

class Gem::Package
  def self.new(gem, security_policy=T.unsafe(nil)); end

  def self.raw_spec(path, security_policy=T.unsafe(nil)); end
end

class Gem::PathSupport
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::Platform
  def normalized_linux_version(); end

  def normalized_linux_version_ext(); end
  WINDOWS = ::T.let(nil, ::T.untyped)
  X64_LINUX = ::T.let(nil, ::T.untyped)
  X64_LINUX_MUSL = ::T.let(nil, ::T.untyped)
end

class Gem::Platform
  def self._deprecated_match(platform); end

  def self.match_gem?(platform, gem_name); end

  def self.match_spec?(spec); end

  def self.sort_priority(platform); end
end

class Gem::RequestSet
  include ::Gem::TSort
end

class Gem::RequestSet::Lockfile::Tokenizer::Token
  def self.keyword_init?(); end
end

class Gem::Requirement
  def _sorted_requirements(); end
end

class Gem::Resolv
  def each_address(name); end

  def each_name(address); end

  def getaddress(name); end

  def getaddresses(name); end

  def getname(address); end

  def getnames(address); end

  def initialize(resolvers=T.unsafe(nil), use_ipv6: T.unsafe(nil)); end
  AddressRegex = ::T.let(nil, ::T.untyped)
  DefaultResolver = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS
  def close(); end

  def each_address(name); end

  def each_name(address); end

  def each_resource(name, typeclass, &proc); end

  def extract_resources(msg, name, typeclass); end

  def fetch_resource(name, typeclass); end

  def getaddress(name); end

  def getaddresses(name); end

  def getname(address); end

  def getnames(address); end

  def getresource(name, typeclass); end

  def getresources(name, typeclass); end

  def initialize(config_info=T.unsafe(nil)); end

  def lazy_initialize(); end

  def make_tcp_requester(host, port); end

  def make_udp_requester(); end

  def timeouts=(values); end
  Port = ::T.let(nil, ::T.untyped)
  RequestID = ::T.let(nil, ::T.untyped)
  RequestIDMutex = ::T.let(nil, ::T.untyped)
  UDPSize = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Config
  def generate_candidates(name); end

  def generate_timeouts(); end

  def initialize(config_info=T.unsafe(nil)); end

  def lazy_initialize(); end

  def nameserver_port(); end

  def resolv(name); end

  def single?(); end

  def timeouts=(values); end

  def use_ipv6?(); end
  InitialTimeout = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Config::NXDomain
end

class Gem::Resolv::DNS::Config::NXDomain
end

class Gem::Resolv::DNS::Config::OtherResolvError
end

class Gem::Resolv::DNS::Config::OtherResolvError
end

class Gem::Resolv::DNS::Config
  def self.default_config_hash(filename=T.unsafe(nil)); end

  def self.parse_resolv_conf(filename); end
end

class Gem::Resolv::DNS::DecodeError
end

class Gem::Resolv::DNS::DecodeError
end

class Gem::Resolv::DNS::EncodeError
end

class Gem::Resolv::DNS::EncodeError
end

module Gem::Resolv::DNS::Label
end

class Gem::Resolv::DNS::Label::Str
  def ==(other); end

  def downcase(); end

  def eql?(other); end

  def initialize(string); end

  def string(); end
end

class Gem::Resolv::DNS::Label::Str
end

module Gem::Resolv::DNS::Label
  def self.split(arg); end
end

class Gem::Resolv::DNS::Message
  def ==(other); end

  def aa(); end

  def aa=(aa); end

  def add_additional(name, ttl, data); end

  def add_answer(name, ttl, data); end

  def add_authority(name, ttl, data); end

  def add_question(name, typeclass); end

  def additional(); end

  def answer(); end

  def authority(); end

  def each_additional(); end

  def each_answer(); end

  def each_authority(); end

  def each_question(); end

  def each_resource(); end

  def encode(); end

  def id(); end

  def id=(id); end

  def initialize(id=T.unsafe(nil)); end

  def opcode(); end

  def opcode=(opcode); end

  def qr(); end

  def qr=(qr); end

  def question(); end

  def ra(); end

  def ra=(ra); end

  def rcode(); end

  def rcode=(rcode); end

  def rd(); end

  def rd=(rd); end

  def tc(); end

  def tc=(tc); end
end

class Gem::Resolv::DNS::Message::MessageDecoder
  def get_bytes(len=T.unsafe(nil)); end

  def get_label(); end

  def get_labels(); end

  def get_length16(); end

  def get_list(); end

  def get_name(); end

  def get_question(); end

  def get_rr(); end

  def get_string(); end

  def get_string_list(); end

  def get_unpack(template); end

  def initialize(data); end
end

class Gem::Resolv::DNS::Message::MessageDecoder
end

class Gem::Resolv::DNS::Message::MessageEncoder
  def put_bytes(d); end

  def put_label(d); end

  def put_labels(d, compress: T.unsafe(nil)); end

  def put_length16(); end

  def put_name(d, compress: T.unsafe(nil)); end

  def put_pack(template, *d); end

  def put_string(d); end

  def put_string_list(ds); end
end

class Gem::Resolv::DNS::Message::MessageEncoder
end

class Gem::Resolv::DNS::Message
  def self.decode(m); end
end

class Gem::Resolv::DNS::Name
  def ==(other); end

  def [](i); end

  def absolute?(); end

  def eql?(other); end

  def initialize(labels, absolute=T.unsafe(nil)); end

  def length(); end

  def subdomain_of?(other); end

  def to_a(); end
end

class Gem::Resolv::DNS::Name
  def self.create(arg); end
end

module Gem::Resolv::DNS::OpCode
  IQuery = ::T.let(nil, ::T.untyped)
  Notify = ::T.let(nil, ::T.untyped)
  Query = ::T.let(nil, ::T.untyped)
  Status = ::T.let(nil, ::T.untyped)
  Update = ::T.let(nil, ::T.untyped)
end

module Gem::Resolv::DNS::OpCode
end

class Gem::Resolv::DNS::Query
  def encode_rdata(msg); end
end

class Gem::Resolv::DNS::Query
  def self.decode_rdata(msg); end
end

module Gem::Resolv::DNS::RCode
  BADALG = ::T.let(nil, ::T.untyped)
  BADKEY = ::T.let(nil, ::T.untyped)
  BADMODE = ::T.let(nil, ::T.untyped)
  BADNAME = ::T.let(nil, ::T.untyped)
  BADSIG = ::T.let(nil, ::T.untyped)
  BADTIME = ::T.let(nil, ::T.untyped)
  BADVERS = ::T.let(nil, ::T.untyped)
  FormErr = ::T.let(nil, ::T.untyped)
  NXDomain = ::T.let(nil, ::T.untyped)
  NXRRSet = ::T.let(nil, ::T.untyped)
  NoError = ::T.let(nil, ::T.untyped)
  NotAuth = ::T.let(nil, ::T.untyped)
  NotImp = ::T.let(nil, ::T.untyped)
  NotZone = ::T.let(nil, ::T.untyped)
  Refused = ::T.let(nil, ::T.untyped)
  ServFail = ::T.let(nil, ::T.untyped)
  YXDomain = ::T.let(nil, ::T.untyped)
  YXRRSet = ::T.let(nil, ::T.untyped)
end

module Gem::Resolv::DNS::RCode
end

class Gem::Resolv::DNS::Requester
  def close(); end

  def request(sender, tout); end

  def sender_for(addr, msg); end
end

class Gem::Resolv::DNS::Requester::ConnectedUDP
  def initialize(host, port=T.unsafe(nil)); end

  def lazy_initialize(); end

  def recv_reply(readable_socks); end

  def sender(msg, data, host=T.unsafe(nil), port=T.unsafe(nil)); end
end

class Gem::Resolv::DNS::Requester::ConnectedUDP::Sender
  def data(); end

  def send(); end
end

class Gem::Resolv::DNS::Requester::ConnectedUDP::Sender
end

class Gem::Resolv::DNS::Requester::ConnectedUDP
end

class Gem::Resolv::DNS::Requester::MDNSOneShot
end

class Gem::Resolv::DNS::Requester::MDNSOneShot
end

class Gem::Resolv::DNS::Requester::RequestError
end

class Gem::Resolv::DNS::Requester::RequestError
end

class Gem::Resolv::DNS::Requester::Sender
  def initialize(msg, data, sock); end
end

class Gem::Resolv::DNS::Requester::Sender
end

class Gem::Resolv::DNS::Requester::TCP
  def initialize(host, port=T.unsafe(nil)); end

  def recv_reply(readable_socks); end

  def sender(msg, data, host=T.unsafe(nil), port=T.unsafe(nil)); end
end

class Gem::Resolv::DNS::Requester::TCP::Sender
  def data(); end

  def send(); end
end

class Gem::Resolv::DNS::Requester::TCP::Sender
end

class Gem::Resolv::DNS::Requester::TCP
end

class Gem::Resolv::DNS::Requester::UnconnectedUDP
  def initialize(*nameserver_port); end

  def lazy_initialize(); end

  def recv_reply(readable_socks); end

  def sender(msg, data, host, port=T.unsafe(nil)); end
end

class Gem::Resolv::DNS::Requester::UnconnectedUDP::Sender
  def data(); end

  def initialize(msg, data, sock, host, port); end

  def send(); end
end

class Gem::Resolv::DNS::Requester::UnconnectedUDP::Sender
end

class Gem::Resolv::DNS::Requester::UnconnectedUDP
end

class Gem::Resolv::DNS::Requester
end

class Gem::Resolv::DNS::Resource
  def ==(other); end

  def eql?(other); end

  def ttl(); end
  ClassHash = ::T.let(nil, ::T.untyped)
  ClassInsensitiveTypes = ::T.let(nil, ::T.untyped)
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::ANY
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::ANY
end

class Gem::Resolv::DNS::Resource::CAA
  def critical?(); end

  def flags(); end

  def initialize(flags, tag, value); end

  def tag(); end

  def value(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::CAA
end

class Gem::Resolv::DNS::Resource::CNAME
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::CNAME
end

class Gem::Resolv::DNS::Resource::DomainName
  def initialize(name); end

  def name(); end
end

class Gem::Resolv::DNS::Resource::DomainName
end

class Gem::Resolv::DNS::Resource::Generic
  def data(); end

  def initialize(data); end
end

class Gem::Resolv::DNS::Resource::Generic
  def self.create(type_value, class_value); end
end

class Gem::Resolv::DNS::Resource::HINFO
  def cpu(); end

  def initialize(cpu, os); end

  def os(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::HINFO
end

module Gem::Resolv::DNS::Resource::IN
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::A
  def address(); end

  def initialize(address); end
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::A
end

class Gem::Resolv::DNS::Resource::IN::AAAA
  def address(); end

  def initialize(address); end
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::AAAA
end

class Gem::Resolv::DNS::Resource::IN::ANY
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::ANY
end

class Gem::Resolv::DNS::Resource::IN::CAA
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::CAA
end

class Gem::Resolv::DNS::Resource::IN::CNAME
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::CNAME
end

class Gem::Resolv::DNS::Resource::IN::HINFO
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::HINFO
end

class Gem::Resolv::DNS::Resource::IN::HTTPS
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::HTTPS
end

class Gem::Resolv::DNS::Resource::IN::LOC
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::LOC
end

class Gem::Resolv::DNS::Resource::IN::MINFO
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::MINFO
end

class Gem::Resolv::DNS::Resource::IN::MX
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::MX
end

class Gem::Resolv::DNS::Resource::IN::NS
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::NS
end

class Gem::Resolv::DNS::Resource::IN::PTR
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::PTR
end

class Gem::Resolv::DNS::Resource::IN::SOA
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::SOA
end

class Gem::Resolv::DNS::Resource::IN::SRV
  def initialize(priority, weight, port, target); end

  def port(); end

  def priority(); end

  def target(); end

  def weight(); end
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::SRV
end

class Gem::Resolv::DNS::Resource::IN::SVCB
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::SVCB
end

class Gem::Resolv::DNS::Resource::IN::ServiceBinding
  def alias_mode?(); end

  def encode_rdata(msg); end

  def initialize(priority, target, params=T.unsafe(nil)); end

  def params(); end

  def priority(); end

  def service_mode?(); end

  def target(); end
end

class Gem::Resolv::DNS::Resource::IN::ServiceBinding
  def self.decode_rdata(msg); end
end

class Gem::Resolv::DNS::Resource::IN::TXT
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::TXT
end

class Gem::Resolv::DNS::Resource::IN::WKS
  def address(); end

  def bitmap(); end

  def initialize(address, protocol, bitmap); end

  def protocol(); end
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::IN::WKS
end

module Gem::Resolv::DNS::Resource::IN
end

class Gem::Resolv::DNS::Resource::LOC
  def altitude(); end

  def hprecision(); end

  def initialize(version, ssize, hprecision, vprecision, latitude, longitude, altitude); end

  def latitude(); end

  def longitude(); end

  def ssize(); end

  def version(); end

  def vprecision(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::LOC
end

class Gem::Resolv::DNS::Resource::MINFO
  def emailbx(); end

  def initialize(rmailbx, emailbx); end

  def rmailbx(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::MINFO
end

class Gem::Resolv::DNS::Resource::MX
  def exchange(); end

  def initialize(preference, exchange); end

  def preference(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::MX
end

class Gem::Resolv::DNS::Resource::NS
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::NS
end

class Gem::Resolv::DNS::Resource::PTR
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::PTR
end

class Gem::Resolv::DNS::Resource::SOA
  def expire(); end

  def initialize(mname, rname, serial, refresh, retry_, expire, minimum); end

  def minimum(); end

  def mname(); end

  def refresh(); end

  def retry(); end

  def rname(); end

  def serial(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::SOA
end

class Gem::Resolv::DNS::Resource::TXT
  def data(); end

  def initialize(first_string, *rest_strings); end

  def strings(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::Resource::TXT
end

class Gem::Resolv::DNS::Resource
  def self.get_class(type_value, class_value); end
end

class Gem::Resolv::DNS::SvcParam
  ClassHash = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::ALPN
  def encode(msg); end

  def initialize(protocol_ids); end

  def protocol_ids(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::ALPN
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::DoHPath
  def encode(msg); end

  def initialize(template); end

  def template(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::DoHPath
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::Generic
  def encode(msg); end

  def initialize(value); end

  def value(); end
end

class Gem::Resolv::DNS::SvcParam::Generic
  def self.create(key_number); end

  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::IPv4Hint
  def addresses(); end

  def encode(msg); end

  def initialize(addresses); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::IPv4Hint
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::IPv6Hint
  def addresses(); end

  def encode(msg); end

  def initialize(addresses); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::IPv6Hint
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::Mandatory
  def encode(msg); end

  def initialize(keys); end

  def keys(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::Mandatory
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::NoDefaultALPN
  def encode(msg); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::NoDefaultALPN
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam::Port
  def encode(msg); end

  def initialize(port); end

  def port(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::DNS::SvcParam::Port
  def self.decode(msg); end
end

class Gem::Resolv::DNS::SvcParam
  def self.key_name(); end

  def self.key_number(); end
end

class Gem::Resolv::DNS::SvcParams
  include ::Enumerable
  def [](key); end

  def add(param); end

  def count(); end

  def delete(key); end

  def each(&block); end

  def empty?(); end

  def encode(msg); end

  def initialize(params=T.unsafe(nil)); end
end

class Gem::Resolv::DNS::SvcParams
  def self.decode(msg); end
end

class Gem::Resolv::DNS
  def self.allocate_request_id(host, port); end

  def self.bind_random_port(udpsock, bind_host=T.unsafe(nil)); end

  def self.free_request_id(host, port, id); end

  def self.open(*args); end

  def self.random(arg); end
end

class Gem::Resolv::Hosts
  def each_address(name, &proc); end

  def each_name(address, &proc); end

  def getaddress(name); end

  def getaddresses(name); end

  def getname(address); end

  def getnames(address); end

  def initialize(filename=T.unsafe(nil)); end

  def lazy_initialize(); end
  DefaultFileName = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::Hosts
end

class Gem::Resolv::IPv4
  def ==(other); end

  def address(); end

  def eql?(other); end

  def initialize(address); end

  def to_name(); end
  Regex = ::T.let(nil, ::T.untyped)
  Regex256 = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::IPv4
  def self.create(arg); end
end

class Gem::Resolv::IPv6
  def ==(other); end

  def address(); end

  def eql?(other); end

  def initialize(address); end

  def to_name(); end
  Regex = ::T.let(nil, ::T.untyped)
  Regex_6Hex4Dec = ::T.let(nil, ::T.untyped)
  Regex_8Hex = ::T.let(nil, ::T.untyped)
  Regex_8HexLinkLocal = ::T.let(nil, ::T.untyped)
  Regex_CompressedHex = ::T.let(nil, ::T.untyped)
  Regex_CompressedHex4Dec = ::T.let(nil, ::T.untyped)
  Regex_CompressedHexLinkLocal = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::IPv6
  def self.create(arg); end
end

module Gem::Resolv::LOC
end

class Gem::Resolv::LOC::Alt
  def ==(other); end

  def altitude(); end

  def eql?(other); end

  def initialize(altitude); end
  Regex = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::LOC::Alt
  def self.create(arg); end
end

class Gem::Resolv::LOC::Coord
  def ==(other); end

  def coordinates(); end

  def eql?(other); end

  def initialize(coordinates, orientation); end

  def orientation(); end
  Regex = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::LOC::Coord
  def self.create(arg); end
end

class Gem::Resolv::LOC::Size
  def ==(other); end

  def eql?(other); end

  def initialize(scalar); end

  def scalar(); end
  Regex = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::LOC::Size
  def self.create(arg); end
end

module Gem::Resolv::LOC
end

class Gem::Resolv::MDNS
  AddressV4 = ::T.let(nil, ::T.untyped)
  AddressV6 = ::T.let(nil, ::T.untyped)
  Addresses = ::T.let(nil, ::T.untyped)
  Port = ::T.let(nil, ::T.untyped)
end

class Gem::Resolv::MDNS
end

class Gem::Resolv::ResolvError
end

class Gem::Resolv::ResolvError
end

class Gem::Resolv::ResolvTimeout
end

class Gem::Resolv::ResolvTimeout
end

class Gem::Resolv
  def self.each_address(name, &block); end

  def self.each_name(address, &proc); end

  def self.getaddress(name); end

  def self.getaddresses(name); end

  def self.getname(address); end

  def self.getnames(address); end
end

class Gem::Resolver
  include ::Gem::Molinillo::UI
  include ::Gem::Molinillo::SpecificationProvider
end

class Gem::Resolver::APISet::GemParser
  def parse(line); end
end

class Gem::Resolver::APISet::GemParser
end

class Gem::Resolver::APISpecification
  def self.new(set, api_data); end
end

class Gem::Resolver::ActivationRequest
  def eql?(other); end
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::IndexSpecification
  def ==(other); end
end

class Gem::Resolver::InstallerSet
  def force(); end

  def force=(force); end
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::Specification
  def required_ruby_version(); end

  def required_rubygems_version(); end
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

module Gem::SecureRandom
  VERSION = ::T.let(nil, ::T.untyped)
end

module Gem::SecureRandom
  extend ::Random::Formatter
  def self.bytes(n); end
end

module Gem::Security
  DEFAULT_KEY_ALGORITHM = ::T.let(nil, ::T.untyped)
  EC_NAME = ::T.let(nil, ::T.untyped)
  RSA_DSA_KEY_LENGTH = ::T.let(nil, ::T.untyped)
end

class Gem::Security::Signer
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def cert_chain(); end

  def cert_chain=(cert_chain); end

  def digest_algorithm(); end

  def digest_name(); end

  def extract_name(cert); end

  def initialize(key, cert_chain, passphrase=T.unsafe(nil), options=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def load_cert_chain(); end

  def options(); end

  def re_sign_key(expiration_length: T.unsafe(nil)); end

  def sign(data); end
end

class Gem::Security::Signer
  def self.re_sign_cert(expired_cert, expired_cert_path, private_key); end
end

class Gem::Security::TrustDir
  def cert_path(certificate); end

  def dir(); end

  def each_certificate(); end

  def initialize(dir, permissions=T.unsafe(nil)); end

  def issuer_of(certificate); end

  def load_certificate(certificate_file); end

  def name_path(name); end

  def trust_cert(certificate); end

  def verify(); end
end

module Gem::Security
  def self.alt_name_or_x509_entry(certificate, x509_entry); end

  def self.create_cert(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_cert_email(email, key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.create_cert_self_signed(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_digest(algorithm=T.unsafe(nil)); end

  def self.create_key(algorithm); end

  def self.email_to_name(email_address); end

  def self.get_public_key(key); end

  def self.re_sign(expired_certificate, private_key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.reset(); end

  def self.sign(certificate, signing_key, signing_cert, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.trust_dir(); end

  def self.trusted_certificates(&block); end

  def self.write(pemmable, path, permissions=T.unsafe(nil), passphrase=T.unsafe(nil), cipher=T.unsafe(nil)); end
end

class Gem::Source::Git
  def git_command(); end
end

class Gem::SpecFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def available_specs(type); end

  def detect(type=T.unsafe(nil)); end

  def initialize(sources=T.unsafe(nil)); end

  def latest_specs(); end

  def prerelease_specs(); end

  def search_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def sources(); end

  def spec_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def specs(); end

  def suggest_gems_from_name(gem_name, type=T.unsafe(nil), num_results=T.unsafe(nil)); end

  def tuples_for(source, type, gracefully_ignore=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  def self.fetcher(); end

  def self.fetcher=(fetcher); end
end

class Gem::Specification
  include ::Bundler::MatchMetadata
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  include ::Gem::Specification::AllowSettingSource
  def _deprecated_validate_dependencies(); end

  def _deprecated_validate_metadata(); end

  def _deprecated_validate_permissions(); end

  def deleted_gem?(); end

  def flatten_require_paths(); end

  def insecurely_materialized?(); end

  def removed_method_calls(); end

  def to_ruby(); end

  def validate_for_resolution(); end
  LATEST_RUBY_WITHOUT_PATCH_VERSIONS = ::T.let(nil, ::T.untyped)
  REMOVED_METHODS = ::T.let(nil, ::T.untyped)
end

module Gem::Specification::AllowSettingSource
  def source(); end

  def source=(source); end
end

module Gem::Specification::AllowSettingSource
end

class Gem::Specification
  extend ::Gem::Deprecate
  extend ::Enumerable
  def self.find_by_full_name(full_name); end

  def self.gemspec_stubs_in(dir, pattern); end

  def self.latest_spec_for(name); end

  def self.specification_record(); end

  def self.stubs_for_pattern(pattern, match_platform=T.unsafe(nil)); end
end

class Gem::SpecificationPolicy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def initialize(specification); end

  def packaging(); end

  def packaging=(packaging); end

  def validate(strict=T.unsafe(nil)); end

  def validate_dependencies(); end

  def validate_duplicate_dependencies(); end

  def validate_for_resolution(); end

  def validate_metadata(); end

  def validate_optional(strict); end

  def validate_permissions(); end

  def validate_required!(); end

  def validate_required_metadata!(); end

  def validate_required_ruby_version(); end
  HOMEPAGE_URI_PATTERN = ::T.let(nil, ::T.untyped)
  LAZY = ::T.let(nil, ::T.untyped)
  LAZY_PATTERN = ::T.let(nil, ::T.untyped)
  METADATA_LINK_KEYS = ::T.let(nil, ::T.untyped)
  SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  VALID_NAME_PATTERN = ::T.let(nil, ::T.untyped)
  VALID_URI_PATTERN = ::T.let(nil, ::T.untyped)
end

class Gem::SpecificationPolicy
end

class Gem::SpecificationRecord
  include ::Enumerable
  def add_spec(spec); end

  def all(); end

  def all=(specs); end

  def all_names(); end

  def each(&blk); end

  def find_active_stub_by_path(path); end

  def find_all_by_name(name, *requirements); end

  def find_by_path(path); end

  def find_inactive_by_path(path); end

  def initialize(dirs); end

  def latest_spec_for(name); end

  def latest_specs(prerelease); end

  def remove_spec(spec); end

  def stubs(); end

  def stubs_for(name); end

  def stubs_for_pattern(pattern, match_platform=T.unsafe(nil)); end
end

class Gem::SpecificationRecord
  def self.dirs_from(paths); end

  def self.from_path(path); end
end

class Gem::StubSpecification
  include ::Gem::BetterPermissionError
  def ==(other); end

  def build_extensions(); end

  def eql?(other); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def sort_obj(); end

  def spec(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

module Gem::TSort
  def each_strongly_connected_component(&block); end

  def each_strongly_connected_component_from(node, id_map=T.unsafe(nil), stack=T.unsafe(nil), &block); end

  def strongly_connected_components(); end

  def tsort(); end

  def tsort_each(&block); end

  def tsort_each_child(node); end

  def tsort_each_node(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::TSort::Cyclic
end

class Gem::TSort::Cyclic
end

module Gem::TSort
  def self.each_strongly_connected_component(each_node, each_child); end

  def self.each_strongly_connected_component_from(node, each_child, id_map=T.unsafe(nil), stack=T.unsafe(nil)); end

  def self.strongly_connected_components(each_node, each_child); end

  def self.tsort(each_node, each_child); end

  def self.tsort_each(each_node, each_child); end
end

class Gem::TargetRbConfig
  def [](key); end

  def initialize(rbconfig, path); end

  def path(); end
end

class Gem::TargetRbConfig
  def self.for_running_ruby(); end

  def self.from_path(rbconfig_path); end
end

module Gem::Timeout
  VERSION = ::T.let(nil, ::T.untyped)
end

class Gem::Timeout::Error
end

class Gem::Timeout::Error
  def self.handle_timeout(message); end
end

class Gem::Timeout::ExitException
  def exception(*arg); end
end

class Gem::Timeout::ExitException
end

module Gem::Timeout
  def self.ensure_timeout_thread_created(); end

  def self.timeout(sec, klass=T.unsafe(nil), message=T.unsafe(nil), &block); end
end

module Gem::URI
  ABS_PATH = ::T.let(nil, ::T.untyped)
  DEFAULT_PARSER = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  OPAQUE = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  RFC2396_PARSER = ::T.let(nil, ::T.untyped)
  RFC3986_PARSER = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TBLDECWWWCOMP_ = ::T.let(nil, ::T.untyped)
  TBLENCURICOMP_ = ::T.let(nil, ::T.untyped)
  TBLENCWWWCOMP_ = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_CODE = ::T.let(nil, ::T.untyped)
  WEB_ENCODINGS_ = ::T.let(nil, ::T.untyped)
end

class Gem::URI::BadURIError
end

class Gem::URI::BadURIError
end

class Gem::URI::Error
end

class Gem::URI::Error
end

class Gem::URI::FTP
  def set_typecode(v); end

  def typecode(); end

  def typecode=(typecode); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  TYPECODE = ::T.let(nil, ::T.untyped)
  TYPECODE_PREFIX = ::T.let(nil, ::T.untyped)
end

class Gem::URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class Gem::URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::File
end

class Gem::URI::Generic
  include ::Gem::URI
  def +(oth); end

  def -(oth); end

  def ==(oth); end

  def absolute(); end

  def absolute?(); end

  def coerce(oth); end

  def component(); end

  def component_ary(); end

  def decoded_password(); end

  def decoded_user(); end

  def default_port(); end

  def eql?(oth); end

  def find_proxy(env=T.unsafe(nil)); end

  def fragment(); end

  def fragment=(v); end

  def hierarchical?(); end

  def host(); end

  def host=(v); end

  def hostname(); end

  def hostname=(v); end

  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser=T.unsafe(nil), arg_check=T.unsafe(nil)); end

  def merge(oth); end

  def merge!(oth); end

  def normalize(); end

  def normalize!(); end

  def opaque(); end

  def opaque=(v); end

  def parser(); end

  def password(); end

  def password=(password); end

  def path(); end

  def path=(v); end

  def port(); end

  def port=(v); end

  def query(); end

  def query=(v); end

  def registry(); end

  def registry=(v); end

  def relative?(); end

  def route_from(oth); end

  def route_to(oth); end

  def scheme(); end

  def scheme=(v); end

  def select(*components); end

  def set_host(v); end

  def set_opaque(v); end

  def set_password(v); end

  def set_path(v); end

  def set_port(v); end

  def set_registry(v); end

  def set_scheme(v); end

  def set_user(v); end

  def set_userinfo(user, password=T.unsafe(nil)); end

  def to_str(); end

  def user(); end

  def user=(user); end

  def userinfo(); end

  def userinfo=(userinfo); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  USE_REGISTRY = ::T.let(nil, ::T.untyped)
end

class Gem::URI::Generic
  def self.build(args); end

  def self.build2(args); end

  def self.component(); end

  def self.default_port(); end

  def self.use_proxy?(hostname, addr, port, no_proxy); end

  def self.use_registry(); end
end

class Gem::URI::HTTP
  def authority(); end

  def origin(); end

  def request_uri(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::HTTP
end

class Gem::URI::HTTPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::HTTPS
end

class Gem::URI::InvalidComponentError
end

class Gem::URI::InvalidComponentError
end

class Gem::URI::InvalidURIError
end

class Gem::URI::InvalidURIError
end

class Gem::URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  SCOPE = ::T.let(nil, ::T.untyped)
  SCOPE_BASE = ::T.let(nil, ::T.untyped)
  SCOPE_ONE = ::T.let(nil, ::T.untyped)
  SCOPE_SUB = ::T.let(nil, ::T.untyped)
end

class Gem::URI::LDAP
end

class Gem::URI::LDAPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::LDAPS
end

class Gem::URI::MailTo
  include ::Gem::URI::RFC2396_REGEXP
  def headers(); end

  def headers=(v); end

  def initialize(*arg); end

  def set_headers(v); end

  def set_to(v); end

  def to(); end

  def to=(v); end

  def to_mailtext(); end

  def to_rfc822text(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  EMAIL_REGEXP = ::T.let(nil, ::T.untyped)
  HEADER_REGEXP = ::T.let(nil, ::T.untyped)
end

class Gem::URI::MailTo
end

Gem::URI::Parser = Gem::URI::RFC3986_Parser

class Gem::URI::RFC2396_Parser
  include ::Gem::URI::RFC2396_REGEXP
  def escape(str, unsafe=T.unsafe(nil)); end

  def extract(str, schemes=T.unsafe(nil)); end

  def initialize(opts=T.unsafe(nil)); end

  def join(*uris); end

  def make_regexp(schemes=T.unsafe(nil)); end

  def parse(uri); end

  def pattern(); end

  def regexp(); end

  def split(uri); end

  def unescape(str, escaped=T.unsafe(nil)); end
end

class Gem::URI::RFC2396_Parser
end

module Gem::URI::RFC2396_REGEXP
end

module Gem::URI::RFC2396_REGEXP::PATTERN
  ABS_PATH = ::T.let(nil, ::T.untyped)
  ABS_URI = ::T.let(nil, ::T.untyped)
  ALNUM = ::T.let(nil, ::T.untyped)
  ALPHA = ::T.let(nil, ::T.untyped)
  DOMLABEL = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HEX = ::T.let(nil, ::T.untyped)
  HIER_PART = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  HOSTNAME = ::T.let(nil, ::T.untyped)
  HOSTPORT = ::T.let(nil, ::T.untyped)
  IPV4ADDR = ::T.let(nil, ::T.untyped)
  IPV6ADDR = ::T.let(nil, ::T.untyped)
  IPV6REF = ::T.let(nil, ::T.untyped)
  NET_PATH = ::T.let(nil, ::T.untyped)
  OPAQUE_PART = ::T.let(nil, ::T.untyped)
  PATH_SEGMENTS = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REG_NAME = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  REL_SEGMENT = ::T.let(nil, ::T.untyped)
  REL_URI = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TOPLABEL = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  URIC = ::T.let(nil, ::T.untyped)
  URIC_NO_SLASH = ::T.let(nil, ::T.untyped)
  URI_REF = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  X_ABS_URI = ::T.let(nil, ::T.untyped)
  X_REL_URI = ::T.let(nil, ::T.untyped)
end

module Gem::URI::RFC2396_REGEXP::PATTERN
end

module Gem::URI::RFC2396_REGEXP
end

class Gem::URI::RFC3986_Parser
  def escape(str, unsafe=T.unsafe(nil)); end

  def extract(str, schemes=T.unsafe(nil), &block); end

  def join(*uris); end

  def make_regexp(schemes=T.unsafe(nil)); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end

  def unescape(str, escaped=T.unsafe(nil)); end
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  RFC3986_URI = ::T.let(nil, ::T.untyped)
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SEG = ::T.let(nil, ::T.untyped)
  SEG_NC = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
end

class Gem::URI::RFC3986_Parser
end

module Gem::URI::Util
end

module Gem::URI::Util
  def self.make_components_hash(klass, array_hash); end
end

class Gem::URI::WS
  def request_uri(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::WS
end

class Gem::URI::WSS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Gem::URI::WSS
end

module Gem::URI
  def self.const_missing(const); end

  def self.decode_uri_component(str, enc=T.unsafe(nil)); end

  def self.decode_www_form(str, enc=T.unsafe(nil), separator: T.unsafe(nil), use__charset_: T.unsafe(nil), isindex: T.unsafe(nil)); end

  def self.decode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.encode_uri_component(str, enc=T.unsafe(nil)); end

  def self.encode_www_form(enum, enc=T.unsafe(nil)); end

  def self.encode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.extract(str, schemes=T.unsafe(nil), &block); end

  def self.for(scheme, *arguments, default: T.unsafe(nil)); end

  def self.get_encoding(label); end

  def self.join(*str); end

  def self.parse(uri); end

  def self.parser=(parser=T.unsafe(nil)); end

  def self.regexp(schemes=T.unsafe(nil)); end

  def self.register_scheme(scheme, klass); end

  def self.scheme_list(); end

  def self.split(uri); end
end

class Gem::UninstallError
  def spec(); end

  def spec=(spec); end
end

class Gem::UninstallError
end

class Gem::UnknownCommandError
  def initialize(unknown_command); end

  def unknown_command(); end
end

class Gem::UnknownCommandError
  def self.attach_correctable(); end
end

class Gem::UnknownCommandSpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end
end

class Gem::UnknownCommandSpellChecker
end

class Gem::Uri
  def initialize(source_uri); end

  def method_missing(method_name, *args, &blk); end

  def parsed_uri(); end

  def redact_credentials_from(text); end

  def redacted(); end
end

class Gem::Uri
  def self.parse(uri); end

  def self.parse!(uri); end

  def self.redact(uri); end
end

module Gem::Util
  def self._deprecated_silent_system(*command); end
end

class Gem::Version
  def partition_segments(ver); end
end

Gem::Version::Requirement = Gem::Requirement

class Gem::WebauthnVerificationError
  def initialize(message); end
end

class Gem::WebauthnVerificationError
end

module Gem
  def self.activated_gem_paths(); end

  def self.cache_home(); end

  def self.config_home(); end

  def self.data_home(); end

  def self.default_user_install(); end

  def self.disable_system_update_message(); end

  def self.disable_system_update_message=(disable_system_update_message); end

  def self.discover_gems_on_require(); end

  def self.discover_gems_on_require=(discover_gems_on_require); end

  def self.dynamic_library_suffixes(); end

  def self.find_config_file(); end

  def self.find_default_spec(path); end

  def self.freebsd_platform?(); end

  def self.load_safe_marshal(); end

  def self.open_file(path, flags, &block); end

  def self.open_file_with_flock(path, &block); end

  def self.open_file_with_lock(path, &block); end

  def self.plugin_suffix_pattern(); end

  def self.plugin_suffix_regexp(); end

  def self.plugindir(install_dir=T.unsafe(nil)); end

  def self.set_target_rbconfig(rbconfig_path); end

  def self.solaris_platform?(); end

  def self.state_file(); end

  def self.state_home(); end

  def self.target_rbconfig(); end
end

module GlobalID::FixtureSet
  def global_id(fixture_set_name, label, column_type: T.unsafe(nil), **options); end

  def signed_global_id(fixture_set_name, label, column_type: T.unsafe(nil), **options); end
end

module GlobalID::Locator
  DEFAULT_LOCATOR = ::T.let(nil, ::T.untyped)
end

class GlobalID::Locator::BaseLocator
  def locate(gid, options=T.unsafe(nil)); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BaseLocator
end

class GlobalID::Locator::BlockLocator
  def initialize(block); end

  def locate(gid, options=T.unsafe(nil)); end

  def locate_many(gids, options=T.unsafe(nil)); end
end

class GlobalID::Locator::BlockLocator
end

class GlobalID::Locator::InvalidModelIdError
end

class GlobalID::Locator::InvalidModelIdError
end

class GlobalID::Locator::UnscopedLocator
end

class GlobalID::Locator::UnscopedLocator
end

module GlobalID::Locator
  def self.locate(gid, options=T.unsafe(nil)); end

  def self.locate_many(gids, options=T.unsafe(nil)); end

  def self.locate_many_signed(sgids, options=T.unsafe(nil)); end

  def self.locate_signed(sgid, options=T.unsafe(nil)); end

  def self.use(app, locator=T.unsafe(nil), &locator_block); end
end

class HTML_Truncator
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Hash
  def deconstruct_keys(arg); end
end

class Hash
  def self.from_trusted_xml(xml); end

  def self.from_xml(xml, disallowed_types=T.unsafe(nil)); end

  def self.ruby2_keywords_hash?(arg); end
end

module I18n
  DEFAULT_INTERPOLATION_PATTERNS = ::T.let(nil, ::T.untyped)
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
  INTERPOLATION_PATTERN = ::T.let(nil, ::T.untyped)
  RESERVED_KEYS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Cache
  def _fetch(cache_key, &block); end

  def cache_key(locale, key, options); end

  def fetch(cache_key, &block); end

  def translate(locale, key, options=T.unsafe(nil)); end
end

module I18n::Backend::Cache
end

module I18n::Backend::CacheFile
  def load_file(filename); end

  def normalized_path(file); end

  def path_roots(); end

  def path_roots=(path_roots); end
end

module I18n::Backend::CacheFile
end

module I18n::Backend::Cascade
  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end
end

module I18n::Backend::Cascade
end

class I18n::Backend::Chain
  include ::I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::Chain::Implementation
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def backends(); end

  def backends=(backends); end

  def eager_load!(); end

  def exists?(locale, key, options=T.unsafe(nil)); end

  def init_translations(); end

  def initialize(*backends); end

  def initialized?(); end

  def localize(locale, object, format=T.unsafe(nil), options=T.unsafe(nil)); end

  def namespace_lookup?(result, options); end

  def reload!(); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def translate(locale, key, default_options=T.unsafe(nil)); end

  def translations(); end
end

module I18n::Backend::Chain::Implementation
end

class I18n::Backend::Chain
end

module I18n::Backend::Flatten
  def escape_default_separator(key); end

  def find_link(locale, key); end

  def flatten_keys(hash, escape, prev_key=T.unsafe(nil), &block); end

  def flatten_translations(locale, data, escape, subtree); end

  def links(); end

  def normalize_flat_keys(locale, key, scope, separator); end

  def resolve_link(locale, key); end

  def store_link(locale, key, link); end
  FLATTEN_SEPARATOR = ::T.let(nil, ::T.untyped)
  SEPARATOR_ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Flatten
  def self.escape_default_separator(key); end

  def self.normalize_flat_keys(locale, key, scope, separator); end
end

module I18n::Backend::Gettext
  def load_po(filename); end

  def normalize(locale, data); end

  def normalize_pluralization(locale, key, value); end

  def parse(filename); end
end

class I18n::Backend::Gettext::PoData
  def set_comment(msgid_or_sym, comment); end
end

class I18n::Backend::Gettext::PoData
end

module I18n::Backend::Gettext
end

module I18n::Backend::InterpolationCompiler
  def compile_all_strings_in(data); end

  def interpolate(locale, string, values); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::InterpolationCompiler::Compiler
  def compile_if_an_interpolation(string); end

  def compile_interpolation_token(key); end

  def compiled_interpolation_body(str); end

  def direct_key(key); end

  def escape_key_sym(key); end

  def escape_plain_str(str); end

  def handle_interpolation_token(token); end

  def interpolate_key(key); end

  def interpolate_or_raise_missing(key); end

  def interpolated_str?(str); end

  def missing_key(key); end

  def nil_key(key); end

  def reserved_key(key); end

  def tokenize(str); end
  TOKENIZER = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::InterpolationCompiler::Compiler
  extend ::I18n::Backend::InterpolationCompiler::Compiler
end

module I18n::Backend::InterpolationCompiler
end

class I18n::Backend::KeyValue
  include ::I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
end

module I18n::Backend::KeyValue::Implementation
  include ::I18n::Backend::Flatten
  include ::I18n::Backend::Base
  include ::I18n::Backend::Transliterator
  def available_locales(); end

  def init_translations(); end

  def initialize(store, subtrees=T.unsafe(nil)); end

  def initialized?(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def store(); end

  def store=(store); end

  def store_translations(locale, data, options=T.unsafe(nil)); end

  def subtrees?(); end

  def translations(); end
end

module I18n::Backend::KeyValue::Implementation
end

class I18n::Backend::KeyValue::SubtreeProxy
  def [](key); end

  def has_key?(key); end

  def initialize(master_key, store); end

  def instance_of?(klass); end

  def is_a?(klass); end

  def kind_of?(klass); end
end

class I18n::Backend::KeyValue::SubtreeProxy
end

class I18n::Backend::KeyValue
end

class I18n::Backend::LazyLoadable
  def initialize(lazy_load: T.unsafe(nil)); end

  def initialized_locales(); end
end

class I18n::Backend::LazyLoadable::FilenameIncorrect
  def initialize(file, expected_locale, unexpected_locales); end
end

class I18n::Backend::LazyLoadable::FilenameIncorrect
end

class I18n::Backend::LazyLoadable
end

module I18n::Backend::Memoize
  def available_locales(); end

  def eager_load!(); end

  def lookup(locale, key, scope=T.unsafe(nil), options=T.unsafe(nil)); end

  def memoized_lookup(); end

  def reload!(); end

  def reset_memoizations!(locale=T.unsafe(nil)); end

  def store_translations(locale, data, options=T.unsafe(nil)); end
end

module I18n::Backend::Memoize
end

module I18n::Backend::Metadata
  def interpolate(locale, entry, values=T.unsafe(nil)); end

  def pluralize(locale, entry, count); end

  def translate(locale, key, options=T.unsafe(nil)); end

  def with_metadata(metadata, &block); end
end

module I18n::Backend::Metadata
  def self.included(base); end
end

module I18n::Backend::Pluralization
  def pluralize(locale, entry, count); end

  def pluralizer(locale); end

  def pluralizers(); end
end

module I18n::Backend::Pluralization
end

module I18n::Backend::Simple::Implementation
  MUTEX = ::T.let(nil, ::T.untyped)
end

module I18n::Backend::Transliterator
  DEFAULT_REPLACEMENT_CHAR = ::T.let(nil, ::T.untyped)
end

class I18n::Backend::Transliterator::HashTransliterator
  DEFAULT_APPROXIMATIONS = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext
  CONTEXT_SEPARATOR = ::T.let(nil, ::T.untyped)
  PLURAL_SEPARATOR = ::T.let(nil, ::T.untyped)
end

module I18n::Gettext::Helpers
  def N_(msgsid); end

  def _(msgid, options=T.unsafe(nil)); end

  def gettext(msgid, options=T.unsafe(nil)); end

  def n_(msgid, msgid_plural, n=T.unsafe(nil)); end

  def ngettext(msgid, msgid_plural, n=T.unsafe(nil)); end

  def np_(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def npgettext(msgctxt, msgid, msgid_plural, n=T.unsafe(nil)); end

  def ns_(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def nsgettext(msgid, msgid_plural, n=T.unsafe(nil), separator=T.unsafe(nil)); end

  def p_(msgctxt, msgid); end

  def pgettext(msgctxt, msgid); end

  def s_(msgid, separator=T.unsafe(nil)); end

  def sgettext(msgid, separator=T.unsafe(nil)); end
end

module I18n::Gettext::Helpers
end

module I18n::Gettext
  def self.extract_scope(msgid, separator); end

  def self.plural_keys(*args); end
end

class I18n::InvalidFilenames
  NUMBER_OF_ERRORS_SHOWN = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag
  RFC4646_FORMATS = ::T.let(nil, ::T.untyped)
  RFC4646_SUBTAGS = ::T.let(nil, ::T.untyped)
end

class I18n::Locale::Tag::Rfc4646
  include ::I18n::Locale::Tag::Parents
  def to_sym(); end
end

module I18n::Locale::Tag::Rfc4646::Parser
  PATTERN = ::T.let(nil, ::T.untyped)
end

module I18n::Locale::Tag::Rfc4646::Parser
  def self.match(tag); end
end

class I18n::Locale::Tag::Rfc4646
  def self.parser(); end

  def self.parser=(parser); end

  def self.tag(tag); end
end

class I18n::Middleware
  def call(env); end

  def initialize(app); end
end

class I18n::Middleware
end

module I18n::MissingTranslation::Base
  PERMITTED_KEYS = ::T.let(nil, ::T.untyped)
end

module I18n::Tests
end

module I18n::Tests::Localization
end

module I18n::Tests::Localization
  def self.included(base); end
end

module I18n::Tests
end

module I18n
  def self.cache_key_digest(); end

  def self.cache_key_digest=(key_digest); end

  def self.cache_namespace(); end

  def self.cache_namespace=(namespace); end

  def self.cache_store(); end

  def self.cache_store=(store); end

  def self.perform_caching?(); end
end

module INotify
  VERSION = ::T.let(nil, ::T.untyped)
end

class IO
  def nonblock(*arg); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def path(); end

  def pathconf(arg); end

  def ready?(); end

  def timeout(); end

  def timeout=(timeout); end

  def to_path(); end

  def wait(*arg); end

  def wait_priority(*arg); end

  def wait_readable(*arg); end

  def wait_writable(*arg); end
  PRIORITY = ::T.let(nil, ::T.untyped)
  READABLE = ::T.let(nil, ::T.untyped)
  WRITABLE = ::T.let(nil, ::T.untyped)
end

class IO::Buffer
  include ::Comparable
  def &(arg); end

  def ^(arg); end

  def and!(arg); end

  def clear(*arg); end

  def copy(*arg); end

  def each(*arg, &blk); end

  def each_byte(*arg); end

  def empty?(); end

  def external?(); end

  def free(); end

  def get_string(*arg); end

  def get_value(arg, arg1); end

  def get_values(arg, arg1); end

  def hexdump(*arg); end

  def initialize(*arg); end

  def internal?(); end

  def locked(); end

  def locked?(); end

  def mapped?(); end

  def not!(); end

  def null?(); end

  def or!(arg); end

  def pread(*arg); end

  def private?(); end

  def pwrite(*arg); end

  def read(*arg); end

  def readonly?(); end

  def resize(arg); end

  def set_string(*arg); end

  def set_value(arg, arg1, arg2); end

  def set_values(arg, arg1, arg2); end

  def shared?(); end

  def size(); end

  def slice(*arg); end

  def transfer(); end

  def valid?(); end

  def values(*arg); end

  def write(*arg); end

  def xor!(arg); end

  def |(arg); end

  def ~(); end
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  DEFAULT_SIZE = ::T.let(nil, ::T.untyped)
  EXTERNAL = ::T.let(nil, ::T.untyped)
  HOST_ENDIAN = ::T.let(nil, ::T.untyped)
  INTERNAL = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MAPPED = ::T.let(nil, ::T.untyped)
  NETWORK_ENDIAN = ::T.let(nil, ::T.untyped)
  PAGE_SIZE = ::T.let(nil, ::T.untyped)
  PRIVATE = ::T.let(nil, ::T.untyped)
  READONLY = ::T.let(nil, ::T.untyped)
  SHARED = ::T.let(nil, ::T.untyped)
end

class IO::Buffer::AccessError
end

class IO::Buffer::AccessError
end

class IO::Buffer::AllocationError
end

class IO::Buffer::AllocationError
end

class IO::Buffer::InvalidatedError
end

class IO::Buffer::InvalidatedError
end

class IO::Buffer::LockedError
end

class IO::Buffer::LockedError
end

class IO::Buffer::MaskError
end

class IO::Buffer::MaskError
end

class IO::Buffer
  def self.for(arg); end

  def self.map(*arg); end

  def self.size_of(arg); end

  def self.string(arg); end
end

class IO::ConsoleMode
  VERSION = ::T.let(nil, ::T.untyped)
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

class IO
  def self.console(*arg); end

  def self.console_size(); end

  def self.default_console_size(); end

  def self.new(*arg); end
end

class IPAddr
  def ==(other); end

  def as_json(*arg); end

  def begin_addr(); end

  def cidr(); end

  def end_addr(); end

  def initialize(addr=T.unsafe(nil), family=T.unsafe(nil)); end

  def netmask(); end

  def to_json(*a); end

  def wildcard_mask(); end

  def zone_id(); end

  def zone_id=(zid); end
  VERSION = ::T.let(nil, ::T.untyped)
end

module IRB
  IRBRC_EXT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class IRB::BaseCompletor
  def command_candidates(target); end

  def completion_candidates(preposing, target, postposing, bind:); end

  def doc_namespace(preposing, matched, postposing, bind:); end

  def retrieve_files_to_require_from_load_path(); end

  def retrieve_files_to_require_relative_from_current_dir(); end

  def retrieve_gem_and_system_load_path(); end
  GEM_PATHS = ::T.let(nil, ::T.untyped)
  HELP_COMMAND_PREPOSING = ::T.let(nil, ::T.untyped)
  ReservedWords = ::T.let(nil, ::T.untyped)
end

module IRB::Color
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  DIM = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  REVERSE = ::T.let(nil, ::T.untyped)
  UNDERLINE = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

module IRB::Command
  NO_OVERRIDE = ::T.let(nil, ::T.untyped)
  OVERRIDE_ALL = ::T.let(nil, ::T.untyped)
  OVERRIDE_PRIVATE_ONLY = ::T.let(nil, ::T.untyped)
end

class IRB::Command::Backtrace
  def execute(arg); end
end

class IRB::Command::Base
  def execute(arg); end

  def initialize(irb_context); end

  def irb_context(); end
end

class IRB::Command::Base
  def self.execute(irb_context, arg); end
end

class IRB::Command::Break
  def execute(arg); end
end

class IRB::Command::Catch
  def execute(arg); end
end

class IRB::Command::Context
  def execute(_arg); end
end

class IRB::Command::Continue
  def execute(arg); end
end

class IRB::Command::CurrentWorkingWorkspace
  def execute(_arg); end
end

class IRB::Command::Debug
  def execute(_arg); end

  def execute_debug_command(pre_cmds: T.unsafe(nil), do_cmds: T.unsafe(nil)); end
end

class IRB::Command::DebugCommand
  def self.category(); end

  def self.description(); end
end

class IRB::Command::Delete
  def execute(arg); end
end

class IRB::Command::DisableIrb
  def execute(*arg); end
end

class IRB::Command::Exit
  def execute(_arg); end
end

class IRB::Command::Finish
  def execute(arg); end
end

class IRB::Command::ForceExit
  def execute(_arg); end
end

class IRB::Command::Foreground
  def execute_internal(key=T.unsafe(nil)); end
end

class IRB::Command::Help
  def execute(command_name); end
end

class IRB::Command::Info
  def execute(arg); end
end

class IRB::Command::IrbCommand
  def execute_internal(*obj); end
end

class IRB::Command::IrbInfo
  def execute(_arg); end
end

class IRB::Command::Jobs
  def execute(_arg); end
end

class IRB::Command::Kill
  def execute_internal(*keys); end
end

class IRB::Command::Load
  def execute_internal(file_name=T.unsafe(nil), priv=T.unsafe(nil)); end
end

class IRB::Command::LoaderCommand
  def raise_cmd_argument_error(); end
end

class IRB::Command::Ls
  def class_method_map(classes, dumped_mods); end

  def dump_methods(o, klass, obj); end

  def evaluate(code); end
end

class IRB::Command::Measure
  def execute_internal(type=T.unsafe(nil), arg=T.unsafe(nil)); end

  def initialize(*args); end
end

class IRB::Command::Next
  def execute(arg); end
end

IRB::Command::Nop = IRB::Command::Base

class IRB::Command::PushWorkspace
  def execute(arg); end
end

class IRB::Command::Require
  def execute_internal(file_name=T.unsafe(nil)); end
end

module IRB::Command::RubyArgsExtractor
  def ruby_args(arg); end

  def unwrap_string_literal(str); end
end

class IRB::Command::Source
  def execute_internal(file_name=T.unsafe(nil)); end
end

class IRB::Command::Step
  def execute(arg); end
end

class IRB::Command::Whereami
  def execute(_arg); end
end

class IRB::Command::Workspaces
  def execute(_arg); end
end

module IRB::Command
  def self._register_with_aliases(name, command_class, *aliases); end

  def self.all_commands_info(); end

  def self.command_names(); end

  def self.command_override_policies(); end

  def self.execute_as_command?(name, public_method:, private_method:); end

  def self.extract_ruby_args(*args, **kwargs); end

  def self.load_command(command); end
end

class IRB::Context
  def __inspect__(); end

  def __to_s__(); end

  def change_workspace(*_main); end

  def colorize_input(input, complete:); end

  def command_aliases(); end

  def command_aliases=(command_aliases); end

  def echo_on_assignment(); end

  def echo_on_assignment=(echo_on_assignment); end

  def echo_on_assignment?(); end

  def evaluate(statement, line_no); end

  def evaluate_expression(code, line_no); end

  def extra_doc_dirs(); end

  def extra_doc_dirs=(extra_doc_dirs); end

  def from_binding?(); end

  def history_file(); end

  def history_file=(hist); end

  def home_workspace(); end

  def initialize(irb, workspace=T.unsafe(nil), input_method=T.unsafe(nil)); end

  def inspect_last_value(output=T.unsafe(nil)); end

  def inspect_method(); end

  def inspector_support_stream_output?(); end

  def newline_before_multiline_output(); end

  def newline_before_multiline_output=(newline_before_multiline_output); end

  def newline_before_multiline_output?(); end

  def parse_input(code, is_assignment_expression); end

  def pop_workspace(); end

  def push_workspace(*_main); end

  def replace_workspace(workspace); end

  def safe_method_call_on_main(method_name); end

  def save_history(); end

  def use_autocomplete(); end

  def use_autocomplete?(); end

  def use_multiline(); end

  def use_multiline?(); end

  def use_reline(); end

  def use_reline?(); end

  def use_singleline(); end

  def use_singleline?(); end

  def with_debugger(); end

  def with_debugger=(with_debugger); end
  ASSIGN_OPERATORS_REGEXP = ::T.let(nil, ::T.untyped)
  IDNAME_IVARS = ::T.let(nil, ::T.untyped)
  KERNEL_METHOD = ::T.let(nil, ::T.untyped)
  KERNEL_PUBLIC_METHOD = ::T.let(nil, ::T.untyped)
  NOPRINTING_IVARS = ::T.let(nil, ::T.untyped)
  NO_INSPECTING_IVARS = ::T.let(nil, ::T.untyped)
end

module IRB::Debug
  IRB_DIR = ::T.let(nil, ::T.untyped)
end

module IRB::Debug
  def self.insert_debug_break(pre_cmds: T.unsafe(nil), do_cmds: T.unsafe(nil)); end

  def self.setup(irb); end
end

IRB::ExtendCommand = IRB::Command

class IRB::FileInputMethod
  def close(); end

  def initialize(file); end
end

class IRB::FileInputMethod
  def self.open(file, &block); end
end

class IRB::HelperMethod::Conf
  def execute(); end
end

module IRB::HelpersContainer
  def conf(*args, **opts, &block); end
end

module IRB::HelpersContainer
  def self.install_helper_methods(); end
end

module IRB::History
  DEFAULT_ENTRY_LIMIT = ::T.let(nil, ::T.untyped)
end

module IRB::History
  def self.history_file(); end

  def self.infinite?(); end

  def self.save_history(); end

  def self.save_history?(); end
end

module IRB::HistorySavingAbility
  def load_history(); end

  def reset_history_counter(); end

  def save_history(); end

  def support_history_saving?(); end
end

module IRB::InputCompletor
  CompletionProc = ::T.let(nil, ::T.untyped)
end

module IRB::InputCompletor
  def self.retrieve_completion_data(input, bind: T.unsafe(nil), doc_namespace: T.unsafe(nil)); end
end

class IRB::InputMethod
  def prompting?(); end

  def support_history_saving?(); end

  def winsize(); end
  BASIC_WORD_BREAK_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class IRB::Inspector
  def initialize(inspect_proc, init_proc=T.unsafe(nil)); end

  def support_stream_output?(); end
  KERNEL_INSPECT = ::T.let(nil, ::T.untyped)
end

class IRB::Irb
  def command?(code); end

  def configure_io(); end

  def convert_invalid_byte_sequence(str, enc); end

  def debug_break(); end

  def debug_readline(binding); end

  def each_top_level_statement(); end

  def encode_with_invalid_byte_sequence(str, enc); end

  def from_binding(); end

  def handle_exception(exc); end

  def initialize(workspace=T.unsafe(nil), input_method=T.unsafe(nil), from_binding: T.unsafe(nil)); end

  def output_value(omit=T.unsafe(nil)); end

  def parse_input(code); end

  def read_input(prompt); end

  def readmultiline(); end
  CONTROL_CHARACTERS_PATTERN = ::T.let(nil, ::T.untyped)
  PROMPT_MAIN_TRUNCATE_LENGTH = ::T.let(nil, ::T.untyped)
  PROMPT_MAIN_TRUNCATE_OMISSION = ::T.let(nil, ::T.untyped)
end

module IRB::IrbLoader
  def irb_load(fn, priv=T.unsafe(nil)); end

  def load_file(path, priv=T.unsafe(nil)); end

  def old(); end

  def search_file_from_ruby_path(fn); end

  def source_file(path); end
end

class IRB::Locale
  def String(mes); end

  def each_localized_path(dir, file); end

  def each_sublocale(); end

  def encoding(); end

  def find(file, paths=T.unsafe(nil)); end

  def format(*opts); end

  def gets(*rs); end

  def initialize(locale=T.unsafe(nil)); end

  def lang(); end

  def load(file); end

  def modifier(); end

  def print(*opts); end

  def printf(*opts); end

  def puts(*opts); end

  def readline(*rs); end

  def search_file(lib_paths, dir, file); end

  def territory(); end
  LEGACY_ENCODING_ALIAS_MAP = ::T.let(nil, ::T.untyped)
  LOCALE_DIR = ::T.let(nil, ::T.untyped)
  LOCALE_NAME_RE = ::T.let(nil, ::T.untyped)
end

module IRB::NestingParser
  IGNORE_TOKENS = ::T.let(nil, ::T.untyped)
end

class IRB::Pager
  PAGE_COMMANDS = ::T.let(nil, ::T.untyped)
end

class IRB::Pager::PageOverflowIO
  def <<(text); end

  def first_page_lines(); end

  def initialize(width, height, overflow_callback, delay: T.unsafe(nil)); end

  def multipage?(); end

  def print(text); end

  def puts(text=T.unsafe(nil)); end

  def string(); end

  def write(text); end
  MAX_CHAR_PER_CELL = ::T.let(nil, ::T.untyped)
end

class IRB::Pager
  def self.page(retain_content: T.unsafe(nil)); end

  def self.page_content(content, **options); end

  def self.page_with_preview(width, height, formatter_proc); end

  def self.should_page?(); end

  def self.take_first_page(width, height); end
end

class IRB::ReadlineInputMethod
  def completion_info(); end
end

class IRB::ReadlineInputMethod
  def self.initialize_readline(); end
end

class IRB::RegexpCompletor
  def complete_require_path(target, preposing, postposing); end

  def doc_namespace(_preposing, matched, _postposing, bind:); end

  def retrieve_completion_data(input, bind:, doc_namespace:); end

  def select_message(receiver, message, candidates, sep=T.unsafe(nil)); end
  KERNEL_INSTANCE_VARIABLES = ::T.let(nil, ::T.untyped)
  KERNEL_METHODS = ::T.let(nil, ::T.untyped)
  KERNEL_PRIVATE_METHODS = ::T.let(nil, ::T.untyped)
  MODULE_CONSTANTS_INSTANCE_METHOD = ::T.let(nil, ::T.untyped)
  OBJECT_CLASS_INSTANCE_METHOD = ::T.let(nil, ::T.untyped)
  Operators = ::T.let(nil, ::T.untyped)
end

class IRB::ReidlineInputMethod
  def initialize(); end
end

class IRB::RelineInputMethod
  def auto_indent(&block); end

  def check_termination(&block); end

  def completion_info(); end

  def display_document(matched); end

  def dynamic_prompt(&block); end

  def initialize(completor); end

  def rdoc_ri_driver(); end

  def retrieve_doc_namespace(matched); end

  def show_doc_dialog_proc(); end
  HISTORY = ::T.let(nil, ::T.untyped)
end

class IRB::RubyLex
  ASSIGNMENT_NODE_TYPES = ::T.let(nil, ::T.untyped)
  ERROR_TOKENS = ::T.let(nil, ::T.untyped)
  FREE_INDENT_TOKENS = ::T.let(nil, ::T.untyped)
  LTYPE_TOKENS = ::T.let(nil, ::T.untyped)
end

class IRB::SourceFinder
  def find_source(signature, super_level=T.unsafe(nil)); end

  def initialize(irb_context); end
end

class IRB::Statement
  def code(); end

  def is_assignment?(); end

  def should_be_handled_by_debugger?(); end

  def suppresses_echo?(); end
end

class IRB::Statement::Command
  def arg(); end

  def command_class(); end

  def initialize(original_code, command_class, arg); end
end

class IRB::Statement::Expression
  def initialize(code, is_assignment); end
end

class IRB::Statement::IncorrectAlias
  def initialize(message); end

  def message(); end
end

class IRB::TypeCompletor
  def completion_candidates(preposing, target, _postposing, bind:); end

  def doc_namespace(preposing, matched, _postposing, bind:); end

  def initialize(context); end
end

class IRB::WorkSpace
  def initialize(*main); end

  def load_helper_methods_to_main(); end

  def local_variable_get(name); end

  def local_variable_set(name, value); end
end

module IRB
  def self.Inspector(inspect, init=T.unsafe(nil)); end

  def self.init_config(ap_path); end

  def self.init_error(); end

  def self.initialized?(); end

  def self.irbrc_files(); end

  def self.load_modules(); end

  def self.parse_opts(argv: T.unsafe(nil)); end

  def self.raise_validation_error(msg); end

  def self.rc_file(ext); end

  def self.run_config(); end

  def self.set_measure_callback(type=T.unsafe(nil), arg=T.unsafe(nil), &block); end

  def self.unset_measure_callback(type=T.unsafe(nil)); end

  def self.validate_config(); end
end

module ImageProcessing
  VERSION = ::T.let(nil, ::T.untyped)
end

module ImageProcessing::Chainable
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module ImageProcessing::MiniMagick
end

class ImageProcessing::MiniMagick::Processor
  def append(*args); end

  def composite(overlay=T.unsafe(nil), mask: T.unsafe(nil), mode: T.unsafe(nil), gravity: T.unsafe(nil), offset: T.unsafe(nil), args: T.unsafe(nil), **options, &block); end

  def crop(*args); end

  def define(options); end

  def limits(options); end

  def magick(); end

  def resize_and_pad(width, height, background: T.unsafe(nil), gravity: T.unsafe(nil), **options); end

  def resize_to_cover(width, height, **options); end

  def resize_to_fill(width, height, gravity: T.unsafe(nil), **options); end

  def resize_to_fit(width, height, **options); end

  def resize_to_limit(width, height, **options); end

  def rotate(degrees, background: T.unsafe(nil)); end
  SHARPEN_PARAMETERS = ::T.let(nil, ::T.untyped)
end

ImageProcessing::MiniMagick::Processor::ACCUMULATOR_CLASS = MiniMagick::Tool

module ImageProcessing::MiniMagick::Processor::Utils
end

module ImageProcessing::MiniMagick::Processor::Utils
  def self.apply_define(magick, options); end

  def self.apply_options(magick, define: T.unsafe(nil), **options); end

  def self.disallow_split_layers!(destination_path); end
end

class ImageProcessing::MiniMagick::Processor
  def self.load_image(path_or_magick, loader: T.unsafe(nil), page: T.unsafe(nil), geometry: T.unsafe(nil), auto_orient: T.unsafe(nil), **options); end

  def self.save_image(magick, destination_path, allow_splitting: T.unsafe(nil), **options); end
end

module ImageProcessing::MiniMagick
  extend ::ImageProcessing::Chainable
  def self.convert_shim(&block); end

  def self.valid_image?(file); end
end

class ImageProcessing::Pipeline
  DEFAULT_FORMAT = ::T.let(nil, ::T.untyped)
end

module ImageProcessing::Vips
end

class ImageProcessing::Vips::Processor
  def composite(overlay, _mode=T.unsafe(nil), mode: T.unsafe(nil), gravity: T.unsafe(nil), offset: T.unsafe(nil), **options); end

  def image(); end

  def remove(*args); end

  def resize_and_pad(width, height, gravity: T.unsafe(nil), extend: T.unsafe(nil), background: T.unsafe(nil), alpha: T.unsafe(nil), **options); end

  def resize_to_cover(width, height, **options); end

  def resize_to_fill(width, height, **options); end

  def resize_to_fit(width, height, **options); end

  def resize_to_limit(width, height, **options); end

  def rotate(degrees, **options); end

  def set(*args); end

  def set_type(*args); end

  def set_value(*args); end
  SHARPEN_MASK = ::T.let(nil, ::T.untyped)
end

ImageProcessing::Vips::Processor::ACCUMULATOR_CLASS = Vips::Image

module ImageProcessing::Vips::Processor::Utils
end

module ImageProcessing::Vips::Processor::Utils
  def self.select_valid_loader_options(source_path, options); end

  def self.select_valid_options(operation_name, options); end

  def self.select_valid_saver_options(destination_path, options); end
end

class ImageProcessing::Vips::Processor
  def self.load_image(path_or_image, loader: T.unsafe(nil), autorot: T.unsafe(nil), **options); end

  def self.save_image(image, path, saver: T.unsafe(nil), quality: T.unsafe(nil), **options); end
end

module ImageProcessing::Vips
  extend ::ImageProcessing::Chainable
  def self.valid_image?(file); end
end

class Import
  include ::Import::GeneratedAttributeMethods
  include ::Import::GeneratedAssociationMethods
  def autosave_associated_records_for_file_attachment(*args); end

  def autosave_associated_records_for_file_blob(*args); end

  def autosave_associated_records_for_track_listens(*args); end

  def validate_associated_records_for_track_listens(*args); end
end

module Import::GeneratedAssociationMethods
  def build_file_attachment(*args, &block); end

  def build_file_blob(*args, &block); end

  def create_file_attachment(*args, &block); end

  def create_file_attachment!(*args, &block); end

  def create_file_blob(*args, &block); end

  def create_file_blob!(*args, &block); end

  def file(); end

  def file=(attachable); end

  def file_attachment(); end

  def file_attachment=(value); end

  def file_blob(); end

  def file_blob=(value); end

  def reload_file_attachment(); end

  def reload_file_blob(); end

  def reset_file_attachment(); end

  def reset_file_blob(); end

  def track_listen_ids(); end

  def track_listen_ids=(ids); end

  def track_listens(); end

  def track_listens=(value); end
end

module Import::GeneratedAssociationMethods
end

module Import::GeneratedAttributeMethods
end

module Import::GeneratedAttributeMethods
end

class Import
  def self.with_attached_file(*args, **arg); end
end

module Importmap
  VERSION = ::T.let(nil, ::T.untyped)
end

class Integer
  def ceildiv(other); end

  def to_bn(); end
  GMP_VERSION = ::T.let(nil, ::T.untyped)
end

class Integer
  def self.try_convert(arg); end
end

class JSON::Coder
  def dump(object, io=T.unsafe(nil)); end

  def generate(object, io=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil), &as_json); end

  def load(source); end

  def load_file(path); end

  def parse(source); end
end

class JSON::Coder
end

class JSON::Ext::Generator::State
  def allow_nan=(allow_nan); end

  def as_json(); end

  def as_json=(as_json); end

  def ascii_only=(ascii_only); end

  def escape_slash(); end

  def escape_slash=(escape_slash); end

  def escape_slash?(); end

  def generate_new(*arg); end

  def script_safe(); end

  def script_safe=(script_safe); end

  def script_safe?(); end

  def strict(); end

  def strict=(strict); end

  def strict?(); end
end

class JSON::Ext::Generator::State
  def self.from_state(arg); end

  def self.generate(arg, arg1, arg2); end
end

class JSON::Ext::Parser
  def initialize(source, opts=T.unsafe(nil)); end
end

class JSON::Ext::Parser
  def self.parse(arg, arg1); end
end

class JSON::Ext::ParserConfig
  def initialize(arg); end

  def parse(arg); end
end

class JSON::Fragment
  def initialize(json); end

  def json(); end

  def json=(_); end

  def to_json(state=T.unsafe(nil), *arg); end
end

class JSON::Fragment
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class JSON::GeneratorError
  def detailed_message(*arg, **arg1, &arg2); end

  def initialize(message, invalid_object=T.unsafe(nil)); end

  def invalid_object(); end
end

JSON::Parser = JSON::Ext::Parser

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

module JSON
  extend ::Bootsnap::CompileCache::JSON::Patch
  def self.create_fast_state(); end

  def self.create_pretty_state(); end

  def self.unsafe_load(source, proc=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.unsafe_load_default_options(); end

  def self.unsafe_load_default_options=(unsafe_load_default_options); end
end

class Jbuilder
  BLANK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Jbuilder::DependencyTracker
  DIRECT_RENDERS = ::T.let(nil, ::T.untyped)
  EXPLICIT_DEPENDENCY = ::T.let(nil, ::T.untyped)
  INDIRECT_RENDERS = ::T.let(nil, ::T.untyped)
end

class Jbuilder::EnumerableCompat
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Kernel
  include ::DEBUGGER__::TrapInterceptor
  def Namespace(name); end

  def TypeName(string); end
end

module Kernel
  def self.at_exit(); end

  def self.exit(*arg); end

  def self.no_warning_require(arg); end

  def self.trap(*arg); end
end

class KeyError
  include ::DidYouMean::Correctable
end

module LanguageServer::Protocol
  VERSION = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::CodeActionKind
  EMPTY = ::T.let(nil, ::T.untyped)
  QUICK_FIX = ::T.let(nil, ::T.untyped)
  REFACTOR = ::T.let(nil, ::T.untyped)
  REFACTOR_EXTRACT = ::T.let(nil, ::T.untyped)
  REFACTOR_INLINE = ::T.let(nil, ::T.untyped)
  REFACTOR_REWRITE = ::T.let(nil, ::T.untyped)
  SOURCE = ::T.let(nil, ::T.untyped)
  SOURCE_FIX_ALL = ::T.let(nil, ::T.untyped)
  SOURCE_ORGANIZE_IMPORTS = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::CodeActionTriggerKind
  AUTOMATIC = ::T.let(nil, ::T.untyped)
  INVOKED = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::CompletionItemKind
  CLASS = ::T.let(nil, ::T.untyped)
  COLOR = ::T.let(nil, ::T.untyped)
  CONSTANT = ::T.let(nil, ::T.untyped)
  CONSTRUCTOR = ::T.let(nil, ::T.untyped)
  ENUM = ::T.let(nil, ::T.untyped)
  ENUM_MEMBER = ::T.let(nil, ::T.untyped)
  EVENT = ::T.let(nil, ::T.untyped)
  FIELD = ::T.let(nil, ::T.untyped)
  FILE = ::T.let(nil, ::T.untyped)
  FOLDER = ::T.let(nil, ::T.untyped)
  FUNCTION = ::T.let(nil, ::T.untyped)
  INTERFACE = ::T.let(nil, ::T.untyped)
  KEYWORD = ::T.let(nil, ::T.untyped)
  METHOD = ::T.let(nil, ::T.untyped)
  MODULE = ::T.let(nil, ::T.untyped)
  OPERATOR = ::T.let(nil, ::T.untyped)
  PROPERTY = ::T.let(nil, ::T.untyped)
  REFERENCE = ::T.let(nil, ::T.untyped)
  SNIPPET = ::T.let(nil, ::T.untyped)
  STRUCT = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TYPE_PARAMETER = ::T.let(nil, ::T.untyped)
  UNIT = ::T.let(nil, ::T.untyped)
  VALUE = ::T.let(nil, ::T.untyped)
  VARIABLE = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::CompletionItemTag
  DEPRECATED = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::CompletionTriggerKind
  INVOKED = ::T.let(nil, ::T.untyped)
  TRIGGER_CHARACTER = ::T.let(nil, ::T.untyped)
  TRIGGER_FOR_INCOMPLETE_COMPLETIONS = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::DiagnosticSeverity
  ERROR = ::T.let(nil, ::T.untyped)
  HINT = ::T.let(nil, ::T.untyped)
  INFORMATION = ::T.let(nil, ::T.untyped)
  WARNING = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::DiagnosticTag
  DEPRECATED = ::T.let(nil, ::T.untyped)
  UNNECESSARY = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::DocumentDiagnosticReportKind
  FULL = ::T.let(nil, ::T.untyped)
  UNCHANGED = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::DocumentHighlightKind
  READ = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  WRITE = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::ErrorCodes
  CONTENT_MODIFIED = ::T.let(nil, ::T.untyped)
  INTERNAL_ERROR = ::T.let(nil, ::T.untyped)
  INVALID_PARAMS = ::T.let(nil, ::T.untyped)
  INVALID_REQUEST = ::T.let(nil, ::T.untyped)
  JSONRPC_RESERVED_ERROR_RANGE_END = ::T.let(nil, ::T.untyped)
  JSONRPC_RESERVED_ERROR_RANGE_START = ::T.let(nil, ::T.untyped)
  LSP_RESERVED_ERROR_RANGE_END = ::T.let(nil, ::T.untyped)
  LSP_RESERVED_ERROR_RANGE_START = ::T.let(nil, ::T.untyped)
  METHOD_NOT_FOUND = ::T.let(nil, ::T.untyped)
  PARSE_ERROR = ::T.let(nil, ::T.untyped)
  REQUEST_CANCELLED = ::T.let(nil, ::T.untyped)
  REQUEST_FAILED = ::T.let(nil, ::T.untyped)
  SERVER_CANCELLED = ::T.let(nil, ::T.untyped)
  SERVER_ERROR_END = ::T.let(nil, ::T.untyped)
  SERVER_ERROR_START = ::T.let(nil, ::T.untyped)
  SERVER_NOT_INITIALIZED = ::T.let(nil, ::T.untyped)
  UNKNOWN_ERROR_CODE = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::FailureHandlingKind
  ABORT = ::T.let(nil, ::T.untyped)
  TEXT_ONLY_TRANSACTIONAL = ::T.let(nil, ::T.untyped)
  TRANSACTIONAL = ::T.let(nil, ::T.untyped)
  UNDO = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::FileChangeType
  CHANGED = ::T.let(nil, ::T.untyped)
  CREATED = ::T.let(nil, ::T.untyped)
  DELETED = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::FileOperationPatternKind
  FILE = ::T.let(nil, ::T.untyped)
  FOLDER = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::FoldingRangeKind
  COMMENT = ::T.let(nil, ::T.untyped)
  IMPORTS = ::T.let(nil, ::T.untyped)
  REGION = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::InitializeErrorCodes
  UNKNOWN_PROTOCOL_VERSION = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::InlayHintKind
  PARAMETER = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::InsertTextFormat
  PLAIN_TEXT = ::T.let(nil, ::T.untyped)
  SNIPPET = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::InsertTextMode
  ADJUST_INDENTATION = ::T.let(nil, ::T.untyped)
  AS_IS = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::MarkupKind
  MARKDOWN = ::T.let(nil, ::T.untyped)
  PLAIN_TEXT = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::MessageType
  ERROR = ::T.let(nil, ::T.untyped)
  INFO = ::T.let(nil, ::T.untyped)
  LOG = ::T.let(nil, ::T.untyped)
  WARNING = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::MonikerKind
  EXPORT = ::T.let(nil, ::T.untyped)
  IMPORT = ::T.let(nil, ::T.untyped)
  LOCAL = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::NotebookCellKind
  CODE = ::T.let(nil, ::T.untyped)
  MARKUP = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::PositionEncodingKind
  UTF16 = ::T.let(nil, ::T.untyped)
  UTF32 = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::PrepareSupportDefaultBehavior
  IDENTIFIER = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::ResourceOperationKind
  CREATE = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
  RENAME = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::SemanticTokenModifiers
  ABSTRACT = ::T.let(nil, ::T.untyped)
  ASYNC = ::T.let(nil, ::T.untyped)
  DECLARATION = ::T.let(nil, ::T.untyped)
  DEFAULT_LIBRARY = ::T.let(nil, ::T.untyped)
  DEFINITION = ::T.let(nil, ::T.untyped)
  DEPRECATED = ::T.let(nil, ::T.untyped)
  DOCUMENTATION = ::T.let(nil, ::T.untyped)
  MODIFICATION = ::T.let(nil, ::T.untyped)
  READONLY = ::T.let(nil, ::T.untyped)
  STATIC = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::SemanticTokenTypes
  CLASS = ::T.let(nil, ::T.untyped)
  COMMENT = ::T.let(nil, ::T.untyped)
  DECORATOR = ::T.let(nil, ::T.untyped)
  ENUM = ::T.let(nil, ::T.untyped)
  ENUM_MEMBER = ::T.let(nil, ::T.untyped)
  EVENT = ::T.let(nil, ::T.untyped)
  FUNCTION = ::T.let(nil, ::T.untyped)
  INTERFACE = ::T.let(nil, ::T.untyped)
  KEYWORD = ::T.let(nil, ::T.untyped)
  MACRO = ::T.let(nil, ::T.untyped)
  METHOD = ::T.let(nil, ::T.untyped)
  MODIFIER = ::T.let(nil, ::T.untyped)
  NAMESPACE = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  OPERATOR = ::T.let(nil, ::T.untyped)
  PARAMETER = ::T.let(nil, ::T.untyped)
  PROPERTY = ::T.let(nil, ::T.untyped)
  REGEXP = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  STRUCT = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
  TYPE_PARAMETER = ::T.let(nil, ::T.untyped)
  VARIABLE = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::SignatureHelpTriggerKind
  CONTENT_CHANGE = ::T.let(nil, ::T.untyped)
  INVOKED = ::T.let(nil, ::T.untyped)
  TRIGGER_CHARACTER = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::SymbolKind
  ARRAY = ::T.let(nil, ::T.untyped)
  BOOLEAN = ::T.let(nil, ::T.untyped)
  CLASS = ::T.let(nil, ::T.untyped)
  CONSTANT = ::T.let(nil, ::T.untyped)
  CONSTRUCTOR = ::T.let(nil, ::T.untyped)
  ENUM = ::T.let(nil, ::T.untyped)
  ENUM_MEMBER = ::T.let(nil, ::T.untyped)
  EVENT = ::T.let(nil, ::T.untyped)
  FIELD = ::T.let(nil, ::T.untyped)
  FILE = ::T.let(nil, ::T.untyped)
  FUNCTION = ::T.let(nil, ::T.untyped)
  INTERFACE = ::T.let(nil, ::T.untyped)
  KEY = ::T.let(nil, ::T.untyped)
  METHOD = ::T.let(nil, ::T.untyped)
  MODULE = ::T.let(nil, ::T.untyped)
  NAMESPACE = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  OBJECT = ::T.let(nil, ::T.untyped)
  OPERATOR = ::T.let(nil, ::T.untyped)
  PACKAGE = ::T.let(nil, ::T.untyped)
  PROPERTY = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  STRUCT = ::T.let(nil, ::T.untyped)
  TYPE_PARAMETER = ::T.let(nil, ::T.untyped)
  VARIABLE = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::SymbolTag
  DEPRECATED = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::TextDocumentSaveReason
  AFTER_DELAY = ::T.let(nil, ::T.untyped)
  FOCUS_OUT = ::T.let(nil, ::T.untyped)
  MANUAL = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::TextDocumentSyncKind
  FULL = ::T.let(nil, ::T.untyped)
  INCREMENTAL = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::TokenFormat
  RELATIVE = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::UniquenessLevel
  DOCUMENT = ::T.let(nil, ::T.untyped)
  GLOBAL = ::T.let(nil, ::T.untyped)
  GROUP = ::T.let(nil, ::T.untyped)
  PROJECT = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
end

module LanguageServer::Protocol::Constant::WatchKind
  CHANGE = ::T.let(nil, ::T.untyped)
  CREATE = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
end

class LanguageServer::Protocol::Interface::AnnotatedTextEdit
  def annotation_id(); end

  def attributes(); end

  def initialize(range:, new_text:, annotation_id:); end

  def new_text(); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ApplyWorkspaceEditParams
  def attributes(); end

  def edit(); end

  def initialize(edit:, label: T.unsafe(nil)); end

  def label(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ApplyWorkspaceEditResult
  def applied(); end

  def attributes(); end

  def failed_change(); end

  def failure_reason(); end

  def initialize(applied:, failure_reason: T.unsafe(nil), failed_change: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CallHierarchyClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CallHierarchyIncomingCall
  def attributes(); end

  def from(); end

  def from_ranges(); end

  def initialize(from:, from_ranges:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CallHierarchyIncomingCallsParams
  def attributes(); end

  def initialize(item:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def item(); end

  def partial_result_token(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::CallHierarchyItem
  def attributes(); end

  def data(); end

  def detail(); end

  def initialize(name:, kind:, uri:, range:, selection_range:, tags: T.unsafe(nil), detail: T.unsafe(nil), data: T.unsafe(nil)); end

  def kind(); end

  def name(); end

  def range(); end

  def selection_range(); end

  def tags(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::CallHierarchyOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::CallHierarchyOutgoingCall
  def attributes(); end

  def from_ranges(); end

  def initialize(to:, from_ranges:); end

  def to(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CallHierarchyOutgoingCallsParams
  def attributes(); end

  def initialize(item:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def item(); end

  def partial_result_token(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::CallHierarchyPrepareParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil)); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::CallHierarchyRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::CancelParams
  def attributes(); end

  def id(); end

  def initialize(id:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ChangeAnnotation
  def attributes(); end

  def description(); end

  def initialize(label:, needs_confirmation: T.unsafe(nil), description: T.unsafe(nil)); end

  def label(); end

  def needs_confirmation(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ClientCapabilities
  def attributes(); end

  def experimental(); end

  def general(); end

  def initialize(workspace: T.unsafe(nil), text_document: T.unsafe(nil), notebook_document: T.unsafe(nil), window: T.unsafe(nil), general: T.unsafe(nil), experimental: T.unsafe(nil)); end

  def notebook_document(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def window(); end

  def workspace(); end
end

class LanguageServer::Protocol::Interface::CodeAction
  def attributes(); end

  def command(); end

  def data(); end

  def diagnostics(); end

  def disabled(); end

  def edit(); end

  def initialize(title:, kind: T.unsafe(nil), diagnostics: T.unsafe(nil), is_preferred: T.unsafe(nil), disabled: T.unsafe(nil), edit: T.unsafe(nil), command: T.unsafe(nil), data: T.unsafe(nil)); end

  def is_preferred(); end

  def kind(); end

  def title(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeActionClientCapabilities
  def attributes(); end

  def code_action_literal_support(); end

  def data_support(); end

  def disabled_support(); end

  def dynamic_registration(); end

  def honors_change_annotations(); end

  def initialize(dynamic_registration: T.unsafe(nil), code_action_literal_support: T.unsafe(nil), is_preferred_support: T.unsafe(nil), disabled_support: T.unsafe(nil), data_support: T.unsafe(nil), resolve_support: T.unsafe(nil), honors_change_annotations: T.unsafe(nil)); end

  def is_preferred_support(); end

  def resolve_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeActionContext
  def attributes(); end

  def diagnostics(); end

  def initialize(diagnostics:, only: T.unsafe(nil), trigger_kind: T.unsafe(nil)); end

  def only(); end

  def to_hash(); end

  def to_json(*args); end

  def trigger_kind(); end
end

class LanguageServer::Protocol::Interface::CodeActionOptions
  def attributes(); end

  def code_action_kinds(); end

  def initialize(work_done_progress: T.unsafe(nil), code_action_kinds: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::CodeActionParams
  def attributes(); end

  def context(); end

  def initialize(text_document:, range:, context:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def range(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::CodeActionRegistrationOptions
  def attributes(); end

  def code_action_kinds(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), code_action_kinds: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::CodeDescription
  def attributes(); end

  def href(); end

  def initialize(href:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeLens
  def attributes(); end

  def command(); end

  def data(); end

  def initialize(range:, command: T.unsafe(nil), data: T.unsafe(nil)); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeLensClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CodeLensOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::CodeLensParams
  def attributes(); end

  def initialize(text_document:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::CodeLensRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::CodeLensWorkspaceClientCapabilities
  def attributes(); end

  def initialize(refresh_support: T.unsafe(nil)); end

  def refresh_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Color
  def alpha(); end

  def attributes(); end

  def blue(); end

  def green(); end

  def initialize(red:, green:, blue:, alpha:); end

  def red(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ColorInformation
  def attributes(); end

  def color(); end

  def initialize(range:, color:); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ColorPresentation
  def additional_text_edits(); end

  def attributes(); end

  def initialize(label:, text_edit: T.unsafe(nil), additional_text_edits: T.unsafe(nil)); end

  def label(); end

  def text_edit(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ColorPresentationParams
  def attributes(); end

  def color(); end

  def initialize(text_document:, color:, range:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def range(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::Command
  def arguments(); end

  def attributes(); end

  def command(); end

  def initialize(title:, command:, arguments: T.unsafe(nil)); end

  def title(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionClientCapabilities
  def attributes(); end

  def completion_item(); end

  def completion_item_kind(); end

  def completion_list(); end

  def context_support(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), completion_item: T.unsafe(nil), completion_item_kind: T.unsafe(nil), context_support: T.unsafe(nil), insert_text_mode: T.unsafe(nil), completion_list: T.unsafe(nil)); end

  def insert_text_mode(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionContext
  def attributes(); end

  def initialize(trigger_kind:, trigger_character: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def trigger_character(); end

  def trigger_kind(); end
end

class LanguageServer::Protocol::Interface::CompletionItem
  def additional_text_edits(); end

  def attributes(); end

  def command(); end

  def commit_characters(); end

  def data(); end

  def deprecated(); end

  def detail(); end

  def documentation(); end

  def filter_text(); end

  def initialize(label:, label_details: T.unsafe(nil), kind: T.unsafe(nil), tags: T.unsafe(nil), detail: T.unsafe(nil), documentation: T.unsafe(nil), deprecated: T.unsafe(nil), preselect: T.unsafe(nil), sort_text: T.unsafe(nil), filter_text: T.unsafe(nil), insert_text: T.unsafe(nil), insert_text_format: T.unsafe(nil), insert_text_mode: T.unsafe(nil), text_edit: T.unsafe(nil), text_edit_text: T.unsafe(nil), additional_text_edits: T.unsafe(nil), commit_characters: T.unsafe(nil), command: T.unsafe(nil), data: T.unsafe(nil)); end

  def insert_text(); end

  def insert_text_format(); end

  def insert_text_mode(); end

  def kind(); end

  def label(); end

  def label_details(); end

  def preselect(); end

  def sort_text(); end

  def tags(); end

  def text_edit(); end

  def text_edit_text(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionItemLabelDetails
  def attributes(); end

  def description(); end

  def detail(); end

  def initialize(detail: T.unsafe(nil), description: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionList
  def attributes(); end

  def initialize(is_incomplete:, items:, item_defaults: T.unsafe(nil)); end

  def is_incomplete(); end

  def item_defaults(); end

  def items(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CompletionOptions
  def all_commit_characters(); end

  def attributes(); end

  def completion_item(); end

  def initialize(work_done_progress: T.unsafe(nil), trigger_characters: T.unsafe(nil), all_commit_characters: T.unsafe(nil), resolve_provider: T.unsafe(nil), completion_item: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def trigger_characters(); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::CompletionParams
  def attributes(); end

  def context(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil), context: T.unsafe(nil)); end

  def partial_result_token(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::CompletionRegistrationOptions
  def all_commit_characters(); end

  def attributes(); end

  def completion_item(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), trigger_characters: T.unsafe(nil), all_commit_characters: T.unsafe(nil), resolve_provider: T.unsafe(nil), completion_item: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def trigger_characters(); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::ConfigurationItem
  def attributes(); end

  def initialize(scope_uri: T.unsafe(nil), section: T.unsafe(nil)); end

  def scope_uri(); end

  def section(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ConfigurationParams
  def attributes(); end

  def initialize(items:); end

  def items(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CreateFile
  def annotation_id(); end

  def attributes(); end

  def initialize(kind:, uri:, options: T.unsafe(nil), annotation_id: T.unsafe(nil)); end

  def kind(); end

  def options(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::CreateFileOptions
  def attributes(); end

  def ignore_if_exists(); end

  def initialize(overwrite: T.unsafe(nil), ignore_if_exists: T.unsafe(nil)); end

  def overwrite(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::CreateFilesParams
  def attributes(); end

  def files(); end

  def initialize(files:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DeclarationClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), link_support: T.unsafe(nil)); end

  def link_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DeclarationOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DeclarationParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::DeclarationRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DefinitionClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), link_support: T.unsafe(nil)); end

  def link_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DefinitionOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DefinitionParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::DefinitionRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DeleteFile
  def annotation_id(); end

  def attributes(); end

  def initialize(kind:, uri:, options: T.unsafe(nil), annotation_id: T.unsafe(nil)); end

  def kind(); end

  def options(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::DeleteFileOptions
  def attributes(); end

  def ignore_if_not_exists(); end

  def initialize(recursive: T.unsafe(nil), ignore_if_not_exists: T.unsafe(nil)); end

  def recursive(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DeleteFilesParams
  def attributes(); end

  def files(); end

  def initialize(files:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Diagnostic
  def attributes(); end

  def code(); end

  def code_description(); end

  def data(); end

  def initialize(range:, message:, severity: T.unsafe(nil), code: T.unsafe(nil), code_description: T.unsafe(nil), source: T.unsafe(nil), tags: T.unsafe(nil), related_information: T.unsafe(nil), data: T.unsafe(nil)); end

  def message(); end

  def range(); end

  def related_information(); end

  def severity(); end

  def source(); end

  def tags(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DiagnosticClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), related_document_support: T.unsafe(nil)); end

  def related_document_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DiagnosticOptions
  def attributes(); end

  def identifier(); end

  def initialize(inter_file_dependencies:, workspace_diagnostics:, work_done_progress: T.unsafe(nil), identifier: T.unsafe(nil)); end

  def inter_file_dependencies(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end

  def workspace_diagnostics(); end
end

class LanguageServer::Protocol::Interface::DiagnosticRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def identifier(); end

  def initialize(document_selector:, inter_file_dependencies:, workspace_diagnostics:, work_done_progress: T.unsafe(nil), identifier: T.unsafe(nil), id: T.unsafe(nil)); end

  def inter_file_dependencies(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end

  def workspace_diagnostics(); end
end

class LanguageServer::Protocol::Interface::DiagnosticRelatedInformation
  def attributes(); end

  def initialize(location:, message:); end

  def location(); end

  def message(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DiagnosticServerCancellationData
  def attributes(); end

  def initialize(retrigger_request:); end

  def retrigger_request(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DiagnosticWorkspaceClientCapabilities
  def attributes(); end

  def initialize(refresh_support: T.unsafe(nil)); end

  def refresh_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeConfigurationClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeConfigurationParams
  def attributes(); end

  def initialize(settings:); end

  def settings(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeNotebookDocumentParams
  def attributes(); end

  def change(); end

  def initialize(notebook_document:, change:); end

  def notebook_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeTextDocumentParams
  def attributes(); end

  def content_changes(); end

  def initialize(text_document:, content_changes:); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeWatchedFilesClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), relative_pattern_support: T.unsafe(nil)); end

  def relative_pattern_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeWatchedFilesParams
  def attributes(); end

  def changes(); end

  def initialize(changes:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidChangeWatchedFilesRegistrationOptions
  def attributes(); end

  def initialize(watchers:); end

  def to_hash(); end

  def to_json(*args); end

  def watchers(); end
end

class LanguageServer::Protocol::Interface::DidChangeWorkspaceFoldersParams
  def attributes(); end

  def event(); end

  def initialize(event:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidCloseNotebookDocumentParams
  def attributes(); end

  def cell_text_documents(); end

  def initialize(notebook_document:, cell_text_documents:); end

  def notebook_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidCloseTextDocumentParams
  def attributes(); end

  def initialize(text_document:); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidOpenNotebookDocumentParams
  def attributes(); end

  def cell_text_documents(); end

  def initialize(notebook_document:, cell_text_documents:); end

  def notebook_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidOpenTextDocumentParams
  def attributes(); end

  def initialize(text_document:); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidSaveNotebookDocumentParams
  def attributes(); end

  def initialize(notebook_document:); end

  def notebook_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DidSaveTextDocumentParams
  def attributes(); end

  def initialize(text_document:, text: T.unsafe(nil)); end

  def text(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentColorClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentColorOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentColorParams
  def attributes(); end

  def initialize(text_document:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::DocumentColorRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, id: T.unsafe(nil), work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentDiagnosticParams
  def attributes(); end

  def identifier(); end

  def initialize(text_document:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil), identifier: T.unsafe(nil), previous_result_id: T.unsafe(nil)); end

  def partial_result_token(); end

  def previous_result_id(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::DocumentDiagnosticReportPartialResult
  def attributes(); end

  def initialize(related_documents:); end

  def related_documents(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentFilter
  def attributes(); end

  def initialize(language: T.unsafe(nil), scheme: T.unsafe(nil), pattern: T.unsafe(nil)); end

  def language(); end

  def pattern(); end

  def scheme(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentFormattingClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentFormattingOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentFormattingParams
  def attributes(); end

  def initialize(text_document:, options:, work_done_token: T.unsafe(nil)); end

  def options(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::DocumentFormattingRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentHighlight
  def attributes(); end

  def initialize(range:, kind: T.unsafe(nil)); end

  def kind(); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentHighlightClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentHighlightOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentHighlightParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::DocumentHighlightRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentLink
  def attributes(); end

  def data(); end

  def initialize(range:, target: T.unsafe(nil), tooltip: T.unsafe(nil), data: T.unsafe(nil)); end

  def range(); end

  def target(); end

  def to_hash(); end

  def to_json(*args); end

  def tooltip(); end
end

class LanguageServer::Protocol::Interface::DocumentLinkClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), tooltip_support: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def tooltip_support(); end
end

class LanguageServer::Protocol::Interface::DocumentLinkOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentLinkParams
  def attributes(); end

  def initialize(text_document:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::DocumentLinkRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingOptions
  def attributes(); end

  def first_trigger_character(); end

  def initialize(first_trigger_character:, more_trigger_character: T.unsafe(nil)); end

  def more_trigger_character(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingParams
  def attributes(); end

  def ch(); end

  def initialize(text_document:, position:, ch:, options:); end

  def options(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentOnTypeFormattingRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def first_trigger_character(); end

  def initialize(document_selector:, first_trigger_character:, more_trigger_character: T.unsafe(nil)); end

  def more_trigger_character(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentRangeFormattingClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentRangeFormattingOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentRangeFormattingParams
  def attributes(); end

  def initialize(text_document:, range:, options:, work_done_token: T.unsafe(nil)); end

  def options(); end

  def range(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::DocumentRangeFormattingRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentSymbol
  def attributes(); end

  def children(); end

  def deprecated(); end

  def detail(); end

  def initialize(name:, kind:, range:, selection_range:, detail: T.unsafe(nil), tags: T.unsafe(nil), deprecated: T.unsafe(nil), children: T.unsafe(nil)); end

  def kind(); end

  def name(); end

  def range(); end

  def selection_range(); end

  def tags(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentSymbolClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def hierarchical_document_symbol_support(); end

  def initialize(dynamic_registration: T.unsafe(nil), symbol_kind: T.unsafe(nil), hierarchical_document_symbol_support: T.unsafe(nil), tag_support: T.unsafe(nil), label_support: T.unsafe(nil)); end

  def label_support(); end

  def symbol_kind(); end

  def tag_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::DocumentSymbolOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil), label: T.unsafe(nil)); end

  def label(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::DocumentSymbolParams
  def attributes(); end

  def initialize(text_document:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::DocumentSymbolRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), label: T.unsafe(nil)); end

  def label(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::ExecuteCommandClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ExecuteCommandOptions
  def attributes(); end

  def commands(); end

  def initialize(commands:, work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::ExecuteCommandParams
  def arguments(); end

  def attributes(); end

  def command(); end

  def initialize(command:, work_done_token: T.unsafe(nil), arguments: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::ExecuteCommandRegistrationOptions
  def attributes(); end

  def commands(); end

  def initialize(commands:, work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::ExecutionSummary
  def attributes(); end

  def execution_order(); end

  def initialize(execution_order:, success: T.unsafe(nil)); end

  def success(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FileCreate
  def attributes(); end

  def initialize(uri:); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::FileDelete
  def attributes(); end

  def initialize(uri:); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::FileEvent
  def attributes(); end

  def initialize(uri:, type:); end

  def to_hash(); end

  def to_json(*args); end

  def type(); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::FileOperationFilter
  def attributes(); end

  def initialize(pattern:, scheme: T.unsafe(nil)); end

  def pattern(); end

  def scheme(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FileOperationPattern
  def attributes(); end

  def glob(); end

  def initialize(glob:, matches: T.unsafe(nil), options: T.unsafe(nil)); end

  def matches(); end

  def options(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FileOperationPatternOptions
  def attributes(); end

  def ignore_case(); end

  def initialize(ignore_case: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FileOperationRegistrationOptions
  def attributes(); end

  def filters(); end

  def initialize(filters:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FileRename
  def attributes(); end

  def initialize(old_uri:, new_uri:); end

  def new_uri(); end

  def old_uri(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FileSystemWatcher
  def attributes(); end

  def glob_pattern(); end

  def initialize(glob_pattern:, kind: T.unsafe(nil)); end

  def kind(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FoldingRange
  def attributes(); end

  def collapsed_text(); end

  def end_character(); end

  def end_line(); end

  def initialize(start_line:, end_line:, start_character: T.unsafe(nil), end_character: T.unsafe(nil), kind: T.unsafe(nil), collapsed_text: T.unsafe(nil)); end

  def kind(); end

  def start_character(); end

  def start_line(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FoldingRangeClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def folding_range(); end

  def folding_range_kind(); end

  def initialize(dynamic_registration: T.unsafe(nil), range_limit: T.unsafe(nil), line_folding_only: T.unsafe(nil), folding_range_kind: T.unsafe(nil), folding_range: T.unsafe(nil)); end

  def line_folding_only(); end

  def range_limit(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::FoldingRangeOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::FoldingRangeParams
  def attributes(); end

  def initialize(text_document:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::FoldingRangeRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::FormattingOptions
  def attributes(); end

  def initialize(tab_size:, insert_spaces:, trim_trailing_whitespace: T.unsafe(nil), insert_final_newline: T.unsafe(nil), trim_final_newlines: T.unsafe(nil)); end

  def insert_final_newline(); end

  def insert_spaces(); end

  def tab_size(); end

  def to_hash(); end

  def to_json(*args); end

  def trim_final_newlines(); end

  def trim_trailing_whitespace(); end
end

class LanguageServer::Protocol::Interface::FullDocumentDiagnosticReport
  def attributes(); end

  def initialize(kind:, items:, result_id: T.unsafe(nil)); end

  def items(); end

  def kind(); end

  def result_id(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Hover
  def attributes(); end

  def contents(); end

  def initialize(contents:, range: T.unsafe(nil)); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::HoverClientCapabilities
  def attributes(); end

  def content_format(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), content_format: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::HoverOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::HoverParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil)); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::HoverRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::HoverResult
  def attributes(); end

  def initialize(value:); end

  def to_hash(); end

  def to_json(*args); end

  def value(); end
end

class LanguageServer::Protocol::Interface::ImplementationClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), link_support: T.unsafe(nil)); end

  def link_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ImplementationOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::ImplementationParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::ImplementationRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::InitializeError
  def attributes(); end

  def initialize(retry:); end

  def retry(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InitializeParams
  def attributes(); end

  def capabilities(); end

  def client_info(); end

  def initialization_options(); end

  def initialize(process_id:, root_uri:, capabilities:, work_done_token: T.unsafe(nil), client_info: T.unsafe(nil), locale: T.unsafe(nil), root_path: T.unsafe(nil), initialization_options: T.unsafe(nil), trace: T.unsafe(nil), workspace_folders: T.unsafe(nil)); end

  def locale(); end

  def process_id(); end

  def root_path(); end

  def root_uri(); end

  def to_hash(); end

  def to_json(*args); end

  def trace(); end

  def work_done_token(); end

  def workspace_folders(); end
end

class LanguageServer::Protocol::Interface::InitializeResult
  def attributes(); end

  def capabilities(); end

  def initialize(capabilities:, server_info: T.unsafe(nil)); end

  def server_info(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InitializedParams
  def attributes(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InlayHint
  def attributes(); end

  def data(); end

  def initialize(position:, label:, kind: T.unsafe(nil), text_edits: T.unsafe(nil), tooltip: T.unsafe(nil), padding_left: T.unsafe(nil), padding_right: T.unsafe(nil), data: T.unsafe(nil)); end

  def kind(); end

  def label(); end

  def padding_left(); end

  def padding_right(); end

  def position(); end

  def text_edits(); end

  def to_hash(); end

  def to_json(*args); end

  def tooltip(); end
end

class LanguageServer::Protocol::Interface::InlayHintClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), resolve_support: T.unsafe(nil)); end

  def resolve_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InlayHintLabelPart
  def attributes(); end

  def command(); end

  def initialize(value:, tooltip: T.unsafe(nil), location: T.unsafe(nil), command: T.unsafe(nil)); end

  def location(); end

  def to_hash(); end

  def to_json(*args); end

  def tooltip(); end

  def value(); end
end

class LanguageServer::Protocol::Interface::InlayHintOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::InlayHintParams
  def attributes(); end

  def initialize(text_document:, range:, work_done_token: T.unsafe(nil)); end

  def range(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::InlayHintRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil), id: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::InlayHintWorkspaceClientCapabilities
  def attributes(); end

  def initialize(refresh_support: T.unsafe(nil)); end

  def refresh_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InlineValueClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InlineValueContext
  def attributes(); end

  def frame_id(); end

  def initialize(frame_id:, stopped_location:); end

  def stopped_location(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InlineValueEvaluatableExpression
  def attributes(); end

  def expression(); end

  def initialize(range:, expression: T.unsafe(nil)); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InlineValueOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::InlineValueParams
  def attributes(); end

  def context(); end

  def initialize(text_document:, range:, context:, work_done_token: T.unsafe(nil)); end

  def range(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::InlineValueRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::InlineValueText
  def attributes(); end

  def initialize(range:, text:); end

  def range(); end

  def text(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InlineValueVariableLookup
  def attributes(); end

  def case_sensitive_lookup(); end

  def initialize(range:, case_sensitive_lookup:, variable_name: T.unsafe(nil)); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end

  def variable_name(); end
end

class LanguageServer::Protocol::Interface::InlineValueWorkspaceClientCapabilities
  def attributes(); end

  def initialize(refresh_support: T.unsafe(nil)); end

  def refresh_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::InsertReplaceEdit
  def attributes(); end

  def initialize(new_text:, insert:, replace:); end

  def insert(); end

  def new_text(); end

  def replace(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::LinkedEditingRangeClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::LinkedEditingRangeOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::LinkedEditingRangeParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil)); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::LinkedEditingRangeRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::LinkedEditingRanges
  def attributes(); end

  def initialize(ranges:, word_pattern: T.unsafe(nil)); end

  def ranges(); end

  def to_hash(); end

  def to_json(*args); end

  def word_pattern(); end
end

class LanguageServer::Protocol::Interface::Location
  def attributes(); end

  def initialize(uri:, range:); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::LocationLink
  def attributes(); end

  def initialize(target_uri:, target_range:, target_selection_range:, origin_selection_range: T.unsafe(nil)); end

  def origin_selection_range(); end

  def target_range(); end

  def target_selection_range(); end

  def target_uri(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::LogMessageParams
  def attributes(); end

  def initialize(type:, message:); end

  def message(); end

  def to_hash(); end

  def to_json(*args); end

  def type(); end
end

class LanguageServer::Protocol::Interface::LogTraceParams
  def attributes(); end

  def initialize(message:, verbose: T.unsafe(nil)); end

  def message(); end

  def to_hash(); end

  def to_json(*args); end

  def verbose(); end
end

class LanguageServer::Protocol::Interface::MarkupContent
  def attributes(); end

  def initialize(kind:, value:); end

  def kind(); end

  def to_hash(); end

  def to_json(*args); end

  def value(); end
end

class LanguageServer::Protocol::Interface::Message
  def attributes(); end

  def initialize(jsonrpc:); end

  def jsonrpc(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::MessageActionItem
  def attributes(); end

  def initialize(title:); end

  def title(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Moniker
  def attributes(); end

  def identifier(); end

  def initialize(scheme:, identifier:, unique:, kind: T.unsafe(nil)); end

  def kind(); end

  def scheme(); end

  def to_hash(); end

  def to_json(*args); end

  def unique(); end
end

class LanguageServer::Protocol::Interface::MonikerClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::MonikerOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::MonikerParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::MonikerRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::NotebookCell
  def attributes(); end

  def document(); end

  def execution_summary(); end

  def initialize(kind:, document:, metadata: T.unsafe(nil), execution_summary: T.unsafe(nil)); end

  def kind(); end

  def metadata(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotebookCellArrayChange
  def attributes(); end

  def cells(); end

  def delete_count(); end

  def initialize(start:, delete_count:, cells: T.unsafe(nil)); end

  def start(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotebookCellTextDocumentFilter
  def attributes(); end

  def initialize(notebook:, language: T.unsafe(nil)); end

  def language(); end

  def notebook(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotebookDocument
  def attributes(); end

  def cells(); end

  def initialize(uri:, notebook_type:, version:, cells:, metadata: T.unsafe(nil)); end

  def metadata(); end

  def notebook_type(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end

  def version(); end
end

class LanguageServer::Protocol::Interface::NotebookDocumentChangeEvent
  def attributes(); end

  def cells(); end

  def initialize(metadata: T.unsafe(nil), cells: T.unsafe(nil)); end

  def metadata(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotebookDocumentClientCapabilities
  def attributes(); end

  def initialize(synchronization:); end

  def synchronization(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotebookDocumentFilter
  def attributes(); end

  def initialize(notebook_type: T.unsafe(nil), scheme: T.unsafe(nil), pattern: T.unsafe(nil)); end

  def notebook_type(); end

  def pattern(); end

  def scheme(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotebookDocumentIdentifier
  def attributes(); end

  def initialize(uri:); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::NotebookDocumentSyncClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def execution_summary_support(); end

  def initialize(dynamic_registration: T.unsafe(nil), execution_summary_support: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotebookDocumentSyncOptions
  def attributes(); end

  def initialize(notebook_selector:, save: T.unsafe(nil)); end

  def notebook_selector(); end

  def save(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotebookDocumentSyncRegistrationOptions
  def attributes(); end

  def id(); end

  def initialize(notebook_selector:, save: T.unsafe(nil), id: T.unsafe(nil)); end

  def notebook_selector(); end

  def save(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::NotificationMessage
  def attributes(); end

  def initialize(jsonrpc:, method:, params: T.unsafe(nil)); end

  def jsonrpc(); end

  def method(); end

  def params(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::OptionalVersionedTextDocumentIdentifier
  def attributes(); end

  def initialize(uri:, version:); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end

  def version(); end
end

class LanguageServer::Protocol::Interface::ParameterInformation
  def attributes(); end

  def documentation(); end

  def initialize(label:, documentation: T.unsafe(nil)); end

  def label(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::PartialResultParams
  def attributes(); end

  def initialize(partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Position
  def attributes(); end

  def character(); end

  def initialize(line:, character:); end

  def line(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::PrepareRenameParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil)); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::PreviousResultId
  def attributes(); end

  def initialize(uri:, value:); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end

  def value(); end
end

class LanguageServer::Protocol::Interface::ProgressParams
  def attributes(); end

  def initialize(token:, value:); end

  def to_hash(); end

  def to_json(*args); end

  def token(); end

  def value(); end
end

class LanguageServer::Protocol::Interface::PublishDiagnosticsClientCapabilities
  def attributes(); end

  def code_description_support(); end

  def data_support(); end

  def initialize(related_information: T.unsafe(nil), tag_support: T.unsafe(nil), version_support: T.unsafe(nil), code_description_support: T.unsafe(nil), data_support: T.unsafe(nil)); end

  def related_information(); end

  def tag_support(); end

  def to_hash(); end

  def to_json(*args); end

  def version_support(); end
end

class LanguageServer::Protocol::Interface::PublishDiagnosticsParams
  def attributes(); end

  def diagnostics(); end

  def initialize(uri:, diagnostics:, version: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end

  def version(); end
end

class LanguageServer::Protocol::Interface::Range
  def attributes(); end

  def end(); end

  def initialize(start:, end:); end

  def start(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ReferenceClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ReferenceContext
  def attributes(); end

  def include_declaration(); end

  def initialize(include_declaration:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ReferenceOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::ReferenceParams
  def attributes(); end

  def context(); end

  def initialize(text_document:, position:, context:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::ReferenceRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::Registration
  def attributes(); end

  def id(); end

  def initialize(id:, method:, register_options: T.unsafe(nil)); end

  def method(); end

  def register_options(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RegistrationParams
  def attributes(); end

  def initialize(registrations:); end

  def registrations(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RegularExpressionsClientCapabilities
  def attributes(); end

  def engine(); end

  def initialize(engine:, version: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def version(); end
end

class LanguageServer::Protocol::Interface::RelatedFullDocumentDiagnosticReport
  def attributes(); end

  def initialize(kind:, items:, result_id: T.unsafe(nil), related_documents: T.unsafe(nil)); end

  def items(); end

  def kind(); end

  def related_documents(); end

  def result_id(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RelatedUnchangedDocumentDiagnosticReport
  def attributes(); end

  def initialize(kind:, result_id:, related_documents: T.unsafe(nil)); end

  def kind(); end

  def related_documents(); end

  def result_id(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RelativePattern
  def attributes(); end

  def base_uri(); end

  def initialize(base_uri:, pattern:); end

  def pattern(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def honors_change_annotations(); end

  def initialize(dynamic_registration: T.unsafe(nil), prepare_support: T.unsafe(nil), prepare_support_default_behavior: T.unsafe(nil), honors_change_annotations: T.unsafe(nil)); end

  def prepare_support(); end

  def prepare_support_default_behavior(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameFile
  def annotation_id(); end

  def attributes(); end

  def initialize(kind:, old_uri:, new_uri:, options: T.unsafe(nil), annotation_id: T.unsafe(nil)); end

  def kind(); end

  def new_uri(); end

  def old_uri(); end

  def options(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameFileOptions
  def attributes(); end

  def ignore_if_exists(); end

  def initialize(overwrite: T.unsafe(nil), ignore_if_exists: T.unsafe(nil)); end

  def overwrite(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameFilesParams
  def attributes(); end

  def files(); end

  def initialize(files:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::RenameOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil), prepare_provider: T.unsafe(nil)); end

  def prepare_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::RenameParams
  def attributes(); end

  def initialize(text_document:, position:, new_name:, work_done_token: T.unsafe(nil)); end

  def new_name(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::RenameRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), prepare_provider: T.unsafe(nil)); end

  def prepare_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::RequestMessage
  def attributes(); end

  def id(); end

  def initialize(jsonrpc:, id:, method:, params: T.unsafe(nil)); end

  def jsonrpc(); end

  def method(); end

  def params(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ResponseError
  def attributes(); end

  def code(); end

  def data(); end

  def initialize(code:, message:, data: T.unsafe(nil)); end

  def message(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ResponseMessage
  def attributes(); end

  def error(); end

  def id(); end

  def initialize(jsonrpc:, id:, result: T.unsafe(nil), error: T.unsafe(nil)); end

  def jsonrpc(); end

  def result(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SaveOptions
  def attributes(); end

  def include_text(); end

  def initialize(include_text: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SelectionRange
  def attributes(); end

  def initialize(range:, parent: T.unsafe(nil)); end

  def parent(); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SelectionRangeClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SelectionRangeOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::SelectionRangeParams
  def attributes(); end

  def initialize(text_document:, positions:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def positions(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::SelectionRangeRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::SemanticTokens
  def attributes(); end

  def data(); end

  def initialize(data:, result_id: T.unsafe(nil)); end

  def result_id(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SemanticTokensClientCapabilities
  def attributes(); end

  def augments_syntax_tokens(); end

  def dynamic_registration(); end

  def formats(); end

  def initialize(requests:, token_types:, token_modifiers:, formats:, dynamic_registration: T.unsafe(nil), overlapping_token_support: T.unsafe(nil), multiline_token_support: T.unsafe(nil), server_cancel_support: T.unsafe(nil), augments_syntax_tokens: T.unsafe(nil)); end

  def multiline_token_support(); end

  def overlapping_token_support(); end

  def requests(); end

  def server_cancel_support(); end

  def to_hash(); end

  def to_json(*args); end

  def token_modifiers(); end

  def token_types(); end
end

class LanguageServer::Protocol::Interface::SemanticTokensDelta
  def attributes(); end

  def edits(); end

  def initialize(edits:, result_id: T.unsafe(nil)); end

  def result_id(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SemanticTokensDeltaParams
  def attributes(); end

  def initialize(text_document:, previous_result_id:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def previous_result_id(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::SemanticTokensDeltaPartialResult
  def attributes(); end

  def edits(); end

  def initialize(edits:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SemanticTokensEdit
  def attributes(); end

  def data(); end

  def delete_count(); end

  def initialize(start:, delete_count:, data: T.unsafe(nil)); end

  def start(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SemanticTokensLegend
  def attributes(); end

  def initialize(token_types:, token_modifiers:); end

  def to_hash(); end

  def to_json(*args); end

  def token_modifiers(); end

  def token_types(); end
end

class LanguageServer::Protocol::Interface::SemanticTokensOptions
  def attributes(); end

  def full(); end

  def initialize(legend:, work_done_progress: T.unsafe(nil), range: T.unsafe(nil), full: T.unsafe(nil)); end

  def legend(); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::SemanticTokensParams
  def attributes(); end

  def initialize(text_document:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::SemanticTokensPartialResult
  def attributes(); end

  def data(); end

  def initialize(data:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SemanticTokensRangeParams
  def attributes(); end

  def initialize(text_document:, range:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def range(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::SemanticTokensRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def full(); end

  def id(); end

  def initialize(document_selector:, legend:, work_done_progress: T.unsafe(nil), range: T.unsafe(nil), full: T.unsafe(nil), id: T.unsafe(nil)); end

  def legend(); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::SemanticTokensWorkspaceClientCapabilities
  def attributes(); end

  def initialize(refresh_support: T.unsafe(nil)); end

  def refresh_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ServerCapabilities
  def attributes(); end

  def call_hierarchy_provider(); end

  def code_action_provider(); end

  def code_lens_provider(); end

  def color_provider(); end

  def completion_provider(); end

  def declaration_provider(); end

  def definition_provider(); end

  def diagnostic_provider(); end

  def document_formatting_provider(); end

  def document_highlight_provider(); end

  def document_link_provider(); end

  def document_on_type_formatting_provider(); end

  def document_range_formatting_provider(); end

  def document_symbol_provider(); end

  def execute_command_provider(); end

  def experimental(); end

  def folding_range_provider(); end

  def hover_provider(); end

  def implementation_provider(); end

  def initialize(position_encoding: T.unsafe(nil), text_document_sync: T.unsafe(nil), notebook_document_sync: T.unsafe(nil), completion_provider: T.unsafe(nil), hover_provider: T.unsafe(nil), signature_help_provider: T.unsafe(nil), declaration_provider: T.unsafe(nil), definition_provider: T.unsafe(nil), type_definition_provider: T.unsafe(nil), implementation_provider: T.unsafe(nil), references_provider: T.unsafe(nil), document_highlight_provider: T.unsafe(nil), document_symbol_provider: T.unsafe(nil), code_action_provider: T.unsafe(nil), code_lens_provider: T.unsafe(nil), document_link_provider: T.unsafe(nil), color_provider: T.unsafe(nil), document_formatting_provider: T.unsafe(nil), document_range_formatting_provider: T.unsafe(nil), document_on_type_formatting_provider: T.unsafe(nil), rename_provider: T.unsafe(nil), folding_range_provider: T.unsafe(nil), execute_command_provider: T.unsafe(nil), selection_range_provider: T.unsafe(nil), linked_editing_range_provider: T.unsafe(nil), call_hierarchy_provider: T.unsafe(nil), semantic_tokens_provider: T.unsafe(nil), moniker_provider: T.unsafe(nil), type_hierarchy_provider: T.unsafe(nil), inline_value_provider: T.unsafe(nil), inlay_hint_provider: T.unsafe(nil), diagnostic_provider: T.unsafe(nil), workspace_symbol_provider: T.unsafe(nil), workspace: T.unsafe(nil), experimental: T.unsafe(nil)); end

  def inlay_hint_provider(); end

  def inline_value_provider(); end

  def linked_editing_range_provider(); end

  def moniker_provider(); end

  def notebook_document_sync(); end

  def position_encoding(); end

  def references_provider(); end

  def rename_provider(); end

  def selection_range_provider(); end

  def semantic_tokens_provider(); end

  def signature_help_provider(); end

  def text_document_sync(); end

  def to_hash(); end

  def to_json(*args); end

  def type_definition_provider(); end

  def type_hierarchy_provider(); end

  def workspace(); end

  def workspace_symbol_provider(); end
end

class LanguageServer::Protocol::Interface::SetTraceParams
  def attributes(); end

  def initialize(value:); end

  def to_hash(); end

  def to_json(*args); end

  def value(); end
end

class LanguageServer::Protocol::Interface::ShowDocumentClientCapabilities
  def attributes(); end

  def initialize(support:); end

  def support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ShowDocumentParams
  def attributes(); end

  def external(); end

  def initialize(uri:, external: T.unsafe(nil), take_focus: T.unsafe(nil), selection: T.unsafe(nil)); end

  def selection(); end

  def take_focus(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::ShowDocumentResult
  def attributes(); end

  def initialize(success:); end

  def success(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ShowMessageParams
  def attributes(); end

  def initialize(type:, message:); end

  def message(); end

  def to_hash(); end

  def to_json(*args); end

  def type(); end
end

class LanguageServer::Protocol::Interface::ShowMessageRequestClientCapabilities
  def attributes(); end

  def initialize(message_action_item: T.unsafe(nil)); end

  def message_action_item(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::ShowMessageRequestParams
  def actions(); end

  def attributes(); end

  def initialize(type:, message:, actions: T.unsafe(nil)); end

  def message(); end

  def to_hash(); end

  def to_json(*args); end

  def type(); end
end

class LanguageServer::Protocol::Interface::SignatureHelp
  def active_parameter(); end

  def active_signature(); end

  def attributes(); end

  def initialize(signatures:, active_signature: T.unsafe(nil), active_parameter: T.unsafe(nil)); end

  def signatures(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SignatureHelpClientCapabilities
  def attributes(); end

  def context_support(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), signature_information: T.unsafe(nil), context_support: T.unsafe(nil)); end

  def signature_information(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SignatureHelpContext
  def active_signature_help(); end

  def attributes(); end

  def initialize(trigger_kind:, is_retrigger:, trigger_character: T.unsafe(nil), active_signature_help: T.unsafe(nil)); end

  def is_retrigger(); end

  def to_hash(); end

  def to_json(*args); end

  def trigger_character(); end

  def trigger_kind(); end
end

class LanguageServer::Protocol::Interface::SignatureHelpOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil), trigger_characters: T.unsafe(nil), retrigger_characters: T.unsafe(nil)); end

  def retrigger_characters(); end

  def to_hash(); end

  def to_json(*args); end

  def trigger_characters(); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::SignatureHelpParams
  def attributes(); end

  def context(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil), context: T.unsafe(nil)); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::SignatureHelpRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), trigger_characters: T.unsafe(nil), retrigger_characters: T.unsafe(nil)); end

  def retrigger_characters(); end

  def to_hash(); end

  def to_json(*args); end

  def trigger_characters(); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::SignatureInformation
  def active_parameter(); end

  def attributes(); end

  def documentation(); end

  def initialize(label:, documentation: T.unsafe(nil), parameters: T.unsafe(nil), active_parameter: T.unsafe(nil)); end

  def label(); end

  def parameters(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::StaticRegistrationOptions
  def attributes(); end

  def id(); end

  def initialize(id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::SymbolInformation
  def attributes(); end

  def container_name(); end

  def deprecated(); end

  def initialize(name:, kind:, location:, tags: T.unsafe(nil), deprecated: T.unsafe(nil), container_name: T.unsafe(nil)); end

  def kind(); end

  def location(); end

  def name(); end

  def tags(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentChangeRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:, sync_kind:); end

  def sync_kind(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentClientCapabilities
  def attributes(); end

  def call_hierarchy(); end

  def code_action(); end

  def code_lens(); end

  def color_provider(); end

  def completion(); end

  def declaration(); end

  def definition(); end

  def diagnostic(); end

  def document_highlight(); end

  def document_link(); end

  def document_symbol(); end

  def folding_range(); end

  def formatting(); end

  def hover(); end

  def implementation(); end

  def initialize(synchronization: T.unsafe(nil), completion: T.unsafe(nil), hover: T.unsafe(nil), signature_help: T.unsafe(nil), declaration: T.unsafe(nil), definition: T.unsafe(nil), type_definition: T.unsafe(nil), implementation: T.unsafe(nil), references: T.unsafe(nil), document_highlight: T.unsafe(nil), document_symbol: T.unsafe(nil), code_action: T.unsafe(nil), code_lens: T.unsafe(nil), document_link: T.unsafe(nil), color_provider: T.unsafe(nil), formatting: T.unsafe(nil), range_formatting: T.unsafe(nil), on_type_formatting: T.unsafe(nil), rename: T.unsafe(nil), publish_diagnostics: T.unsafe(nil), folding_range: T.unsafe(nil), selection_range: T.unsafe(nil), linked_editing_range: T.unsafe(nil), call_hierarchy: T.unsafe(nil), semantic_tokens: T.unsafe(nil), moniker: T.unsafe(nil), type_hierarchy: T.unsafe(nil), inline_value: T.unsafe(nil), inlay_hint: T.unsafe(nil), diagnostic: T.unsafe(nil)); end

  def inlay_hint(); end

  def inline_value(); end

  def linked_editing_range(); end

  def moniker(); end

  def on_type_formatting(); end

  def publish_diagnostics(); end

  def range_formatting(); end

  def references(); end

  def rename(); end

  def selection_range(); end

  def semantic_tokens(); end

  def signature_help(); end

  def synchronization(); end

  def to_hash(); end

  def to_json(*args); end

  def type_definition(); end

  def type_hierarchy(); end
end

class LanguageServer::Protocol::Interface::TextDocumentContentChangeEvent
  def attributes(); end

  def initialize(text:, range: T.unsafe(nil), range_length: T.unsafe(nil)); end

  def range(); end

  def range_length(); end

  def text(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentEdit
  def attributes(); end

  def edits(); end

  def initialize(text_document:, edits:); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentIdentifier
  def attributes(); end

  def initialize(uri:); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::TextDocumentItem
  def attributes(); end

  def initialize(uri:, language_id:, version:, text:); end

  def language_id(); end

  def text(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end

  def version(); end
end

class LanguageServer::Protocol::Interface::TextDocumentPositionParams
  def attributes(); end

  def initialize(text_document:, position:); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def initialize(document_selector:); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentSaveRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def include_text(); end

  def initialize(document_selector:, include_text: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TextDocumentSyncClientCapabilities
  def attributes(); end

  def did_save(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), will_save: T.unsafe(nil), will_save_wait_until: T.unsafe(nil), did_save: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def will_save(); end

  def will_save_wait_until(); end
end

class LanguageServer::Protocol::Interface::TextDocumentSyncOptions
  def attributes(); end

  def change(); end

  def initialize(open_close: T.unsafe(nil), change: T.unsafe(nil), will_save: T.unsafe(nil), will_save_wait_until: T.unsafe(nil), save: T.unsafe(nil)); end

  def open_close(); end

  def save(); end

  def to_hash(); end

  def to_json(*args); end

  def will_save(); end

  def will_save_wait_until(); end
end

class LanguageServer::Protocol::Interface::TextEdit
  def attributes(); end

  def initialize(range:, new_text:); end

  def new_text(); end

  def range(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TypeDefinitionClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), link_support: T.unsafe(nil)); end

  def link_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::TypeDefinitionOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::TypeDefinitionParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::TypeDefinitionRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::TypeHierarchyItem
  def attributes(); end

  def data(); end

  def detail(); end

  def initialize(name:, kind:, uri:, range:, selection_range:, tags: T.unsafe(nil), detail: T.unsafe(nil), data: T.unsafe(nil)); end

  def kind(); end

  def name(); end

  def range(); end

  def selection_range(); end

  def tags(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::TypeHierarchyOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::TypeHierarchyPrepareParams
  def attributes(); end

  def initialize(text_document:, position:, work_done_token: T.unsafe(nil)); end

  def position(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::TypeHierarchyRegistrationOptions
  def attributes(); end

  def document_selector(); end

  def id(); end

  def initialize(document_selector:, work_done_progress: T.unsafe(nil), id: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::TypeHierarchySubtypesParams
  def attributes(); end

  def initialize(item:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def item(); end

  def partial_result_token(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::TypeHierarchySupertypesParams
  def attributes(); end

  def initialize(item:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def item(); end

  def partial_result_token(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::UnchangedDocumentDiagnosticReport
  def attributes(); end

  def initialize(kind:, result_id:); end

  def kind(); end

  def result_id(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::Unregistration
  def attributes(); end

  def id(); end

  def initialize(id:, method:); end

  def method(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::UnregistrationParams
  def attributes(); end

  def initialize(unregisterations:); end

  def to_hash(); end

  def to_json(*args); end

  def unregisterations(); end
end

class LanguageServer::Protocol::Interface::VersionedNotebookDocumentIdentifier
  def attributes(); end

  def initialize(version:, uri:); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end

  def version(); end
end

class LanguageServer::Protocol::Interface::VersionedTextDocumentIdentifier
  def attributes(); end

  def initialize(uri:, version:); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end

  def version(); end
end

class LanguageServer::Protocol::Interface::WillSaveTextDocumentParams
  def attributes(); end

  def initialize(text_document:, reason:); end

  def reason(); end

  def text_document(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressBegin
  def attributes(); end

  def cancellable(); end

  def initialize(kind:, title:, cancellable: T.unsafe(nil), message: T.unsafe(nil), percentage: T.unsafe(nil)); end

  def kind(); end

  def message(); end

  def percentage(); end

  def title(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressCancelParams
  def attributes(); end

  def initialize(token:); end

  def to_hash(); end

  def to_json(*args); end

  def token(); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressCreateParams
  def attributes(); end

  def initialize(token:); end

  def to_hash(); end

  def to_json(*args); end

  def token(); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressEnd
  def attributes(); end

  def initialize(kind:, message: T.unsafe(nil)); end

  def kind(); end

  def message(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressParams
  def attributes(); end

  def initialize(work_done_token: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::WorkDoneProgressReport
  def attributes(); end

  def cancellable(); end

  def initialize(kind:, cancellable: T.unsafe(nil), message: T.unsafe(nil), percentage: T.unsafe(nil)); end

  def kind(); end

  def message(); end

  def percentage(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceDiagnosticParams
  def attributes(); end

  def identifier(); end

  def initialize(previous_result_ids:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil), identifier: T.unsafe(nil)); end

  def partial_result_token(); end

  def previous_result_ids(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::WorkspaceDiagnosticReport
  def attributes(); end

  def initialize(items:); end

  def items(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceDiagnosticReportPartialResult
  def attributes(); end

  def initialize(items:); end

  def items(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceEdit
  def attributes(); end

  def change_annotations(); end

  def changes(); end

  def document_changes(); end

  def initialize(changes: T.unsafe(nil), document_changes: T.unsafe(nil), change_annotations: T.unsafe(nil)); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceEditClientCapabilities
  def attributes(); end

  def change_annotation_support(); end

  def document_changes(); end

  def failure_handling(); end

  def initialize(document_changes: T.unsafe(nil), resource_operations: T.unsafe(nil), failure_handling: T.unsafe(nil), normalizes_line_endings: T.unsafe(nil), change_annotation_support: T.unsafe(nil)); end

  def normalizes_line_endings(); end

  def resource_operations(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceFolder
  def attributes(); end

  def initialize(uri:, name:); end

  def name(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end
end

class LanguageServer::Protocol::Interface::WorkspaceFoldersChangeEvent
  def added(); end

  def attributes(); end

  def initialize(added:, removed:); end

  def removed(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceFoldersServerCapabilities
  def attributes(); end

  def change_notifications(); end

  def initialize(supported: T.unsafe(nil), change_notifications: T.unsafe(nil)); end

  def supported(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceFullDocumentDiagnosticReport
  def attributes(); end

  def initialize(kind:, items:, uri:, version:, result_id: T.unsafe(nil)); end

  def items(); end

  def kind(); end

  def result_id(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end

  def version(); end
end

class LanguageServer::Protocol::Interface::WorkspaceSymbol
  def attributes(); end

  def container_name(); end

  def data(); end

  def initialize(name:, kind:, location:, tags: T.unsafe(nil), container_name: T.unsafe(nil), data: T.unsafe(nil)); end

  def kind(); end

  def location(); end

  def name(); end

  def tags(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceSymbolClientCapabilities
  def attributes(); end

  def dynamic_registration(); end

  def initialize(dynamic_registration: T.unsafe(nil), symbol_kind: T.unsafe(nil), tag_support: T.unsafe(nil), resolve_support: T.unsafe(nil)); end

  def resolve_support(); end

  def symbol_kind(); end

  def tag_support(); end

  def to_hash(); end

  def to_json(*args); end
end

class LanguageServer::Protocol::Interface::WorkspaceSymbolOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::WorkspaceSymbolParams
  def attributes(); end

  def initialize(query:, work_done_token: T.unsafe(nil), partial_result_token: T.unsafe(nil)); end

  def partial_result_token(); end

  def query(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_token(); end
end

class LanguageServer::Protocol::Interface::WorkspaceSymbolRegistrationOptions
  def attributes(); end

  def initialize(work_done_progress: T.unsafe(nil), resolve_provider: T.unsafe(nil)); end

  def resolve_provider(); end

  def to_hash(); end

  def to_json(*args); end

  def work_done_progress(); end
end

class LanguageServer::Protocol::Interface::WorkspaceUnchangedDocumentDiagnosticReport
  def attributes(); end

  def initialize(kind:, result_id:, uri:, version:); end

  def kind(); end

  def result_id(); end

  def to_hash(); end

  def to_json(*args); end

  def uri(); end

  def version(); end
end

class LanguageServer::Protocol::Transport::Io::Reader
  def close(); end

  def initialize(io); end

  def read(&block); end
end

class LanguageServer::Protocol::Transport::Io::Writer
  def close(); end

  def initialize(io); end

  def io(); end

  def write(response); end
end

class LanguageServer::Protocol::Transport::Stdio::Reader
  def initialize(); end
end

class LanguageServer::Protocol::Transport::Stdio::Writer
  def initialize(); end
end

module Listen
  VERSION = ::T.let(nil, ::T.untyped)
end

module Listen::Adapter
  OPTIMIZED_ADAPTERS = ::T.let(nil, ::T.untyped)
  POLLING_FALLBACK_MESSAGE = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::BSD
  BUNDLER_DECLARE_GEM = ::T.let(nil, ::T.untyped)
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Base
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Darwin
  DEFAULTS = ::T.let(nil, ::T.untyped)
  INCOMPATIBLE_GEM_VERSION = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Linux
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
  README_URL = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Polling
  DEFAULTS = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Adapter::Windows
  BUNDLER_DECLARE_GEM = ::T.let(nil, ::T.untyped)
  OS_REGEXP = ::T.let(nil, ::T.untyped)
end

class Listen::Event::Loop
  MAX_STARTUP_SECONDS = ::T.let(nil, ::T.untyped)
end

Listen::Event::Loop::Error = Listen::Error

Listen::Event::Loop::NotStarted = Listen::Error::NotStarted

class Listen::Listener::Config
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Listen::Record::SymlinkDetector
  README_URL = ::T.let(nil, ::T.untyped)
  SYMLINK_LOOP_ERROR = ::T.let(nil, ::T.untyped)
end

Listen::Record::SymlinkDetector::Error = Listen::Error

class Listen::Silencer
  DEFAULT_IGNORED_EXTENSIONS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORED_FILES = ::T.let(nil, ::T.untyped)
end

class LoadError
  include ::DidYouMean::Correctable
end

class Logger
  SEV_LABEL = ::T.let(nil, ::T.untyped)
end

class Logger::Formatter
  DatetimeFormat = ::T.let(nil, ::T.untyped)
  Format = ::T.let(nil, ::T.untyped)
end

class Logger::LogDevice
  MODE = ::T.let(nil, ::T.untyped)
  MODE_TO_CREATE = ::T.let(nil, ::T.untyped)
  MODE_TO_OPEN = ::T.let(nil, ::T.untyped)
end

module Logger::Period
  SiD = ::T.let(nil, ::T.untyped)
end

module Loofah
  VERSION = ::T.let(nil, ::T.untyped)
end

module Loofah::Elements
  BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  INLINE_LINE_BREAK = ::T.let(nil, ::T.untyped)
  LINEBREAKERS = ::T.let(nil, ::T.untyped)
  LOOSE_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML4 = ::T.let(nil, ::T.untyped)
  STRICT_BLOCK_LEVEL_HTML5 = ::T.let(nil, ::T.untyped)
end

Loofah::HTML = Loofah::HTML4

module Loofah::HTML5::SafeList
  ACCEPTABLE_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_COLORS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_EXTENDED_COLORS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_ELEMENTS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ACCEPTABLE_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ALLOWED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_FUNCTIONS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_KEYWORDS = ::T.let(nil, ::T.untyped)
  ALLOWED_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS = ::T.let(nil, ::T.untyped)
  ALLOWED_ELEMENTS_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  ALLOWED_PROTOCOLS = ::T.let(nil, ::T.untyped)
  ALLOWED_SVG_PROPERTIES = ::T.let(nil, ::T.untyped)
  ALLOWED_URI_DATA_MEDIATYPES = ::T.let(nil, ::T.untyped)
  ARIA_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  ATTR_VAL_IS_URI = ::T.let(nil, ::T.untyped)
  MATHML_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  MATHML_ELEMENTS = ::T.let(nil, ::T.untyped)
  PROTOCOL_SEPARATOR = ::T.let(nil, ::T.untyped)
  SHORTHAND_CSS_PROPERTIES = ::T.let(nil, ::T.untyped)
  SVG_ALLOW_LOCAL_HREF = ::T.let(nil, ::T.untyped)
  SVG_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  SVG_ATTR_VAL_ALLOWS_REF = ::T.let(nil, ::T.untyped)
  SVG_ELEMENTS = ::T.let(nil, ::T.untyped)
  TAGS_SAFE_WITH_LIBXML2 = ::T.let(nil, ::T.untyped)
  VOID_ELEMENTS = ::T.let(nil, ::T.untyped)
end

module Loofah::HTML5::Scrub
  CONTROL_CHARACTERS = ::T.let(nil, ::T.untyped)
  CRASS_SEMICOLON = ::T.let(nil, ::T.untyped)
  CSS_IMPORTANT = ::T.let(nil, ::T.untyped)
  CSS_KEYWORDISH = ::T.let(nil, ::T.untyped)
  CSS_PROPERTY_STRING_WITHOUT_EMBEDDED_QUOTES = ::T.let(nil, ::T.untyped)
  CSS_WHITESPACE = ::T.let(nil, ::T.untyped)
  DATA_ATTRIBUTE_NAME = ::T.let(nil, ::T.untyped)
end

Loofah::HTML5::WhiteList = Loofah::HTML5::SafeList

module Loofah::LibxmlWorkarounds
  BROKEN_ESCAPING_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  BROKEN_ESCAPING_ATTRIBUTES_QUALIFYING_TAG = ::T.let(nil, ::T.untyped)
end

class Loofah::Scrubber
  CONTINUE = ::T.let(nil, ::T.untyped)
  STOP = ::T.let(nil, ::T.untyped)
end

module Loofah::Scrubbers
  MAP = ::T.let(nil, ::T.untyped)
end

module Mail
  RANDOM_TAG = ::T.let(nil, ::T.untyped)
end

class Mail::AddressList
  def addresses(); end

  def addresses_grouped_by_group(); end

  def group_names(); end

  def initialize(string); end
end

class Mail::AddressList
end

class Mail::BccField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CcField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CommentsField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::CommonField
  FILENAME_RE = ::T.let(nil, ::T.untyped)
end

module Mail::Constants
  ASTERISK = ::T.let(nil, ::T.untyped)
  ATOM_UNSAFE = ::T.let(nil, ::T.untyped)
  B_VALUES = ::T.let(nil, ::T.untyped)
  CAPITAL_M = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR = ::T.let(nil, ::T.untyped)
  CR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  CR_ENCODED = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  EQUAL_LF = ::T.let(nil, ::T.untyped)
  FIELD_BODY = ::T.let(nil, ::T.untyped)
  FIELD_LINE = ::T.let(nil, ::T.untyped)
  FIELD_NAME = ::T.let(nil, ::T.untyped)
  FIELD_PREFIX = ::T.let(nil, ::T.untyped)
  FIELD_SPLIT = ::T.let(nil, ::T.untyped)
  FULL_ENCODED_VALUE = ::T.let(nil, ::T.untyped)
  FWS = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  HEADER_SPLIT = ::T.let(nil, ::T.untyped)
  HYPHEN = ::T.let(nil, ::T.untyped)
  LAX_CRLF = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  LF_ENCODED = ::T.let(nil, ::T.untyped)
  NULL_SENDER = ::T.let(nil, ::T.untyped)
  PHRASE_UNSAFE = ::T.let(nil, ::T.untyped)
  QP_SAFE = ::T.let(nil, ::T.untyped)
  QP_UNSAFE = ::T.let(nil, ::T.untyped)
  Q_VALUES = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
  TOKEN_UNSAFE = ::T.let(nil, ::T.untyped)
  UNDERSCORE = ::T.let(nil, ::T.untyped)
  UNFOLD_WS = ::T.let(nil, ::T.untyped)
  WSP = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDescriptionField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentDispositionElement
  def disposition_type(); end

  def initialize(string); end

  def parameters(); end
end

class Mail::ContentDispositionElement
end

class Mail::ContentDispositionField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentIdField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentLocationElement
  def initialize(string); end

  def location(); end

  def to_s(*args); end
end

class Mail::ContentLocationElement
end

class Mail::ContentLocationField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTransferEncodingElement
  def encoding(); end

  def initialize(string); end
end

class Mail::ContentTransferEncodingElement
end

class Mail::ContentTransferEncodingField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ContentTypeElement
  def initialize(string); end

  def main_type(); end

  def parameters(); end

  def sub_type(); end
end

class Mail::ContentTypeElement
end

class Mail::ContentTypeField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::DateField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Base64
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::Binary
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::EightBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::QuotedPrintable
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::SevenBit
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::TransferEncoding
  NAME = ::T.let(nil, ::T.untyped)
  PRIORITY = ::T.let(nil, ::T.untyped)
end

class Mail::Encodings::UnixToUnix
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Envelope
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::EnvelopeFromElement
  def address(); end

  def date_time(); end

  def formatted_date_time(); end

  def initialize(string); end
end

class Mail::EnvelopeFromElement
end

class Mail::Exim
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::Exim
end

class Mail::Field
  FIELDS_MAP = ::T.let(nil, ::T.untyped)
  FIELD_NAME_MAP = ::T.let(nil, ::T.untyped)
  FIELD_ORDER_LOOKUP = ::T.let(nil, ::T.untyped)
  KNOWN_FIELDS = ::T.let(nil, ::T.untyped)
  STRUCTURED_FIELDS = ::T.let(nil, ::T.untyped)
end

class Mail::FromField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::IMAP
  def connection(&block); end

  def delete_all(mailbox=T.unsafe(nil)); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::IMAP
end

class Mail::InReplyToField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::KeywordsField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::LoggerDelivery
  def deliver!(mail); end

  def initialize(settings); end

  def logger(); end

  def settings(); end

  def severity(); end
end

class Mail::LoggerDelivery
end

class Mail::Message
  HEADER_SEPARATOR = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::MessageIdsElement
  def initialize(string); end

  def message_id(); end

  def message_ids(); end
end

class Mail::MessageIdsElement
  def self.parse(string); end
end

class Mail::MimeVersionElement
  def initialize(string); end

  def major(); end

  def minor(); end
end

class Mail::MimeVersionElement
end

class Mail::MimeVersionField
  NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte
  VALID_CHARACTER = ::T.let(nil, ::T.untyped)
end

module Mail::Multibyte::Unicode
  HANGUL_JAMO_FIRST = ::T.let(nil, ::T.untyped)
  HANGUL_JAMO_LAST = ::T.let(nil, ::T.untyped)
  HANGUL_LBASE = ::T.let(nil, ::T.untyped)
  HANGUL_LCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_NCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SBASE = ::T.let(nil, ::T.untyped)
  HANGUL_SCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_SLAST = ::T.let(nil, ::T.untyped)
  HANGUL_TBASE = ::T.let(nil, ::T.untyped)
  HANGUL_TCOUNT = ::T.let(nil, ::T.untyped)
  HANGUL_VBASE = ::T.let(nil, ::T.untyped)
  HANGUL_VCOUNT = ::T.let(nil, ::T.untyped)
  LEADERS_AND_TRAILERS = ::T.let(nil, ::T.untyped)
  LEADERS_PAT = ::T.let(nil, ::T.untyped)
  NORMALIZATION_FORMS = ::T.let(nil, ::T.untyped)
  TRAILERS_PAT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  WHITESPACE = ::T.let(nil, ::T.untyped)
end

class Mail::Multibyte::Unicode::UnicodeDatabase
  ATTRIBUTES = ::T.let(nil, ::T.untyped)
end

class Mail::OptionalField
end

class Mail::OptionalField
end

class Mail::POP3
  def connection(&block); end

  def delete_all(); end

  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end
end

class Mail::POP3
end

module Mail::Parsers::ContentDispositionParser
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def disposition_type(); end

  def disposition_type=(_); end

  def error(); end

  def error=(_); end

  def parameters(); end

  def parameters=(_); end
end

class Mail::Parsers::ContentDispositionParser::ContentDispositionStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentDispositionParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentLocationParser
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def error(); end

  def error=(_); end

  def location(); end

  def location=(_); end
end

class Mail::Parsers::ContentLocationParser::ContentLocationStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentLocationParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTransferEncodingParser
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def encoding(); end

  def encoding=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::ContentTransferEncodingParser::ContentTransferEncodingStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentTransferEncodingParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ContentTypeParser
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def error(); end

  def error=(_); end

  def main_type(); end

  def main_type=(_); end

  def parameters(); end

  def parameters=(_); end

  def sub_type(); end

  def sub_type=(_); end
end

class Mail::Parsers::ContentTypeParser::ContentTypeStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ContentTypeParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::EnvelopeFromParser
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def address(); end

  def address=(_); end

  def ctime_date(); end

  def ctime_date=(_); end

  def error(); end

  def error=(_); end
end

class Mail::Parsers::EnvelopeFromParser::EnvelopeFromStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::EnvelopeFromParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MessageIdsParser
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def error(); end

  def error=(_); end

  def message_ids(); end

  def message_ids=(_); end
end

class Mail::Parsers::MessageIdsParser::MessageIdsStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::MessageIdsParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::MimeVersionParser
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def error(); end

  def error=(_); end

  def major(); end

  def major=(_); end

  def minor(); end

  def minor=(_); end
end

class Mail::Parsers::MimeVersionParser::MimeVersionStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::MimeVersionParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

class Mail::Parsers::PhraseListsParser
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def error(); end

  def error=(_); end

  def phrases(); end

  def phrases=(_); end
end

class Mail::Parsers::PhraseListsParser::PhraseListsStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Mail::Parsers::PhraseListsParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

module Mail::Parsers::ReceivedParser
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def date(); end

  def date=(_); end

  def error(); end

  def error=(_); end

  def info(); end

  def info=(_); end

  def time(); end

  def time=(_); end
end

class Mail::Parsers::ReceivedParser::ReceivedStruct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Mail::Parsers::ReceivedParser
  extend ::Mail::ParserTools
  def self.en_comment_tail(); end

  def self.en_comment_tail=(en_comment_tail); end

  def self.en_main(); end

  def self.en_main=(en_main); end

  def self.error(); end

  def self.error=(error); end

  def self.first_final(); end

  def self.first_final=(first_final); end

  def self.parse(data); end

  def self.start(); end

  def self.start=(start); end
end

class Mail::PartsList
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Mail::PhraseList
  def initialize(string); end

  def phrases(); end
end

class Mail::PhraseList
end

class Mail::ReceivedElement
  def date_time(); end

  def info(); end

  def initialize(string); end

  def to_s(*args); end
end

class Mail::ReceivedElement
end

class Mail::ReceivedField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReferencesField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReplyToField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentBccField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentCcField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentDateField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentFromField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentMessageIdField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentSenderField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ResentToField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::ReturnPathField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::SMTP
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SMTPConnection
  def deliver!(mail); end

  def initialize(values); end

  def settings(); end

  def settings=(settings); end

  def smtp(); end

  def smtp=(smtp); end
end

class Mail::SMTPConnection
end

class Mail::SenderField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::Sendmail
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Mail::SmtpEnvelope
  MAX_ADDRESS_BYTESIZE = ::T.let(nil, ::T.untyped)
end

class Mail::SubjectField
  NAME = ::T.let(nil, ::T.untyped)
end

class Mail::TestRetriever
  def find(options=T.unsafe(nil), &block); end

  def initialize(values); end
end

class Mail::TestRetriever
  def self.emails(); end

  def self.emails=(val); end
end

class Mail::ToField
  NAME = ::T.let(nil, ::T.untyped)
end

module Mail::Utilities
  TO_CRLF_REGEX = ::T.let(nil, ::T.untyped)
end

module Mail::VERSION
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
end

module Marcel
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  MAGIC = ::T.let(nil, ::T.untyped)
  TYPE_EXTS = ::T.let(nil, ::T.untyped)
  TYPE_PARENTS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Marcel::MimeType
  BINARY = ::T.let(nil, ::T.untyped)
end

class MatchData
  def bytebegin(arg); end

  def byteend(arg); end

  def deconstruct(); end

  def deconstruct_keys(arg); end

  def match(arg); end

  def match_length(arg); end
end

class Matrix
  SELECTORS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Matrix::EigenvalueDecomposition
  def initialize(a); end
end

class Matrix::LUPDecomposition
  include ::Matrix::ConversionHelper
  def det(); end

  def determinant(); end

  def initialize(a); end

  def l(); end

  def p(); end

  def pivots(); end

  def singular?(); end

  def solve(b); end

  def to_a(); end

  def to_ary(); end

  def u(); end
end

class Matrix::LUPDecomposition
end

class MessagePack::HeldBuffer
end

class MessagePack::HeldBuffer
end

module MessagePack::Time
  Packer = ::T.let(nil, ::T.untyped)
  TIME_AT_3_AVAILABLE = ::T.let(nil, ::T.untyped)
  Unpacker = ::T.let(nil, ::T.untyped)
end

class MessagePack::Timestamp
  TIMESTAMP32_MAX_SEC = ::T.let(nil, ::T.untyped)
  TIMESTAMP64_MAX_SEC = ::T.let(nil, ::T.untyped)
  TYPE = ::T.let(nil, ::T.untyped)
end

class MethodBasedSexpProcessor
  def class_stack(); end

  def in_klass(name); end

  def in_method(name, file, line, line_max=T.unsafe(nil)); end

  def in_sklass(); end

  def klass_name(); end

  def method_locations(); end

  def method_name(); end

  def method_stack(); end

  def process_class(exp); end

  def process_defn(exp); end

  def process_defs(exp); end

  def process_module(exp); end

  def process_sclass(exp); end

  def process_until_empty(exp); end

  def sclass(); end

  def signature(); end

  def with_new_method_stack(); end
end

module MiniMagick::Configuration
  def cli_env(); end

  def cli_env=(cli_env); end

  def cli_prefix(); end

  def cli_prefix=(cli_prefix); end

  def configure(); end

  def errors(); end

  def errors=(errors); end

  def graphicsmagick(); end

  def graphicsmagick=(graphicsmagick); end

  def logger(); end

  def logger=(logger); end

  def restricted_env(); end

  def restricted_env=(restricted_env); end

  def timeout(); end

  def timeout=(timeout); end

  def tmpdir(); end

  def tmpdir=(tmpdir); end

  def warnings(); end

  def warnings=(warnings); end
end

module MiniMagick::Configuration
  def self.extended(base); end
end

class MiniMagick::Image
  def ==(other); end

  def [](value); end

  def collapse!(frame=T.unsafe(nil)); end

  def colorspace(*args); end

  def combine_options(&block); end

  def composite(other_image, output_extension=T.unsafe(nil), mask=T.unsafe(nil)); end

  def data(*args); end

  def destroy!(); end

  def dimensions(*args); end

  def eql?(other); end

  def exif(*args); end

  def format(format, page=T.unsafe(nil), read_opts=T.unsafe(nil)); end

  def frames(); end

  def get_pixels(map=T.unsafe(nil)); end

  def height(*args); end

  def human_size(*args); end

  def identify(); end

  def info(value); end

  def initialize(input_path, tempfile=T.unsafe(nil), &block); end

  def landscape?(); end

  def layer?(); end

  def layers(); end

  def method_missing(name, *args); end

  def mogrify(page=T.unsafe(nil)); end

  def pages(); end

  def path(); end

  def portrait?(); end

  def resolution(*args); end

  def signature(*args); end

  def size(*args); end

  def tempfile(); end

  def to_blob(); end

  def type(*args); end

  def valid?(); end

  def validate!(); end

  def width(*args); end

  def write(output_to); end
end

class MiniMagick::Image::Info
  def [](value, *args); end

  def cheap_info(value); end

  def clear(); end

  def colorspace(); end

  def data(); end

  def exif(); end

  def identify(); end

  def initialize(path); end

  def parse_warnings(raw_info); end

  def raw(value); end

  def raw_exif(value); end

  def resolution(unit=T.unsafe(nil)); end

  def signature(); end
  ASCII_ENCODED_EXIF_KEYS = ::T.let(nil, ::T.untyped)
end

class MiniMagick::Image
  def self.attribute(name, key=T.unsafe(nil)); end

  def self.create(ext=T.unsafe(nil), &block); end

  def self.get_image_from_pixels(pixels, dimension, map, depth, format); end

  def self.import_pixels(blob, columns, rows, depth, map, format=T.unsafe(nil)); end

  def self.open(path_or_url, ext=T.unsafe(nil), **options); end

  def self.read(stream, ext=T.unsafe(nil)); end
end

class MiniMagick::Shell
  def execute(command, stdin: T.unsafe(nil), timeout: T.unsafe(nil)); end

  def run(command, errors: T.unsafe(nil), warnings: T.unsafe(nil), **options); end
end

class MiniMagick::Tool
  def +(*values); end

  def <<(arg); end

  def args(); end

  def call(**options); end

  def canvas(value=T.unsafe(nil)); end

  def clone(*args); end

  def command(); end

  def executable(); end

  def gradient(value=T.unsafe(nil)); end

  def initialize(name, **options); end

  def logo(value=T.unsafe(nil)); end

  def merge!(new_args); end

  def method_missing(name, *args); end

  def name(); end

  def pango(value=T.unsafe(nil)); end

  def pattern(value=T.unsafe(nil)); end

  def plasma(value=T.unsafe(nil)); end

  def radial_gradient(value=T.unsafe(nil)); end

  def rose(value=T.unsafe(nil)); end

  def stack(*args); end

  def stdin(); end

  def stdout(); end

  def text(value=T.unsafe(nil)); end

  def xc(value=T.unsafe(nil)); end
  CREATION_OPERATORS = ::T.let(nil, ::T.untyped)
end

class MiniMagick::Tool::Animate
  def initialize(*args); end
end

class MiniMagick::Tool::Compare
  def initialize(*args); end
end

class MiniMagick::Tool::Composite
  def initialize(*args); end
end

class MiniMagick::Tool::Conjure
  def initialize(*args); end
end

class MiniMagick::Tool::Convert
  def initialize(*args); end
end

class MiniMagick::Tool::Display
  def initialize(*args); end
end

class MiniMagick::Tool::Identify
  def initialize(*args); end
end

class MiniMagick::Tool::Import
  def initialize(*args); end
end

class MiniMagick::Tool::Magick
  def initialize(*args); end
end

class MiniMagick::Tool::Mogrify
  def initialize(*args); end
end

class MiniMagick::Tool::Montage
  def initialize(*args); end
end

class MiniMagick::Tool::Stream
  def initialize(*args); end
end

class MiniMagick::Tool
  def self.new(name, **options); end
end

module MiniMagick::Utilities
  def self.tempfile(extension); end

  def self.which(cmd); end
end

module MiniMagick::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

module MiniMagick
  def self.animate(**options, &block); end

  def self.cli_version(); end

  def self.compare(**options, &block); end

  def self.composite(**options, &block); end

  def self.conjure(**options, &block); end

  def self.convert(**options, &block); end

  def self.display(**options, &block); end

  def self.identify(**options, &block); end

  def self.imagemagick7?(); end

  def self.import(**options, &block); end

  def self.mogrify(**options, &block); end

  def self.montage(**options, &block); end

  def self.stream(**options, &block); end

  def self.version(); end
end

module MiniMime
  VERSION = ::T.let(nil, ::T.untyped)
end

MiniMime::Db::PReadFile = File

class MiniMime::Db::RandomAccessDb
  MAX_CACHED = ::T.let(nil, ::T.untyped)
end

class MiniMime::Info
  BINARY_ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Minitest
  VERSION = ::T.let(nil, ::T.untyped)
end

class Minitest::Assertion
  RE = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  E = ::T.let(nil, ::T.untyped)
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class Minitest::BacktraceFilter
  MT_RE = ::T.let(nil, ::T.untyped)
end

module Minitest::Reportable
  BASE_DIR = ::T.let(nil, ::T.untyped)
end

class Minitest::Runnable
  SIGNALS = ::T.let(nil, ::T.untyped)
end

class Minitest::Test
  PASSTHROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  SETUP_METHODS = ::T.let(nil, ::T.untyped)
  TEARDOWN_METHODS = ::T.let(nil, ::T.untyped)
end

class Minitest::UnexpectedError
  BASE_RE = ::T.let(nil, ::T.untyped)
end

class Module
  include ::Zeitwerk::ConstAdded
  def set_temporary_name(arg); end

  def undefined_instance_methods(); end
end

Module::DelegationError = ActiveSupport::DelegationError

class Monitor
  def enter(); end

  def exit(); end

  def mon_check_owner(); end

  def mon_enter(); end

  def mon_exit(); end

  def mon_locked?(); end

  def mon_owned?(); end

  def mon_synchronize(); end

  def mon_try_enter(); end

  def new_cond(); end

  def synchronize(); end

  def try_enter(); end

  def try_mon_enter(); end

  def wait_for_cond(arg, arg1); end
end

module MonitorMixin
  def initialize(*arg, **arg1, &arg2); end
end

class MonitorMixin::ConditionVariable
  def initialize(monitor); end
end

module NIO
  ENGINE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class NIO::ByteBuffer
  include ::Enumerable
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::MarkUnsetError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::OverflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NIO::ByteBuffer::UnderflowError
end

class NameError
  include ::ErrorHighlight::CoreExt
  include ::DidYouMean::Correctable
end

class Net::APOP
end

class Net::APOP
end

Net::APOPSession = Net::APOP

class Net::HTTP
  def extra_chain_cert(); end

  def extra_chain_cert=(extra_chain_cert); end

  def ignore_eof(); end

  def ignore_eof=(ignore_eof); end

  def ipaddr(); end

  def ipaddr=(addr); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def proxy_use_ssl=(proxy_use_ssl); end

  def response_body_encoding(); end

  def response_body_encoding=(value); end

  def verify_hostname(); end

  def verify_hostname=(verify_hostname); end

  def write_timeout(); end

  def write_timeout=(sec); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::HTTP
  def self.default_configuration(); end

  def self.default_configuration=(default_configuration); end

  def self.proxy_use_ssl(); end

  def self.put(url, data, header=T.unsafe(nil)); end
end

class Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
end

Net::HTTPClientError::EXCEPTION_TYPE = Net::HTTPClientException

class Net::HTTPEarlyHints
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPEarlyHints
end

module Net::HTTPHeader
  MAX_FIELD_LENGTH = ::T.let(nil, ::T.untyped)
  MAX_KEY_LENGTH = ::T.let(nil, ::T.untyped)
end

Net::HTTPInformation::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPLoopDetected
end

class Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPMisdirectedRequest
end

Net::HTTPMovedTemporarily = Net::HTTPFound

Net::HTTPMultipleChoice = Net::HTTPMultipleChoices

class Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPNotExtended
end

class Net::HTTPPayloadTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPPayloadTooLarge
end

class Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPProcessing
end

class Net::HTTPRangeNotSatisfiable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPRangeNotSatisfiable
end

Net::HTTPRedirection::EXCEPTION_TYPE = Net::HTTPRetriableError

Net::HTTPRequestURITooLarge = Net::HTTPURITooLong

class Net::HTTPResponse
  def body_encoding(); end

  def body_encoding=(value); end

  def ignore_eof(); end

  def ignore_eof=(ignore_eof); end
end

class Net::HTTPResponse::Inflater
  def bytes_inflated(); end
end

Net::HTTPServerError::EXCEPTION_TYPE = Net::HTTPFatalError

Net::HTTPSession = Net::HTTP

Net::HTTPSuccess::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPURITooLong
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPURITooLong
end

Net::HTTPUnknownResponse::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPVariantAlsoNegotiates
end

class Net::IMAP
  include ::Net::IMAP::DeprecatedClientOptions
  def auth_capable?(mechanism); end

  def auth_mechanisms(); end

  def capabilities(); end

  def capabilities_cached?(); end

  def capability?(capability); end

  def capable?(capability); end

  def clear_cached_capabilities(); end

  def clear_responses(type=T.unsafe(nil)); end

  def config(); end

  def enable(*capabilities); end

  def extract_responses(type); end

  def host(); end

  def id(client_id=T.unsafe(nil)); end

  def idle_response_timeout(); end

  def logout!(); end

  def namespace(); end

  def open_timeout(); end

  def port(); end

  def ssl_ctx(); end

  def ssl_ctx_params(); end

  def tls_verified?(); end

  def uid_expunge(uid_set); end

  def unselect(); end
  ALL = ::T.let(nil, ::T.untyped)
  ARCHIVE = ::T.let(nil, ::T.untyped)
  DRAFTS = ::T.let(nil, ::T.untyped)
  ENABLE_ALIASES = ::T.let(nil, ::T.untyped)
  HASCHILDREN = ::T.let(nil, ::T.untyped)
  HASNOCHILDREN = ::T.let(nil, ::T.untyped)
  HAS_CHILDREN = ::T.let(nil, ::T.untyped)
  HAS_NO_CHILDREN = ::T.let(nil, ::T.untyped)
  JUNK = ::T.let(nil, ::T.untyped)
  NONEXISTENT = ::T.let(nil, ::T.untyped)
  NO_INFERIORS = ::T.let(nil, ::T.untyped)
  NO_SELECT = ::T.let(nil, ::T.untyped)
  REMOTE = ::T.let(nil, ::T.untyped)
  RESPONSE_ERRORS = ::T.let(nil, ::T.untyped)
  SENT = ::T.let(nil, ::T.untyped)
  STRFDATE = ::T.let(nil, ::T.untyped)
  STRFTIME = ::T.let(nil, ::T.untyped)
  SUBSCRIBED = ::T.let(nil, ::T.untyped)
  TRASH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::AppendUIDData
  def initialize(uidvalidity:, assigned_uids:); end

  def size(); end
end

class Net::IMAP::AppendUIDData
end

module Net::IMAP::Authenticators
  def add_authenticator(*arg, **arg1, &arg2); end

  def authenticator(*arg, **arg1, &arg2); end
end

module Net::IMAP::Authenticators
end

module Net::IMAP::BodyStructure
end

module Net::IMAP::BodyStructure
end

class Net::IMAP::BodyTypeBasic
  include ::Net::IMAP::BodyStructure
end

class Net::IMAP::BodyTypeMessage
  include ::Net::IMAP::BodyStructure
end

class Net::IMAP::BodyTypeMultipart
  include ::Net::IMAP::BodyStructure
end

class Net::IMAP::BodyTypeText
  include ::Net::IMAP::BodyStructure
end

class Net::IMAP::ClientID
end

class Net::IMAP::ClientID
end

class Net::IMAP::CommandData
  def self.[](*arg); end

  def self.members(); end

  def self.new(*arg); end
end

class Net::IMAP::Config
  include ::Net::IMAP::Config::AttrAccessors
  include ::Net::IMAP::Config::AttrInheritance
  include ::Net::IMAP::Config::AttrTypeCoercion
  def defaults_hash(); end

  def initialize(parent=T.unsafe(nil), **attrs); end

  def load_defaults(version); end

  def responses_without_args(); end

  def responses_without_args=(val); end

  def to_h(); end

  def update(**attrs); end

  def with(**attrs); end
end

module Net::IMAP::Config::AttrAccessors
  def data(); end

  def debug(*args, **arg, &block); end

  def debug=(*args, **arg, &block); end

  def enforce_logindisabled(*args, **arg, &block); end

  def enforce_logindisabled=(*args, **arg, &block); end

  def freeze(); end

  def idle_response_timeout(*args, **arg, &block); end

  def idle_response_timeout=(*args, **arg, &block); end

  def initialize(); end

  def open_timeout(*args, **arg, &block); end

  def open_timeout=(*args, **arg, &block); end

  def parser_max_deprecated_uidplus_data_size(*args, **arg, &block); end

  def parser_max_deprecated_uidplus_data_size=(*args, **arg, &block); end

  def parser_use_deprecated_uidplus_data(*args, **arg, &block); end

  def parser_use_deprecated_uidplus_data=(*args, **arg, &block); end

  def responses_without_block(*args, **arg, &block); end

  def responses_without_block=(*args, **arg, &block); end

  def sasl_ir(*args, **arg, &block); end

  def sasl_ir=(*args, **arg, &block); end
end

class Net::IMAP::Config::AttrAccessors::Struct
  def debug(); end

  def debug=(_); end

  def enforce_logindisabled(); end

  def enforce_logindisabled=(_); end

  def idle_response_timeout(); end

  def idle_response_timeout=(_); end

  def open_timeout(); end

  def open_timeout=(_); end

  def parser_max_deprecated_uidplus_data_size(); end

  def parser_max_deprecated_uidplus_data_size=(_); end

  def parser_use_deprecated_uidplus_data(); end

  def parser_use_deprecated_uidplus_data=(_); end

  def responses_without_block(); end

  def responses_without_block=(_); end

  def sasl_ir(); end

  def sasl_ir=(_); end
end

class Net::IMAP::Config::AttrAccessors::Struct
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module Net::IMAP::Config::AttrAccessors
  extend ::Forwardable
  def self.attr_accessor(name); end

  def self.struct(); end
end

module Net::IMAP::Config::AttrInheritance
  def debug(); end

  def enforce_logindisabled(); end

  def idle_response_timeout(); end

  def inherited?(attr); end

  def initialize(parent=T.unsafe(nil)); end

  def new(**attrs); end

  def open_timeout(); end

  def parent(); end

  def parser_max_deprecated_uidplus_data_size(); end

  def parser_use_deprecated_uidplus_data(); end

  def reset(attr=T.unsafe(nil)); end

  def responses_without_block(); end

  def sasl_ir(); end
end

module Net::IMAP::Config::AttrInheritance
  def self.attr_accessor(name); end
end

module Net::IMAP::Config::AttrTypeCoercion
  def debug=(val); end

  def debug?(); end

  def enforce_logindisabled=(val); end

  def idle_response_timeout=(val); end

  def open_timeout=(val); end

  def parser_max_deprecated_uidplus_data_size=(val); end

  def parser_use_deprecated_uidplus_data=(val); end

  def responses_without_block=(val); end

  def sasl_ir=(val); end

  def sasl_ir?(); end
end

module Net::IMAP::Config::AttrTypeCoercion
  def self.attr_accessor(attr, type: T.unsafe(nil)); end

  def self.boolean(attr); end

  def self.enum(attr, enum); end

  def self.integer(attr); end
end

class Net::IMAP::Config
  def self.[](config); end

  def self.default(); end

  def self.global(); end

  def self.version_defaults(); end
end

class Net::IMAP::CopyUIDData
  def [](source_uid); end

  def assigned_uid_for(source_uid); end

  def each(&blk); end

  def each_pair(); end

  def each_uid_pair(); end

  def initialize(uidvalidity:, source_uids:, assigned_uids:); end

  def size(); end

  def source_uid_for(assigned_uid); end

  def uid_mapping(); end
end

class Net::IMAP::CopyUIDData
end

Net::IMAP::Data = Net::IMAP::DataLite

module Net::IMAP::DeprecatedClientOptions
  def initialize(host, port_or_options=T.unsafe(nil), *deprecated, **options); end

  def starttls(*deprecated, **options); end
end

module Net::IMAP::DeprecatedClientOptions
end

class Net::IMAP::ESearchResult
  def all(); end

  def count(); end

  def initialize(tag: T.unsafe(nil), uid: T.unsafe(nil), data: T.unsafe(nil)); end

  def max(); end

  def min(); end

  def modseq(); end

  def partial(); end

  def to_a(); end

  def uid?(); end
end

class Net::IMAP::ESearchResult::PartialResult
  def initialize(range:, results:); end

  def to_a(); end
end

class Net::IMAP::ESearchResult::PartialResult
end

class Net::IMAP::ESearchResult
end

class Net::IMAP::ExtensionData
end

class Net::IMAP::ExtensionData
end

class Net::IMAP::FetchStruct
  def attr_upcase(); end

  def binary(*part_nums, offset: T.unsafe(nil)); end

  def binary_size(*part_nums); end

  def body(); end

  def body_structure(); end

  def bodystructure(); end

  def emailid(); end

  def envelope(); end

  def flags(); end

  def header(*part_nums, fields: T.unsafe(nil), except: T.unsafe(nil), offset: T.unsafe(nil)); end

  def header_fields(first, *rest, part: T.unsafe(nil), offset: T.unsafe(nil)); end

  def header_fields_not(first, *rest, part: T.unsafe(nil), offset: T.unsafe(nil)); end

  def internal_date(); end

  def internaldate(); end

  def message(offset: T.unsafe(nil)); end

  def mime(part, *subparts, offset: T.unsafe(nil)); end

  def modseq(); end

  def part(index, *subparts, offset: T.unsafe(nil)); end

  def rfc822(); end

  def rfc822_header(); end

  def rfc822_size(); end

  def rfc822_text(); end

  def text(*part, offset: T.unsafe(nil)); end

  def threadid(); end

  def uid(); end
end

class Net::IMAP::FetchStruct
end

class Net::IMAP::IgnoredResponse
end

class Net::IMAP::IgnoredResponse
end

class Net::IMAP::InvalidResponseError
end

class Net::IMAP::InvalidResponseError
end

class Net::IMAP::LoginDisabledError
  def initialize(msg=T.unsafe(nil), *arg, **arg1, &arg2); end
end

class Net::IMAP::LoginDisabledError
end

class Net::IMAP::Namespace
end

class Net::IMAP::Namespace
end

class Net::IMAP::Namespaces
end

class Net::IMAP::Namespaces
end

module Net::IMAP::NumValidator
  def self.ensure_mod_sequence_value(num); end

  def self.valid_mod_sequence_value?(num); end
end

class Net::IMAP::PartialRange
  def formatted(); end

  def initialize(data:); end
  NEG_RANGE = ::T.let(nil, ::T.untyped)
  Negative = ::T.let(nil, ::T.untyped)
  POS_RANGE = ::T.let(nil, ::T.untyped)
  Positive = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::PartialRange
end

class Net::IMAP::ResponseParser
  include ::Net::IMAP::ResponseParser::ParserUtils
  include ::Net::IMAP::ResponseParser::ResponseConditions
  def CRLF!(); end

  def CRLF?(); end

  def EOF!(); end

  def EOF?(); end

  def NIL!(); end

  def NIL?(); end

  def PLUS!(); end

  def PLUS?(); end

  def SP!(); end

  def SP?(); end

  def STAR!(); end

  def STAR?(); end

  def body_fld_enc(); end

  def body_fld_lines(); end

  def body_fld_octets(); end

  def case_insensitive__string(); end

  def case_insensitive__string?(); end

  def config(); end

  def date_time(); end

  def lbra(); end

  def lbra?(); end

  def lookahead_CRLF!(); end

  def lookahead_EOF!(); end

  def lookahead_NIL!(); end

  def lookahead_PLUS?(); end

  def lookahead_SP?(); end

  def lookahead_STAR?(); end

  def lookahead_body?(); end

  def lookahead_case_insensitive__string!(); end

  def lookahead_lbra?(); end

  def lookahead_lpar?(); end

  def lookahead_number!(); end

  def lookahead_quoted!(); end

  def lookahead_rbra?(); end

  def lookahead_rpar?(); end

  def lookahead_string!(); end

  def lookahead_string8!(); end

  def lookahead_tagged_ext_label!(); end

  def lookahead_thread_list?(); end

  def lookahead_thread_nested?(); end

  def lpar(); end

  def lpar?(); end

  def media_subtype(); end

  def mod_sequence_value(); end

  def mod_sequence_valzer(); end

  def number(); end

  def number64(); end

  def number64?(); end

  def number?(); end

  def nz_number(); end

  def nz_number64(); end

  def nz_number?(); end

  def peek_PLUS?(); end

  def peek_SP?(); end

  def peek_STAR?(); end

  def peek_lbra?(); end

  def peek_lpar?(); end

  def peek_rbra?(); end

  def peek_rpar?(); end

  def permsg_modsequence(); end

  def quirky_SP?(); end

  def quoted(); end

  def quoted?(); end

  def rbra(); end

  def rbra?(); end

  def rpar(); end

  def rpar?(); end

  def search_modifier_name(); end

  def string(); end

  def string8(); end

  def string8?(); end

  def string?(); end

  def tagged_ext_label(); end

  def tagged_ext_label?(); end

  def uniqueid(); end

  def x_gm_id(); end
  ASTRING_CHARS_TOKENS = ::T.let(nil, ::T.untyped)
  ASTRING_TOKENS = ::T.let(nil, ::T.untyped)
  RE_RESPONSE_TYPE = ::T.let(nil, ::T.untyped)
  SEQUENCE_SET_TOKENS = ::T.let(nil, ::T.untyped)
  SPACES_REGEXP = ::T.let(nil, ::T.untyped)
  TAG_TOKENS = ::T.let(nil, ::T.untyped)
  T_LITERAL8 = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::ParserUtils
end

module Net::IMAP::ResponseParser::ParserUtils::Generator
  def def_char_matchers(name, char, token); end

  def def_token_matchers(name, *token_symbols, coerce: T.unsafe(nil), send: T.unsafe(nil)); end
  LOOKAHEAD = ::T.let(nil, ::T.untyped)
  SHIFT_TOKEN = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::ParserUtils::Generator
end

module Net::IMAP::ResponseParser::ParserUtils
end

module Net::IMAP::ResponseParser::Patterns
  include ::Net::IMAP::ResponseParser::Patterns::RFC5234
  include ::Net::IMAP::ResponseParser::Patterns::RFC3629
  ASTRING_CHAR = ::T.let(nil, ::T.untyped)
  ASTRING_CHARS = ::T.let(nil, ::T.untyped)
  ASTRING_SPECIALS = ::T.let(nil, ::T.untyped)
  ATOM = ::T.let(nil, ::T.untyped)
  ATOMISH = ::T.let(nil, ::T.untyped)
  ATOM_CHAR = ::T.let(nil, ::T.untyped)
  ATOM_SPECIALS = ::T.let(nil, ::T.untyped)
  CHAR8 = ::T.let(nil, ::T.untyped)
  CODE_TEXT = ::T.let(nil, ::T.untyped)
  CODE_TEXT_CHAR = ::T.let(nil, ::T.untyped)
  FLAG = ::T.let(nil, ::T.untyped)
  FLAG_EXTENSION = ::T.let(nil, ::T.untyped)
  FLAG_KEYWORD = ::T.let(nil, ::T.untyped)
  FLAG_LIST = ::T.let(nil, ::T.untyped)
  FLAG_PERM = ::T.let(nil, ::T.untyped)
  FLAG_PERM_LIST = ::T.let(nil, ::T.untyped)
  LIST_WILDCARDS = ::T.let(nil, ::T.untyped)
  LITERAL = ::T.let(nil, ::T.untyped)
  LITERAL8 = ::T.let(nil, ::T.untyped)
  MBX_FLAG = ::T.let(nil, ::T.untyped)
  MBX_LIST_FLAGS = ::T.let(nil, ::T.untyped)
  NZ_NUMBER = ::T.let(nil, ::T.untyped)
  PARTIAL_RANGE = ::T.let(nil, ::T.untyped)
  PARTIAL_RANGE_FIRST = ::T.let(nil, ::T.untyped)
  PARTIAL_RANGE_LAST = ::T.let(nil, ::T.untyped)
  QUIRKY_FLAG = ::T.let(nil, ::T.untyped)
  QUIRKY_FLAGS_LIST = ::T.let(nil, ::T.untyped)
  QUOTED_CHAR_esc = ::T.let(nil, ::T.untyped)
  QUOTED_CHAR_rev1 = ::T.let(nil, ::T.untyped)
  QUOTED_CHAR_rev2 = ::T.let(nil, ::T.untyped)
  QUOTED_CHAR_safe = ::T.let(nil, ::T.untyped)
  QUOTED_SPECIALS = ::T.let(nil, ::T.untyped)
  QUOTED_rev1 = ::T.let(nil, ::T.untyped)
  QUOTED_rev2 = ::T.let(nil, ::T.untyped)
  RESP_SPECIALS = ::T.let(nil, ::T.untyped)
  SEQUENCE_SET = ::T.let(nil, ::T.untyped)
  SEQUENCE_SET_ITEM = ::T.let(nil, ::T.untyped)
  SEQUENCE_SET_STR = ::T.let(nil, ::T.untyped)
  SEQ_NUMBER = ::T.let(nil, ::T.untyped)
  SEQ_RANGE = ::T.let(nil, ::T.untyped)
  TAG = ::T.let(nil, ::T.untyped)
  TAGGED_EXT_LABEL = ::T.let(nil, ::T.untyped)
  TAGGED_LABEL_CHAR = ::T.let(nil, ::T.untyped)
  TAGGED_LABEL_FCHAR = ::T.let(nil, ::T.untyped)
  TEXT_CHAR = ::T.let(nil, ::T.untyped)
  TEXT_rev1 = ::T.let(nil, ::T.untyped)
  TEXT_rev2 = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::Patterns::CharClassSubtraction
end

module Net::IMAP::ResponseParser::Patterns::CharClassSubtraction
end

module Net::IMAP::ResponseParser::Patterns::RFC3629
  UTF8_1 = ::T.let(nil, ::T.untyped)
  UTF8_2 = ::T.let(nil, ::T.untyped)
  UTF8_3 = ::T.let(nil, ::T.untyped)
  UTF8_4 = ::T.let(nil, ::T.untyped)
  UTF8_CHAR = ::T.let(nil, ::T.untyped)
  UTF8_OCTETS = ::T.let(nil, ::T.untyped)
  UTF8_TAIL = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::Patterns::RFC3629
end

module Net::IMAP::ResponseParser::Patterns::RFC5234
  ALPHA = ::T.let(nil, ::T.untyped)
  CHAR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  CTL = ::T.let(nil, ::T.untyped)
  DIGIT = ::T.let(nil, ::T.untyped)
  DQUOTE = ::T.let(nil, ::T.untyped)
  HEXDIG = ::T.let(nil, ::T.untyped)
  OCTET = ::T.let(nil, ::T.untyped)
  SP = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::Patterns::RFC5234
end

module Net::IMAP::ResponseParser::Patterns
  def self.unescape_quoted(quoted); end

  def self.unescape_quoted!(quoted); end
end

module Net::IMAP::ResponseParser::ResponseConditions
  AUTH_CONDS = ::T.let(nil, ::T.untyped)
  BAD = ::T.let(nil, ::T.untyped)
  BYE = ::T.let(nil, ::T.untyped)
  GREETING_CONDS = ::T.let(nil, ::T.untyped)
  NO = ::T.let(nil, ::T.untyped)
  OK = ::T.let(nil, ::T.untyped)
  PREAUTH = ::T.let(nil, ::T.untyped)
  RESP_CONDS = ::T.let(nil, ::T.untyped)
  RESP_COND_STATES = ::T.let(nil, ::T.untyped)
  RESP_DATA_CONDS = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::ResponseParser::ResponseConditions
end

class Net::IMAP::ResponseParser::Token
  def self.keyword_init?(); end
end

class Net::IMAP::ResponseParser
  extend ::Net::IMAP::ResponseParser::ParserUtils::Generator
end

class Net::IMAP::ResponseText
  EMPTY = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::SASL
end

class Net::IMAP::SASL::AnonymousAuthenticator
  def anonymous_message(); end

  def done?(); end

  def initial_response?(); end

  def initialize(anon_msg=T.unsafe(nil), anonymous_message: T.unsafe(nil), **arg); end

  def process(_server_challenge_string); end
end

class Net::IMAP::SASL::AnonymousAuthenticator
end

class Net::IMAP::SASL::AuthenticationCanceled
end

class Net::IMAP::SASL::AuthenticationCanceled
end

class Net::IMAP::SASL::AuthenticationError
end

class Net::IMAP::SASL::AuthenticationError
end

class Net::IMAP::SASL::AuthenticationExchange
  def authenticate(); end

  def authenticator(); end

  def done?(); end

  def initialize(client, mechanism, authenticator, sasl_ir: T.unsafe(nil)); end

  def mechanism(); end

  def send_initial_response?(); end
end

class Net::IMAP::SASL::AuthenticationExchange
  def self.authenticate(*arg, **arg1, &arg2); end

  def self.build(client, mechanism, *args, sasl_ir: T.unsafe(nil), **kwargs, &block); end
end

class Net::IMAP::SASL::AuthenticationFailed
end

class Net::IMAP::SASL::AuthenticationFailed
end

class Net::IMAP::SASL::AuthenticationIncomplete
  def initialize(response, message=T.unsafe(nil)); end

  def response(); end
end

class Net::IMAP::SASL::AuthenticationIncomplete
end

class Net::IMAP::SASL::Authenticators
  def add_authenticator(name, authenticator=T.unsafe(nil)); end

  def authenticator(mechanism, *arg, **arg1, &arg2); end

  def initialize(use_defaults: T.unsafe(nil), use_deprecated: T.unsafe(nil)); end

  def mechanism?(name); end

  def names(); end

  def new(mechanism, *arg, **arg1, &arg2); end

  def remove_authenticator(name); end
end

class Net::IMAP::SASL::Authenticators
  def self.normalize_name(mechanism); end
end

Net::IMAP::SASL::BidiStringError = Net::IMAP::StringPrep::BidiStringError

class Net::IMAP::SASL::ClientAdapter
  include ::Net::IMAP::SASL::ProtocolAdapters::Generic
  def auth_capable?(*args, **arg, &block); end

  def authenticate(*arg, **arg1, &arg2); end

  def client(); end

  def command_proc(); end

  def drop_connection(*args, **arg, &block); end

  def drop_connection!(*args, **arg, &block); end

  def host(*args, **arg, &block); end

  def initialize(client, &command_proc); end

  def port(*args, **arg, &block); end

  def response_errors(); end

  def run_command(mechanism, initial_response=T.unsafe(nil), &continuations_handler); end

  def sasl_ir_capable?(*args, **arg, &block); end
end

class Net::IMAP::SASL::ClientAdapter
  extend ::Forwardable
end

class Net::IMAP::SASL::CramMD5Authenticator
  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), pass=T.unsafe(nil), authcid: T.unsafe(nil), username: T.unsafe(nil), password: T.unsafe(nil), secret: T.unsafe(nil), warn_deprecation: T.unsafe(nil), **arg); end

  def process(challenge); end
end

class Net::IMAP::SASL::CramMD5Authenticator
end

class Net::IMAP::SASL::DigestMD5Authenticator
  def authcid(); end

  def authzid(); end

  def charset(); end

  def digest_uri(); end

  def done?(); end

  def host(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), pass=T.unsafe(nil), authz=T.unsafe(nil), username: T.unsafe(nil), password: T.unsafe(nil), authzid: T.unsafe(nil), authcid: T.unsafe(nil), secret: T.unsafe(nil), realm: T.unsafe(nil), service: T.unsafe(nil), host: T.unsafe(nil), service_name: T.unsafe(nil), warn_deprecation: T.unsafe(nil), **arg); end

  def nonce(); end

  def password(); end

  def process(challenge); end

  def qop(); end

  def realm(); end

  def service(); end

  def service_name(); end

  def sparams(); end

  def username(); end
end

class Net::IMAP::SASL::DigestMD5Authenticator
end

class Net::IMAP::SASL::Error
end

class Net::IMAP::SASL::Error
end

class Net::IMAP::SASL::ExternalAuthenticator
  def authzid(); end

  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), authzid: T.unsafe(nil), username: T.unsafe(nil), **arg); end

  def process(_); end

  def username(); end
end

class Net::IMAP::SASL::ExternalAuthenticator
end

module Net::IMAP::SASL::GS2Header
  def gs2_authzid(); end

  def gs2_cb_flag(); end

  def gs2_header(); end
  NO_NULL_CHARS = ::T.let(nil, ::T.untyped)
  RFC5801_SASLNAME = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::SASL::GS2Header
  def self.gs2_saslname_encode(str); end
end

class Net::IMAP::SASL::LoginAuthenticator
  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), pass=T.unsafe(nil), authcid: T.unsafe(nil), username: T.unsafe(nil), password: T.unsafe(nil), secret: T.unsafe(nil), warn_deprecation: T.unsafe(nil), **arg); end

  def process(data); end
end

class Net::IMAP::SASL::LoginAuthenticator
end

class Net::IMAP::SASL::OAuthAuthenticator
  include ::Net::IMAP::SASL::GS2Header
  def authorization(); end

  def authzid(); end

  def done?(); end

  def host(); end

  def initial_client_response(); end

  def initialize(authzid: T.unsafe(nil), host: T.unsafe(nil), port: T.unsafe(nil), username: T.unsafe(nil), query: T.unsafe(nil), mthd: T.unsafe(nil), path: T.unsafe(nil), post: T.unsafe(nil), qs: T.unsafe(nil), **arg); end

  def last_server_response(); end

  def mthd(); end

  def path(); end

  def port(); end

  def post(); end

  def process(data); end

  def qs(); end

  def query(); end

  def username(); end
end

class Net::IMAP::SASL::OAuthAuthenticator
end

class Net::IMAP::SASL::OAuthBearerAuthenticator
  def initial_response?(); end

  def initialize(arg1=T.unsafe(nil), arg2=T.unsafe(nil), oauth2_token: T.unsafe(nil), secret: T.unsafe(nil), **args, &blk); end

  def oauth2_token(); end

  def secret(); end
end

class Net::IMAP::SASL::OAuthBearerAuthenticator
end

class Net::IMAP::SASL::PlainAuthenticator
  def authcid(); end

  def authzid(); end

  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), pass=T.unsafe(nil), authcid: T.unsafe(nil), secret: T.unsafe(nil), username: T.unsafe(nil), password: T.unsafe(nil), authzid: T.unsafe(nil), **arg); end

  def password(); end

  def process(data); end

  def secret(); end

  def username(); end
end

class Net::IMAP::SASL::PlainAuthenticator
end

Net::IMAP::SASL::ProhibitedCodepoint = Net::IMAP::StringPrep::ProhibitedCodepoint

module Net::IMAP::SASL::ProtocolAdapters
end

module Net::IMAP::SASL::ProtocolAdapters::Generic
  def cancel_response(); end

  def command_name(); end

  def decode(string); end

  def encode(string); end

  def encode_ir(string); end

  def service(); end
end

module Net::IMAP::SASL::ProtocolAdapters::Generic
end

module Net::IMAP::SASL::ProtocolAdapters::IMAP
  include ::Net::IMAP::SASL::ProtocolAdapters::Generic
  def service(); end
end

module Net::IMAP::SASL::ProtocolAdapters::IMAP
end

module Net::IMAP::SASL::ProtocolAdapters::POP
  include ::Net::IMAP::SASL::ProtocolAdapters::Generic
  def command_name(); end

  def service(); end
end

module Net::IMAP::SASL::ProtocolAdapters::POP
end

module Net::IMAP::SASL::ProtocolAdapters::SMTP
  include ::Net::IMAP::SASL::ProtocolAdapters::Generic
  def command_name(); end

  def service(); end
end

module Net::IMAP::SASL::ProtocolAdapters::SMTP
end

module Net::IMAP::SASL::ProtocolAdapters
end

Net::IMAP::SASL::SASLprep = Net::IMAP::StringPrep::SASLprep

module Net::IMAP::SASL::ScramAlgorithm
  def H(str); end

  def HMAC(key, data); end

  def Hi(str, salt, iterations); end

  def Normalize(str); end

  def XOR(str1, str2); end

  def auth_message(); end

  def client_key(); end

  def client_proof(); end

  def client_signature(); end

  def salted_password(); end

  def server_key(); end

  def server_signature(); end

  def stored_key(); end
end

module Net::IMAP::SASL::ScramAlgorithm
end

class Net::IMAP::SASL::ScramAuthenticator
  include ::Net::IMAP::SASL::GS2Header
  include ::Net::IMAP::SASL::ScramAlgorithm
  def authcid(); end

  def authzid(); end

  def cbind_input(); end

  def cnonce(); end

  def digest(); end

  def done?(); end

  def initial_client_response(); end

  def initialize(username_arg=T.unsafe(nil), password_arg=T.unsafe(nil), authcid: T.unsafe(nil), username: T.unsafe(nil), authzid: T.unsafe(nil), password: T.unsafe(nil), secret: T.unsafe(nil), min_iterations: T.unsafe(nil), cnonce: T.unsafe(nil), **options); end

  def iterations(); end

  def min_iterations(); end

  def password(); end

  def process(challenge); end

  def salt(); end

  def secret(); end

  def server_error(); end

  def snonce(); end

  def username(); end
end

class Net::IMAP::SASL::ScramAuthenticator
end

class Net::IMAP::SASL::ScramSHA1Authenticator
  DIGEST_NAME = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::SASL::ScramSHA1Authenticator
end

class Net::IMAP::SASL::ScramSHA256Authenticator
  DIGEST_NAME = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::SASL::ScramSHA256Authenticator
end

Net::IMAP::SASL::StringPrep = Net::IMAP::StringPrep

Net::IMAP::SASL::StringPrepError = Net::IMAP::StringPrep::StringPrepError

class Net::IMAP::SASL::XOAuth2Authenticator
  def authzid(); end

  def done?(); end

  def initial_response?(); end

  def initialize(user=T.unsafe(nil), token=T.unsafe(nil), username: T.unsafe(nil), oauth2_token: T.unsafe(nil), authzid: T.unsafe(nil), secret: T.unsafe(nil), **arg); end

  def oauth2_token(); end

  def process(_data); end

  def secret(); end

  def username(); end
end

class Net::IMAP::SASL::XOAuth2Authenticator
end

module Net::IMAP::SASL
  def self.add_authenticator(*arg, **arg1, &arg2); end

  def self.authenticator(*args, registry: T.unsafe(nil), **kwargs, &block); end

  def self.authenticators(); end

  def self.saslprep(string, **opts); end
end

class Net::IMAP::SASLAdapter
  include ::Net::IMAP::SASL::ProtocolAdapters::IMAP
  def drop_connection(); end

  def drop_connection!(); end

  def sasl_ir_capable?(); end
  RESPONSE_ERRORS = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::SASLAdapter
end

class Net::IMAP::SearchResult
  def ==(other); end

  def eql?(other); end

  def initialize(seq_nums, modseq: T.unsafe(nil)); end

  def modseq(); end

  def pretty_print(pp); end

  def to_s(type=T.unsafe(nil)); end

  def to_sequence_set(); end
end

class Net::IMAP::SearchResult
  def self.[](*seq_nums, modseq: T.unsafe(nil)); end
end

class Net::IMAP::SequenceSet
  def &(other); end

  def +(other); end

  def -(other); end

  def <<(object); end

  def ==(other); end

  def ===(other); end

  def [](index, length=T.unsafe(nil)); end

  def ^(other); end

  def add(object); end

  def add?(object); end

  def append(object); end

  def at(index); end

  def clear(); end

  def complement(); end

  def complement!(); end

  def count(); end

  def count_duplicates(); end

  def count_with_duplicates(); end

  def cover?(other); end

  def deconstruct(); end

  def delete(object); end

  def delete?(object); end

  def delete_at(index); end

  def difference(other); end

  def disjoint?(other); end

  def each_element(); end

  def each_entry(&block); end

  def each_number(&block); end

  def each_ordered_number(&block); end

  def each_range(); end

  def elements(); end

  def empty?(); end

  def entries(); end

  def eql?(other); end

  def find_index(number); end

  def find_ordered_index(number); end

  def full?(); end

  def has_duplicates?(); end

  def include?(element); end

  def include_star?(); end

  def initialize(input=T.unsafe(nil)); end

  def intersect?(other); end

  def intersection(other); end

  def limit(max:); end

  def limit!(max:); end

  def max(star: T.unsafe(nil)); end

  def member?(element); end

  def merge(*inputs); end

  def min(star: T.unsafe(nil)); end

  def minmax(star: T.unsafe(nil)); end

  def normalize(); end

  def normalize!(); end

  def normalized_string(); end

  def numbers(); end

  def ordered_at(index); end

  def overlap?(other); end

  def ranges(); end

  def replace(other); end

  def send_data(imap, tag); end

  def size(); end

  def slice(index, length=T.unsafe(nil)); end

  def slice!(index, length=T.unsafe(nil)); end

  def string(); end

  def string=(str); end

  def subtract(*objects); end

  def to_a(); end

  def to_sequence_set(); end

  def to_set(); end

  def tuples(); end

  def union(other); end

  def valid?(); end

  def valid_string(); end

  def validate(); end

  def xor(other); end

  def |(other); end

  def ~(); end
  UINT32_MAX = ::T.let(nil, ::T.untyped)
end

class Net::IMAP::SequenceSet
  def self.[](first, *rest); end

  def self.empty(); end

  def self.full(); end

  def self.try_convert(obj); end
end

module Net::IMAP::StringFormatter
  LITERAL_REGEX = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringFormatter
  def self.nstring(str); end

  def self.string(str); end

  def self.valid_nstring?(str); end

  def self.valid_string?(str); end
end

module Net::IMAP::StringPrep
end

class Net::IMAP::StringPrep::BidiStringError
end

class Net::IMAP::StringPrep::BidiStringError
end

module Net::IMAP::StringPrep::NamePrep
  CHECK_BIDI = ::T.let(nil, ::T.untyped)
  MAPPING_TABLES = ::T.let(nil, ::T.untyped)
  NORMALIZATION = ::T.let(nil, ::T.untyped)
  PROHIBITED_TABLES = ::T.let(nil, ::T.untyped)
  STRINGPREP_PROFILE = ::T.let(nil, ::T.untyped)
  UNASSIGNED_TABLE = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringPrep::NamePrep
  def self.nameprep(string, **opts); end
end

class Net::IMAP::StringPrep::ProhibitedCodepoint
  def initialize(table, *args, **kwargs); end

  def table(); end
end

class Net::IMAP::StringPrep::ProhibitedCodepoint
end

module Net::IMAP::StringPrep::SASLprep
  ASCII_NO_CTRLS = ::T.let(nil, ::T.untyped)
  BIDI_FAILURE = ::T.let(nil, ::T.untyped)
  MAP_TO_NOTHING = ::T.let(nil, ::T.untyped)
  MAP_TO_SPACE = ::T.let(nil, ::T.untyped)
  PROHIBITED = ::T.let(nil, ::T.untyped)
  PROHIBITED_OUTPUT = ::T.let(nil, ::T.untyped)
  PROHIBITED_OUTPUT_STORED = ::T.let(nil, ::T.untyped)
  PROHIBITED_STORED = ::T.let(nil, ::T.untyped)
  TABLES_PROHIBITED = ::T.let(nil, ::T.untyped)
  TABLES_PROHIBITED_STORED = ::T.let(nil, ::T.untyped)
  UNASSIGNED = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringPrep::SASLprep
  def self.saslprep(str, stored: T.unsafe(nil), exception: T.unsafe(nil)); end
end

class Net::IMAP::StringPrep::StringPrepError
  def initialize(*args, string: T.unsafe(nil), profile: T.unsafe(nil)); end

  def profile(); end

  def string(); end
end

class Net::IMAP::StringPrep::StringPrepError
end

module Net::IMAP::StringPrep::Tables
  BIDI_DESC_REQ2 = ::T.let(nil, ::T.untyped)
  BIDI_DESC_REQ3 = ::T.let(nil, ::T.untyped)
  BIDI_FAILS_REQ2 = ::T.let(nil, ::T.untyped)
  BIDI_FAILS_REQ3 = ::T.let(nil, ::T.untyped)
  BIDI_FAILURE = ::T.let(nil, ::T.untyped)
  IN_A_1 = ::T.let(nil, ::T.untyped)
  IN_B_1 = ::T.let(nil, ::T.untyped)
  IN_B_2 = ::T.let(nil, ::T.untyped)
  IN_B_3 = ::T.let(nil, ::T.untyped)
  IN_C_1_1 = ::T.let(nil, ::T.untyped)
  IN_C_1_2 = ::T.let(nil, ::T.untyped)
  IN_C_2_1 = ::T.let(nil, ::T.untyped)
  IN_C_2_2 = ::T.let(nil, ::T.untyped)
  IN_C_3 = ::T.let(nil, ::T.untyped)
  IN_C_4 = ::T.let(nil, ::T.untyped)
  IN_C_5 = ::T.let(nil, ::T.untyped)
  IN_C_6 = ::T.let(nil, ::T.untyped)
  IN_C_7 = ::T.let(nil, ::T.untyped)
  IN_C_8 = ::T.let(nil, ::T.untyped)
  IN_C_9 = ::T.let(nil, ::T.untyped)
  IN_D_1 = ::T.let(nil, ::T.untyped)
  IN_D_1_NEGATED = ::T.let(nil, ::T.untyped)
  IN_D_2 = ::T.let(nil, ::T.untyped)
  MAPPINGS = ::T.let(nil, ::T.untyped)
  MAP_B_1 = ::T.let(nil, ::T.untyped)
  MAP_B_2 = ::T.let(nil, ::T.untyped)
  MAP_B_3 = ::T.let(nil, ::T.untyped)
  REGEXPS = ::T.let(nil, ::T.untyped)
  TITLES = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringPrep::Tables
end

module Net::IMAP::StringPrep::Trace
  CHECK_BIDI = ::T.let(nil, ::T.untyped)
  MAPPING_TABLES = ::T.let(nil, ::T.untyped)
  NORMALIZATION = ::T.let(nil, ::T.untyped)
  PROHIBITED_TABLES = ::T.let(nil, ::T.untyped)
  STRINGPREP_PROFILE = ::T.let(nil, ::T.untyped)
  UNASSIGNED_TABLE = ::T.let(nil, ::T.untyped)
end

module Net::IMAP::StringPrep::Trace
  def self.stringprep_trace(string, **opts); end
end

module Net::IMAP::StringPrep
  def self.[](table); end

  def self.check_bidi!(string, c_8: T.unsafe(nil), profile: T.unsafe(nil)); end

  def self.check_prohibited!(string, *tables, bidi: T.unsafe(nil), unassigned: T.unsafe(nil), stored: T.unsafe(nil), profile: T.unsafe(nil)); end

  def self.map_tables!(string, *tables); end

  def self.stringprep(string, maps:, normalization:, prohibited:, **opts); end
end

class Net::IMAP::ThreadMember
  def all_seqnos(node=T.unsafe(nil)); end

  def to_sequence_set(); end
end

class Net::IMAP::UIDFetchData
  def initialize(*arg, **arg1, &arg2); end
end

class Net::IMAP::UIDFetchData
end

class Net::IMAP::UIDPlusData
  def uid_mapping(); end
end

class Net::IMAP::UIDPlusData
end

class Net::IMAP::UnknownResponseError
end

class Net::IMAP::UnknownResponseError
end

class Net::IMAP::UnparsedData
end

class Net::IMAP::UnparsedData
end

class Net::IMAP::UnparsedNumericResponseData
end

class Net::IMAP::UnparsedNumericResponseData
end

class Net::IMAP::VanishedData
  def earlier?(); end

  def initialize(uids:, earlier:); end

  def to_a(); end
end

class Net::IMAP::VanishedData
end

Net::IMAP::XOauth2Authenticator = Net::IMAP::SASL::XOAuth2Authenticator

class Net::IMAP
  extend ::Net::IMAP::Authenticators
  def self.config(); end

  def self.decode_date(string); end

  def self.decode_datetime(string); end

  def self.decode_time(string); end

  def self.encode_date(date); end

  def self.encode_datetime(time); end

  def self.encode_time(time); end

  def self.format_time(time); end

  def self.parse_date(string); end

  def self.parse_datetime(string); end

  def self.parse_time(string); end

  def self.saslprep(string, **opts); end
end

Net::NetPrivate::Socket = Net::InternetMessageIO

Net::POP = Net::POP3

class Net::POP3
  def active?(); end

  def address(); end

  def apop?(); end

  def auth_only(account, password); end

  def delete_all(); end

  def disable_ssl(); end

  def each(&block); end

  def each_mail(&block); end

  def enable_ssl(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil), port=T.unsafe(nil)); end

  def finish(); end

  def initialize(addr, port=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def logging(msg); end

  def mails(); end

  def n_bytes(); end

  def n_mails(); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def port(); end

  def read_timeout(); end

  def read_timeout=(sec); end

  def reset(); end

  def set_all_uids(); end

  def set_debug_output(arg); end

  def start(account, password); end

  def started?(); end

  def use_ssl?(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::POP3
  def self.APOP(isapop); end

  def self.auth_only(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil)); end

  def self.certs(); end

  def self.create_ssl_params(verify_or_params=T.unsafe(nil), certs=T.unsafe(nil)); end

  def self.default_pop3_port(); end

  def self.default_pop3s_port(); end

  def self.default_port(); end

  def self.delete_all(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.disable_ssl(); end

  def self.enable_ssl(*args); end

  def self.foreach(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.socket_type(); end

  def self.ssl_params(); end

  def self.start(address, port=T.unsafe(nil), account=T.unsafe(nil), password=T.unsafe(nil), isapop=T.unsafe(nil), &block); end

  def self.use_ssl?(); end

  def self.verify(); end
end

class Net::POP3Command
  def apop(account, password); end

  def auth(account, password); end

  def dele(num); end

  def initialize(sock); end

  def list(); end

  def quit(); end

  def retr(num, &block); end

  def rset(); end

  def socket(); end

  def stat(); end

  def top(num, lines=T.unsafe(nil), &block); end

  def uidl(num=T.unsafe(nil)); end
end

class Net::POP3Command
end

Net::POP3Session = Net::POP3

class Net::POPAuthenticationError
end

class Net::POPAuthenticationError
end

class Net::POPBadResponse
end

class Net::POPBadResponse
end

class Net::POPError
end

class Net::POPError
end

class Net::POPMail
  def all(dest=T.unsafe(nil), &block); end

  def delete(); end

  def delete!(); end

  def deleted?(); end

  def header(dest=T.unsafe(nil)); end

  def initialize(num, len, pop, cmd); end

  def length(); end

  def mail(dest=T.unsafe(nil), &block); end

  def number(); end

  def pop(dest=T.unsafe(nil), &block); end

  def size(); end

  def top(lines, dest=T.unsafe(nil)); end

  def uid=(uid); end

  def uidl(); end

  def unique_id(); end
end

class Net::POPMail
end

Net::POPSession = Net::POP3

Net::ProtocRetryError = Net::ProtoRetriableError

class Net::Protocol
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::SMTP
  VERSION = ::T.let(nil, ::T.untyped)
end

class Net::SMTP::AuthCramMD5
  CRAM_BUFSIZE = ::T.let(nil, ::T.untyped)
  IMASK = ::T.let(nil, ::T.untyped)
  OMASK = ::T.let(nil, ::T.untyped)
end

Net::SMTPSession = Net::SMTP

class NilClass
  def =~(arg); end
end

class NoMatchingPatternKeyError
  include ::DidYouMean::Correctable
  def key(); end

  def matchee(); end
end

module Nokogiri
  LIBXML2_PATCHES = ::T.let(nil, ::T.untyped)
  LIBXML_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_ICONV_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXML_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXML_MEMORY_MANAGEMENT = ::T.let(nil, ::T.untyped)
  LIBXML_ZLIB_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXSLT_COMPILED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_DATETIME_ENABLED = ::T.let(nil, ::T.untyped)
  LIBXSLT_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  LIBXSLT_PATCHES = ::T.let(nil, ::T.untyped)
  OTHER_LIBRARY_VERSIONS = ::T.let(nil, ::T.untyped)
  PACKAGED_LIBRARIES = ::T.let(nil, ::T.untyped)
  PRECOMPILED_LIBRARIES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Node
  ALLOW_COMBINATOR_ON_SELF = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Nokogiri::CSS::XPathVisitor
  WILDCARD_NAMESPACES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::CSS::XPathVisitor::BuiltinsConfig
  ALWAYS = ::T.let(nil, ::T.untyped)
  NEVER = ::T.let(nil, ::T.untyped)
  OPTIMAL = ::T.let(nil, ::T.untyped)
  VALUES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::CSS::XPathVisitor::DoctypeConfig
  HTML4 = ::T.let(nil, ::T.untyped)
  HTML5 = ::T.let(nil, ::T.untyped)
  VALUES = ::T.let(nil, ::T.untyped)
  XML = ::T.let(nil, ::T.untyped)
end

module Nokogiri::ClassResolver
  VALID_NAMESPACES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Decorators::Slop
  XPATH_PREFIX = ::T.let(nil, ::T.untyped)
end

class Nokogiri::EncodingHandler
  USEFUL_ALIASES = ::T.let(nil, ::T.untyped)
end

module Nokogiri::Gumbo
  DEFAULT_MAX_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_ERRORS = ::T.let(nil, ::T.untyped)
  DEFAULT_MAX_TREE_DEPTH = ::T.let(nil, ::T.untyped)
end

Nokogiri::HTML = Nokogiri::HTML4

module Nokogiri::HTML4
  NamedCharacters = ::T.let(nil, ::T.untyped)
end

class Nokogiri::HTML4::ElementDescription
  ACTION_ATTR = ::T.let(nil, ::T.untyped)
  ALIGN_ATTR = ::T.let(nil, ::T.untyped)
  ALT_ATTR = ::T.let(nil, ::T.untyped)
  APPLET_ATTRS = ::T.let(nil, ::T.untyped)
  AREA_ATTRS = ::T.let(nil, ::T.untyped)
  ATTRS = ::T.let(nil, ::T.untyped)
  A_ATTRS = ::T.let(nil, ::T.untyped)
  BASEFONT_ATTRS = ::T.let(nil, ::T.untyped)
  BGCOLOR_ATTR = ::T.let(nil, ::T.untyped)
  BLOCK = ::T.let(nil, ::T.untyped)
  BLOCKLI_ELT = ::T.let(nil, ::T.untyped)
  BODY_ATTRS = ::T.let(nil, ::T.untyped)
  BODY_CONTENTS = ::T.let(nil, ::T.untyped)
  BODY_DEPR = ::T.let(nil, ::T.untyped)
  BUTTON_ATTRS = ::T.let(nil, ::T.untyped)
  CELLHALIGN = ::T.let(nil, ::T.untyped)
  CELLVALIGN = ::T.let(nil, ::T.untyped)
  CLEAR_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ATTRS = ::T.let(nil, ::T.untyped)
  COL_ELT = ::T.let(nil, ::T.untyped)
  COMPACT_ATTR = ::T.let(nil, ::T.untyped)
  COMPACT_ATTRS = ::T.let(nil, ::T.untyped)
  CONTENT_ATTR = ::T.let(nil, ::T.untyped)
  COREATTRS = ::T.let(nil, ::T.untyped)
  CORE_ATTRS = ::T.let(nil, ::T.untyped)
  CORE_I18N_ATTRS = ::T.let(nil, ::T.untyped)
  DIR_ATTR = ::T.let(nil, ::T.untyped)
  DL_CONTENTS = ::T.let(nil, ::T.untyped)
  DefaultDescriptions = ::T.let(nil, ::T.untyped)
  EDIT_ATTRS = ::T.let(nil, ::T.untyped)
  EMBED_ATTRS = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  EVENTS = ::T.let(nil, ::T.untyped)
  FIELDSET_CONTENTS = ::T.let(nil, ::T.untyped)
  FLOW = ::T.let(nil, ::T.untyped)
  FLOW_PARAM = ::T.let(nil, ::T.untyped)
  FONTSTYLE = ::T.let(nil, ::T.untyped)
  FONT_ATTRS = ::T.let(nil, ::T.untyped)
  FORMCTRL = ::T.let(nil, ::T.untyped)
  FORM_ATTRS = ::T.let(nil, ::T.untyped)
  FORM_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAMESET_ATTRS = ::T.let(nil, ::T.untyped)
  FRAMESET_CONTENTS = ::T.let(nil, ::T.untyped)
  FRAME_ATTRS = ::T.let(nil, ::T.untyped)
  HEADING = ::T.let(nil, ::T.untyped)
  HEAD_ATTRS = ::T.let(nil, ::T.untyped)
  HEAD_CONTENTS = ::T.let(nil, ::T.untyped)
  HREF_ATTRS = ::T.let(nil, ::T.untyped)
  HR_DEPR = ::T.let(nil, ::T.untyped)
  HTML_ATTRS = ::T.let(nil, ::T.untyped)
  HTML_CDATA = ::T.let(nil, ::T.untyped)
  HTML_CONTENT = ::T.let(nil, ::T.untyped)
  HTML_FLOW = ::T.let(nil, ::T.untyped)
  HTML_INLINE = ::T.let(nil, ::T.untyped)
  HTML_PCDATA = ::T.let(nil, ::T.untyped)
  I18N = ::T.let(nil, ::T.untyped)
  I18N_ATTRS = ::T.let(nil, ::T.untyped)
  IFRAME_ATTRS = ::T.let(nil, ::T.untyped)
  IMG_ATTRS = ::T.let(nil, ::T.untyped)
  INLINE = ::T.let(nil, ::T.untyped)
  INLINE_P = ::T.let(nil, ::T.untyped)
  INPUT_ATTRS = ::T.let(nil, ::T.untyped)
  LABEL_ATTR = ::T.let(nil, ::T.untyped)
  LABEL_ATTRS = ::T.let(nil, ::T.untyped)
  LANGUAGE_ATTR = ::T.let(nil, ::T.untyped)
  LEGEND_ATTRS = ::T.let(nil, ::T.untyped)
  LINK_ATTRS = ::T.let(nil, ::T.untyped)
  LIST = ::T.let(nil, ::T.untyped)
  LI_ELT = ::T.let(nil, ::T.untyped)
  MAP_CONTENTS = ::T.let(nil, ::T.untyped)
  META_ATTRS = ::T.let(nil, ::T.untyped)
  MODIFIER = ::T.let(nil, ::T.untyped)
  NAME_ATTR = ::T.let(nil, ::T.untyped)
  NOFRAMES_CONTENT = ::T.let(nil, ::T.untyped)
  OBJECT_ATTRS = ::T.let(nil, ::T.untyped)
  OBJECT_CONTENTS = ::T.let(nil, ::T.untyped)
  OBJECT_DEPR = ::T.let(nil, ::T.untyped)
  OL_ATTRS = ::T.let(nil, ::T.untyped)
  OPTGROUP_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ATTRS = ::T.let(nil, ::T.untyped)
  OPTION_ELT = ::T.let(nil, ::T.untyped)
  PARAM_ATTRS = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PHRASE = ::T.let(nil, ::T.untyped)
  PRE_CONTENT = ::T.let(nil, ::T.untyped)
  PROMPT_ATTRS = ::T.let(nil, ::T.untyped)
  QUOTE_ATTRS = ::T.let(nil, ::T.untyped)
  ROWS_COLS_ATTR = ::T.let(nil, ::T.untyped)
  SCRIPT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_ATTRS = ::T.let(nil, ::T.untyped)
  SELECT_CONTENT = ::T.let(nil, ::T.untyped)
  SPECIAL = ::T.let(nil, ::T.untyped)
  SRC_ALT_ATTRS = ::T.let(nil, ::T.untyped)
  STYLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_ATTRS = ::T.let(nil, ::T.untyped)
  TABLE_CONTENTS = ::T.let(nil, ::T.untyped)
  TABLE_DEPR = ::T.let(nil, ::T.untyped)
  TALIGN_ATTRS = ::T.let(nil, ::T.untyped)
  TARGET_ATTR = ::T.let(nil, ::T.untyped)
  TEXTAREA_ATTRS = ::T.let(nil, ::T.untyped)
  TH_TD_ATTR = ::T.let(nil, ::T.untyped)
  TH_TD_DEPR = ::T.let(nil, ::T.untyped)
  TR_CONTENTS = ::T.let(nil, ::T.untyped)
  TR_ELT = ::T.let(nil, ::T.untyped)
  TYPE_ATTR = ::T.let(nil, ::T.untyped)
  UL_DEPR = ::T.let(nil, ::T.untyped)
  VERSION_ATTR = ::T.let(nil, ::T.untyped)
  WIDTH_ATTR = ::T.let(nil, ::T.untyped)
end

Nokogiri::HTML4::ElementDescription::Desc = Struct::HTMLElementDescription

module Nokogiri::HTML5::QuirksMode
  LIMITED_QUIRKS = ::T.let(nil, ::T.untyped)
  NO_QUIRKS = ::T.let(nil, ::T.untyped)
  QUIRKS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML
  XML_C14N_1_0 = ::T.let(nil, ::T.untyped)
  XML_C14N_1_1 = ::T.let(nil, ::T.untyped)
  XML_C14N_EXCLUSIVE_1_0 = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Builder
  DEFAULT_DOCUMENT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Document
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NCNAME_CHAR = ::T.let(nil, ::T.untyped)
  NCNAME_RE = ::T.let(nil, ::T.untyped)
  NCNAME_START_CHAR = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::Element
end

class Nokogiri::XML::ElementContent
  ELEMENT = ::T.let(nil, ::T.untyped)
  MULT = ::T.let(nil, ::T.untyped)
  ONCE = ::T.let(nil, ::T.untyped)
  OPT = ::T.let(nil, ::T.untyped)
  OR = ::T.let(nil, ::T.untyped)
  PCDATA = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
  SEQ = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::EntityDecl
  EXTERNAL_GENERAL_PARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_GENERAL_UNPARSED = ::T.let(nil, ::T.untyped)
  EXTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_GENERAL = ::T.let(nil, ::T.untyped)
  INTERNAL_PARAMETER = ::T.let(nil, ::T.untyped)
  INTERNAL_PREDEFINED = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Node
  include ::Nokogiri::HTML5::Node
  ATTRIBUTE_DECL = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_NODE = ::T.let(nil, ::T.untyped)
  CDATA_SECTION_NODE = ::T.let(nil, ::T.untyped)
  COMMENT_NODE = ::T.let(nil, ::T.untyped)
  DECONSTRUCT_KEYS = ::T.let(nil, ::T.untyped)
  DECONSTRUCT_METHODS = ::T.let(nil, ::T.untyped)
  DOCB_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_FRAG_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  DOCUMENT_TYPE_NODE = ::T.let(nil, ::T.untyped)
  DTD_NODE = ::T.let(nil, ::T.untyped)
  ELEMENT_DECL = ::T.let(nil, ::T.untyped)
  ELEMENT_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_DECL = ::T.let(nil, ::T.untyped)
  ENTITY_NODE = ::T.let(nil, ::T.untyped)
  ENTITY_REF_NODE = ::T.let(nil, ::T.untyped)
  HTML_DOCUMENT_NODE = ::T.let(nil, ::T.untyped)
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
  NAMESPACE_DECL = ::T.let(nil, ::T.untyped)
  NOTATION_NODE = ::T.let(nil, ::T.untyped)
  PI_NODE = ::T.let(nil, ::T.untyped)
  TEXT_NODE = ::T.let(nil, ::T.untyped)
  XINCLUDE_END = ::T.let(nil, ::T.untyped)
  XINCLUDE_START = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::NodeSet
  IMPLIED_XPATH_CONTEXTS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::PP::Node
  COLLECTIONS = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::ParseOptions
  BIG_LINES = ::T.let(nil, ::T.untyped)
  COMPACT = ::T.let(nil, ::T.untyped)
  DEFAULT_HTML = ::T.let(nil, ::T.untyped)
  DEFAULT_SCHEMA = ::T.let(nil, ::T.untyped)
  DEFAULT_XML = ::T.let(nil, ::T.untyped)
  DEFAULT_XSLT = ::T.let(nil, ::T.untyped)
  DTDATTR = ::T.let(nil, ::T.untyped)
  DTDLOAD = ::T.let(nil, ::T.untyped)
  DTDVALID = ::T.let(nil, ::T.untyped)
  HUGE = ::T.let(nil, ::T.untyped)
  NOBASEFIX = ::T.let(nil, ::T.untyped)
  NOBLANKS = ::T.let(nil, ::T.untyped)
  NOCDATA = ::T.let(nil, ::T.untyped)
  NODICT = ::T.let(nil, ::T.untyped)
  NOENT = ::T.let(nil, ::T.untyped)
  NOERROR = ::T.let(nil, ::T.untyped)
  NONET = ::T.let(nil, ::T.untyped)
  NOWARNING = ::T.let(nil, ::T.untyped)
  NOXINCNODE = ::T.let(nil, ::T.untyped)
  NSCLEAN = ::T.let(nil, ::T.untyped)
  OLD10 = ::T.let(nil, ::T.untyped)
  PEDANTIC = ::T.let(nil, ::T.untyped)
  RECOVER = ::T.let(nil, ::T.untyped)
  SAX1 = ::T.let(nil, ::T.untyped)
  STRICT = ::T.let(nil, ::T.untyped)
  XINCLUDE = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::Reader
  TYPE_ATTRIBUTE = ::T.let(nil, ::T.untyped)
  TYPE_CDATA = ::T.let(nil, ::T.untyped)
  TYPE_COMMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_FRAGMENT = ::T.let(nil, ::T.untyped)
  TYPE_DOCUMENT_TYPE = ::T.let(nil, ::T.untyped)
  TYPE_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ELEMENT = ::T.let(nil, ::T.untyped)
  TYPE_END_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY = ::T.let(nil, ::T.untyped)
  TYPE_ENTITY_REFERENCE = ::T.let(nil, ::T.untyped)
  TYPE_NONE = ::T.let(nil, ::T.untyped)
  TYPE_NOTATION = ::T.let(nil, ::T.untyped)
  TYPE_PROCESSING_INSTRUCTION = ::T.let(nil, ::T.untyped)
  TYPE_SIGNIFICANT_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_TEXT = ::T.let(nil, ::T.untyped)
  TYPE_WHITESPACE = ::T.let(nil, ::T.untyped)
  TYPE_XML_DECLARATION = ::T.let(nil, ::T.untyped)
end

class Nokogiri::XML::SAX::Parser
  ENCODINGS = ::T.let(nil, ::T.untyped)
  REVERSE_ENCODINGS = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::Searchable
  LOOKS_LIKE_XPATH = ::T.let(nil, ::T.untyped)
end

module Nokogiri::XML::XPath
  CURRENT_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
  GLOBAL_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
  ROOT_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
  SUBTREE_SEARCH_PREFIX = ::T.let(nil, ::T.untyped)
end

class Numeric
  ZETTABYTE = ::T.let(nil, ::T.untyped)
end

module OTNetstring
  def self.encode(obj, string_sep=T.unsafe(nil)); end

  def self.parse(io, encoding=T.unsafe(nil), fallback_encoding=T.unsafe(nil)); end
end

class Object
  include ::ActiveSupport::Dependencies::RequireDependency
  include ::DEBUGGER__::TrapInterceptor
  def deep_clone(); end
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  RUBY18 = ::T.let(nil, ::T.untyped)
  RUBY19 = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
end

class ObjectSpace::InternalObjectWrapper
  def internal_object_id(); end

  def type(); end
end

class ObjectSpace::InternalObjectWrapper
end

class ObjectSpace::WeakMap
  def delete(arg); end
end

module ObjectSpace
  def self.allocation_class_path(arg); end

  def self.allocation_generation(arg); end

  def self.allocation_method_id(arg); end

  def self.allocation_sourcefile(arg); end

  def self.allocation_sourceline(arg); end

  def self.count_nodes(*arg); end

  def self.count_symbols(*arg); end

  def self.dump(obj, output: T.unsafe(nil)); end

  def self.dump_all(output: T.unsafe(nil), full: T.unsafe(nil), since: T.unsafe(nil), shapes: T.unsafe(nil)); end

  def self.dump_shapes(output: T.unsafe(nil), since: T.unsafe(nil)); end

  def self.internal_class_of(arg); end

  def self.internal_super_of(arg); end

  def self.reachable_objects_from(arg); end

  def self.reachable_objects_from_root(); end

  def self.trace_object_allocations(); end

  def self.trace_object_allocations_debug_start(); end
end

module Open3
  VERSION = ::T.let(nil, ::T.untyped)
end

module OpenSSL::ASN1
  CLASS_TAG_MAP = ::T.let(nil, ::T.untyped)
end

class OpenSSL::ASN1::ASN1Data
  def indefinite_length(); end

  def indefinite_length=(indefinite_length); end
end

class OpenSSL::ASN1::BitString
  def initialize(*arg); end
end

class OpenSSL::ASN1::Constructive
  include ::OpenSSL::ASN1::TaggedASN1Data
end

class OpenSSL::ASN1::Primitive
  include ::OpenSSL::ASN1::TaggedASN1Data
end

module OpenSSL::ASN1::TaggedASN1Data
  def initialize(value, tag=T.unsafe(nil), tagging=T.unsafe(nil), tag_class=T.unsafe(nil)); end

  def tagging(); end

  def tagging=(tagging); end
end

module OpenSSL::ASN1::TaggedASN1Data
end

module OpenSSL::ASN1
  def self.take_default_tag(klass); end
end

class OpenSSL::BN
  def +@(); end

  def -@(); end

  def /(arg); end

  def abs(); end

  def get_flags(arg); end

  def mod_sqrt(arg); end

  def negative?(); end

  def set_flags(arg); end
  CONSTTIME = ::T.let(nil, ::T.untyped)
end

module OpenSSL::Buffering
  include ::ActiveSupport::ToJsonWithActiveSupportEncoder
  def getbyte(); end

  def readbyte(); end
end

class OpenSSL::Cipher
  def ccm_data_len=(ccm_data_len); end
end

class OpenSSL::Digest
  def self.digests(); end
end

class OpenSSL::HMAC
  def ==(other); end
end

module OpenSSL::Marshal
  def _dump(_level); end
end

module OpenSSL::Marshal::ClassMethods
  def _load(string); end
end

module OpenSSL::Marshal::ClassMethods
end

module OpenSSL::Marshal
  def self.included(base); end
end

class OpenSSL::OCSP::Request
  def signed?(); end
end

class OpenSSL::PKCS12
  def set_mac(*arg); end
  KEY_EX = ::T.let(nil, ::T.untyped)
  KEY_SIG = ::T.let(nil, ::T.untyped)
end

class OpenSSL::PKCS7
  def to_text(); end
end

OpenSSL::PKCS7::Signer = OpenSSL::PKCS7::SignerInfo

class OpenSSL::PKey::DH
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::DH
  extend ::OpenSSL::Marshal::ClassMethods
  def self.new(*args, &blk); end
end

class OpenSSL::PKey::DSA
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::DSA
  extend ::OpenSSL::Marshal::ClassMethods
  def self.new(*args, &blk); end
end

class OpenSSL::PKey::EC
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::EC::Point
  def add(arg); end

  def to_octet_string(arg); end
end

class OpenSSL::PKey::EC
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::PKey::PKey
  def compare?(arg); end

  def decrypt(*arg); end

  def derive(*arg); end

  def encrypt(*arg); end

  def oid(); end

  def private_to_der(*arg); end

  def private_to_pem(*arg); end

  def public_to_der(); end

  def public_to_pem(); end

  def raw_private_key(); end

  def raw_public_key(); end

  def sign_raw(*arg); end

  def to_text(); end

  def verify_raw(*arg); end

  def verify_recover(*arg); end
end

class OpenSSL::PKey::RSA
  include ::OpenSSL::Marshal
end

class OpenSSL::PKey::RSA
  extend ::OpenSSL::Marshal::ClassMethods
  def self.new(*args, &blk); end
end

module OpenSSL::PKey
  def self.generate_key(*arg); end

  def self.generate_parameters(*arg); end

  def self.new_raw_private_key(arg, arg1); end

  def self.new_raw_public_key(arg, arg1); end
end

class OpenSSL::Provider
  def name(); end

  def unload(); end
end

class OpenSSL::Provider::ProviderError
end

class OpenSSL::Provider::ProviderError
end

class OpenSSL::Provider
  def self.load(arg); end

  def self.provider_names(); end
end

module OpenSSL::SSL
  OP_ALLOW_CLIENT_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_ALLOW_NO_DHE_KEX = ::T.let(nil, ::T.untyped)
  OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_CLEANSE_PLAINTEXT = ::T.let(nil, ::T.untyped)
  OP_CRYPTOPRO_TLSEXT_BUG = ::T.let(nil, ::T.untyped)
  OP_DISABLE_TLSEXT_CA_NAMES = ::T.let(nil, ::T.untyped)
  OP_ENABLE_KTLS = ::T.let(nil, ::T.untyped)
  OP_ENABLE_MIDDLEBOX_COMPAT = ::T.let(nil, ::T.untyped)
  OP_IGNORE_UNEXPECTED_EOF = ::T.let(nil, ::T.untyped)
  OP_LEGACY_SERVER_CONNECT = ::T.let(nil, ::T.untyped)
  OP_NO_ANTI_REPLAY = ::T.let(nil, ::T.untyped)
  OP_NO_ENCRYPT_THEN_MAC = ::T.let(nil, ::T.untyped)
  OP_NO_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_NO_TLSv1_3 = ::T.let(nil, ::T.untyped)
  OP_PRIORITIZE_CHACHA = ::T.let(nil, ::T.untyped)
  OP_SAFARI_ECDHE_ECDSA_BUG = ::T.let(nil, ::T.untyped)
  OP_TLSEXT_PADDING = ::T.let(nil, ::T.untyped)
  SSL2_VERSION = ::T.let(nil, ::T.untyped)
  SSL3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_VERSION = ::T.let(nil, ::T.untyped)
end

class OpenSSL::SSL::SSLSocket
  def alpn_protocol(); end

  def close_read(); end

  def close_write(); end

  def export_keying_material(*arg); end

  def finished_message(); end

  def peer_finished_message(); end

  def tmp_key(); end
end

class OpenSSL::SSL::SSLSocket
  def self.open(remote_host, remote_port, local_host=T.unsafe(nil), local_port=T.unsafe(nil), context: T.unsafe(nil)); end
end

module OpenSSL::SSL::SocketForwarder
  def close_on_exec=(value); end

  def close_on_exec?(); end

  def fileno(); end

  def local_address(); end

  def remote_address(); end

  def timeout(); end

  def timeout=(value); end

  def wait(*args); end

  def wait_readable(*args); end

  def wait_writable(*args); end
end

module OpenSSL::Timestamp
end

class OpenSSL::Timestamp::Factory
  def additional_certs(); end

  def additional_certs=(additional_certs); end

  def allowed_digests(); end

  def allowed_digests=(allowed_digests); end

  def create_timestamp(arg, arg1, arg2); end

  def default_policy_id(); end

  def default_policy_id=(default_policy_id); end

  def gen_time(); end

  def gen_time=(gen_time); end

  def serial_number(); end

  def serial_number=(serial_number); end
end

class OpenSSL::Timestamp::Factory
end

class OpenSSL::Timestamp::Request
  def algorithm(); end

  def algorithm=(algorithm); end

  def cert_requested=(cert_requested); end

  def cert_requested?(); end

  def initialize(*arg); end

  def message_imprint(); end

  def message_imprint=(message_imprint); end

  def nonce(); end

  def nonce=(nonce); end

  def policy_id(); end

  def policy_id=(policy_id); end

  def to_der(); end

  def to_text(); end

  def version(); end

  def version=(version); end
end

class OpenSSL::Timestamp::Request
end

class OpenSSL::Timestamp::Response
  def failure_info(); end

  def initialize(arg); end

  def status(); end

  def status_text(); end

  def to_der(); end

  def to_text(); end

  def token(); end

  def token_info(); end

  def tsa_certificate(); end

  def verify(*arg); end
  GRANTED = ::T.let(nil, ::T.untyped)
  GRANTED_WITH_MODS = ::T.let(nil, ::T.untyped)
  REJECTION = ::T.let(nil, ::T.untyped)
  REVOCATION_NOTIFICATION = ::T.let(nil, ::T.untyped)
  REVOCATION_WARNING = ::T.let(nil, ::T.untyped)
  WAITING = ::T.let(nil, ::T.untyped)
end

class OpenSSL::Timestamp::Response
end

class OpenSSL::Timestamp::TimestampError
end

class OpenSSL::Timestamp::TimestampError
end

class OpenSSL::Timestamp::TokenInfo
  def algorithm(); end

  def gen_time(); end

  def initialize(arg); end

  def message_imprint(); end

  def nonce(); end

  def ordering(); end

  def policy_id(); end

  def serial_number(); end

  def to_der(); end

  def to_text(); end

  def version(); end
end

class OpenSSL::Timestamp::TokenInfo
end

module OpenSSL::Timestamp
end

module OpenSSL::X509
  V_ERR_CA_KEY_TOO_SMALL = ::T.let(nil, ::T.untyped)
  V_ERR_CA_MD_TOO_WEAK = ::T.let(nil, ::T.untyped)
  V_ERR_CRL_PATH_VALIDATION_ERROR = ::T.let(nil, ::T.untyped)
  V_ERR_DANE_NO_MATCH = ::T.let(nil, ::T.untyped)
  V_ERR_DIFFERENT_CRL_SCOPE = ::T.let(nil, ::T.untyped)
  V_ERR_EE_KEY_TOO_SMALL = ::T.let(nil, ::T.untyped)
  V_ERR_EMAIL_MISMATCH = ::T.let(nil, ::T.untyped)
  V_ERR_EXCLUDED_VIOLATION = ::T.let(nil, ::T.untyped)
  V_ERR_HOSTNAME_MISMATCH = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_CALL = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_NON_CA = ::T.let(nil, ::T.untyped)
  V_ERR_INVALID_POLICY_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_IP_ADDRESS_MISMATCH = ::T.let(nil, ::T.untyped)
  V_ERR_KEYUSAGE_NO_CRL_SIGN = ::T.let(nil, ::T.untyped)
  V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = ::T.let(nil, ::T.untyped)
  V_ERR_NO_EXPLICIT_POLICY = ::T.let(nil, ::T.untyped)
  V_ERR_NO_VALID_SCTS = ::T.let(nil, ::T.untyped)
  V_ERR_OCSP_CERT_UNKNOWN = ::T.let(nil, ::T.untyped)
  V_ERR_OCSP_VERIFY_FAILED = ::T.let(nil, ::T.untyped)
  V_ERR_OCSP_VERIFY_NEEDED = ::T.let(nil, ::T.untyped)
  V_ERR_PATH_LOOP = ::T.let(nil, ::T.untyped)
  V_ERR_PERMITTED_VIOLATION = ::T.let(nil, ::T.untyped)
  V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = ::T.let(nil, ::T.untyped)
  V_ERR_PROXY_PATH_LENGTH_EXCEEDED = ::T.let(nil, ::T.untyped)
  V_ERR_PROXY_SUBJECT_NAME_VIOLATION = ::T.let(nil, ::T.untyped)
  V_ERR_STORE_LOOKUP = ::T.let(nil, ::T.untyped)
  V_ERR_SUBTREE_MINMAX = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_ALGORITHM = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_CURVE = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_INVALID_VERSION = ::T.let(nil, ::T.untyped)
  V_ERR_SUITE_B_LOS_NOT_ALLOWED = ::T.let(nil, ::T.untyped)
  V_ERR_UNABLE_TO_GET_CRL_ISSUER = ::T.let(nil, ::T.untyped)
  V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_UNHANDLED_CRITICAL_EXTENSION = ::T.let(nil, ::T.untyped)
  V_ERR_UNNESTED_RESOURCE = ::T.let(nil, ::T.untyped)
  V_ERR_UNSPECIFIED = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_EXTENSION_FEATURE = ::T.let(nil, ::T.untyped)
  V_ERR_UNSUPPORTED_NAME_SYNTAX = ::T.let(nil, ::T.untyped)
  V_FLAG_NO_CHECK_TIME = ::T.let(nil, ::T.untyped)
  V_FLAG_PARTIAL_CHAIN = ::T.let(nil, ::T.untyped)
  V_FLAG_SUITEB_128_LOS = ::T.let(nil, ::T.untyped)
  V_FLAG_SUITEB_128_LOS_ONLY = ::T.let(nil, ::T.untyped)
  V_FLAG_SUITEB_192_LOS = ::T.let(nil, ::T.untyped)
  V_FLAG_TRUSTED_FIRST = ::T.let(nil, ::T.untyped)
  V_FLAG_USE_CHECK_TIME = ::T.let(nil, ::T.untyped)
end

class OpenSSL::X509::Attribute
  include ::OpenSSL::Marshal
  def ==(other); end
end

class OpenSSL::X509::Attribute
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::CRL
  include ::OpenSSL::Marshal
  include ::OpenSSL::X509::Extension::AuthorityKeyIdentifier
  include ::OpenSSL::X509::Extension::Helpers
  def ==(other); end
end

class OpenSSL::X509::CRL
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Certificate
  include ::OpenSSL::Marshal
  include ::OpenSSL::X509::Extension::SubjectKeyIdentifier
  include ::OpenSSL::X509::Extension::AuthorityKeyIdentifier
  include ::OpenSSL::X509::Extension::CRLDistributionPoints
  include ::OpenSSL::X509::Extension::AuthorityInfoAccess
  include ::OpenSSL::X509::Extension::Helpers
  def tbs_bytes(); end
end

class OpenSSL::X509::Certificate
  extend ::OpenSSL::Marshal::ClassMethods
  def self.load(arg); end

  def self.load_file(path); end
end

class OpenSSL::X509::Extension
  include ::OpenSSL::Marshal
  def ==(other); end

  def value_der(); end
end

module OpenSSL::X509::Extension::AuthorityInfoAccess
  include ::OpenSSL::X509::Extension::Helpers
  def ca_issuer_uris(); end

  def ocsp_uris(); end
end

module OpenSSL::X509::Extension::AuthorityInfoAccess
end

module OpenSSL::X509::Extension::AuthorityKeyIdentifier
  include ::OpenSSL::X509::Extension::Helpers
  def authority_key_identifier(); end
end

module OpenSSL::X509::Extension::AuthorityKeyIdentifier
end

module OpenSSL::X509::Extension::CRLDistributionPoints
  include ::OpenSSL::X509::Extension::Helpers
  def crl_uris(); end
end

module OpenSSL::X509::Extension::CRLDistributionPoints
end

module OpenSSL::X509::Extension::Helpers
  def find_extension(oid); end
end

module OpenSSL::X509::Extension::Helpers
end

module OpenSSL::X509::Extension::SubjectKeyIdentifier
  include ::OpenSSL::X509::Extension::Helpers
  def subject_key_identifier(); end
end

module OpenSSL::X509::Extension::SubjectKeyIdentifier
end

class OpenSSL::X509::Extension
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Name
  include ::OpenSSL::Marshal
  def to_utf8(); end
end

class OpenSSL::X509::Name
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Request
  include ::OpenSSL::Marshal
  def ==(other); end
end

class OpenSSL::X509::Request
  extend ::OpenSSL::Marshal::ClassMethods
end

class OpenSSL::X509::Revoked
  def ==(other); end

  def to_der(); end
end

module OpenSSL
  def self.fips_mode(); end
end

class OpenStruct
  def __id__!(); end

  def __send__!(*arg); end

  def as_json!(options=T.unsafe(nil)); end

  def at_exit!(&block); end

  def class!(); end

  def class_eval!(*args, &block); end

  def clone!(freeze: T.unsafe(nil)); end

  def debugger!(pre: T.unsafe(nil), do: T.unsafe(nil), up_level: T.unsafe(nil)); end

  def deep_dup!(); end

  def define_singleton_method!(*arg); end

  def delete_field!(name, &block); end

  def dig!(name, *names); end

  def display!(*arg); end

  def dup!(); end

  def each_pair!(); end

  def encode_with(coder); end

  def encode_with!(coder); end

  def enum_for!(*arg); end

  def exit!(*arg); end

  def extend!(mod, *args); end

  def freeze!(); end

  def gem!(dep, *reqs); end

  def hash!(); end

  def init_with(coder); end

  def init_with!(coder); end

  def inspect!(); end

  def instance_eval!(*arg); end

  def instance_exec!(*arg); end

  def instance_values!(); end

  def instance_variable_get!(arg); end

  def instance_variable_names!(); end

  def instance_variable_set!(arg, arg1); end

  def instance_variables!(); end

  def itself!(); end

  def marshal_dump!(); end

  def method!(arg); end

  def methods!(*arg); end

  def object_id!(); end

  def presence!(); end

  def presence_in!(another_object); end

  def pretty_inspect!(); end

  def pretty_print!(q); end

  def pretty_print_cycle!(q); end

  def pretty_print_inspect!(); end

  def pretty_print_instance_variables!(); end

  def private_methods!(*arg); end

  def protected_methods!(*arg); end

  def public_method!(arg); end

  def public_methods!(*arg); end

  def public_send!(*arg); end

  def remove_instance_variable!(arg); end

  def require_dependency!(filename); end

  def send!(*arg); end

  def singleton_class!(); end

  def singleton_method!(arg); end

  def singleton_method_added!(mid); end

  def singleton_methods!(*arg); end

  def tap!(); end

  def then!(); end

  def to_enum!(*arg); end

  def to_h!(&block); end

  def to_json!(options=T.unsafe(nil)); end

  def to_param!(); end

  def to_query!(key); end

  def to_s!(); end

  def to_yaml!(options=T.unsafe(nil)); end

  def trap!(sig, *command, &command_proc); end

  def with!(**attributes); end

  def with_options!(options, &block); end

  def yield_self!(); end
  VERSION = ::T.let(nil, ::T.untyped)
end

module OpenURI
  RE_LWS = ::T.let(nil, ::T.untyped)
  RE_PARAMETERS = ::T.let(nil, ::T.untyped)
  RE_QUOTED_STRING = ::T.let(nil, ::T.untyped)
  RE_TOKEN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class OpenURI::HTTPError
  def initialize(message, io); end
end

class OpenURI::HTTPRedirect
  def initialize(message, io, uri); end
end

module OpenURI::Meta
  def content_type_parse(); end

  def meta_add_field(name, value); end

  def meta_add_field2(name, values); end

  def meta_setup_encoding(); end
end

module OpenURI::Meta
  def self.init(obj, src=T.unsafe(nil)); end
end

class OpenURI::TooManyRedirects
end

class OpenURI::TooManyRedirects
end

module OpenURI
  def self.check_options(options); end

  def self.open_http(buf, target, proxy, options); end

  def self.open_loop(uri, options); end

  def self.open_uri(name, *rest); end

  def self.redirectable?(uri1, uri2); end

  def self.scan_open_optional_arguments(*rest); end
end

class OptionParser
  def additional_message(typ, opt); end

  def help_exit(); end

  def raise_unknown(); end

  def raise_unknown=(raise_unknown); end

  def require_exact(); end

  def require_exact=(require_exact); end
  Version = ::T.let(nil, ::T.untyped)
end

class OptionParser::List
  def get_candidates(id); end
end

class OptionParser::ParseError
  def additional(); end

  def additional=(additional); end
end

class OptionParser::Switch
  def omitted_argument(val); end

  def pretty_print_contents(q); end
end

class OptionParser::Switch::NoArgument
  def pretty_head(); end
end

class OptionParser::Switch::OptionalArgument
  def pretty_head(); end
end

class OptionParser::Switch::PlacedArgument
  def pretty_head(); end
end

class OptionParser::Switch::RequiredArgument
  def pretty_head(); end
end

class PP
  VERSION = ::T.let(nil, ::T.untyped)
end

ParseError = Racc::ParseError

module Parser
  MESSAGES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Parser::AST::Node
  def loc(); end

  def location(); end
end

class Parser::AST::Processor
  def on_alias(node); end

  def on_and(node); end

  def on_and_asgn(node); end

  def on_arg(node); end

  def on_arg_expr(node); end

  def on_args(node); end

  def on_argument(node); end

  def on_array(node); end

  def on_array_pattern(node); end

  def on_array_pattern_with_tail(node); end

  def on_back_ref(node); end

  def on_begin(node); end

  def on_block(node); end

  def on_block_pass(node); end

  def on_blockarg(node); end

  def on_blockarg_expr(node); end

  def on_break(node); end

  def on_case(node); end

  def on_case_match(node); end

  def on_casgn(node); end

  def on_class(node); end

  def on_const(node); end

  def on_const_pattern(node); end

  def on_csend(node); end

  def on_cvar(node); end

  def on_cvasgn(node); end

  def on_def(node); end

  def on_defined?(node); end

  def on_defs(node); end

  def on_dstr(node); end

  def on_dsym(node); end

  def on_eflipflop(node); end

  def on_empty_else(node); end

  def on_ensure(node); end

  def on_erange(node); end

  def on_find_pattern(node); end

  def on_for(node); end

  def on_forward_arg(node); end

  def on_forwarded_kwrestarg(node); end

  def on_forwarded_restarg(node); end

  def on_gvar(node); end

  def on_gvasgn(node); end

  def on_hash(node); end

  def on_hash_pattern(node); end

  def on_if(node); end

  def on_if_guard(node); end

  def on_iflipflop(node); end

  def on_in_match(node); end

  def on_in_pattern(node); end

  def on_index(node); end

  def on_indexasgn(node); end

  def on_irange(node); end

  def on_ivar(node); end

  def on_ivasgn(node); end

  def on_kwarg(node); end

  def on_kwargs(node); end

  def on_kwbegin(node); end

  def on_kwoptarg(node); end

  def on_kwrestarg(node); end

  def on_kwsplat(node); end

  def on_lambda(node); end

  def on_lvar(node); end

  def on_lvasgn(node); end

  def on_masgn(node); end

  def on_match_alt(node); end

  def on_match_as(node); end

  def on_match_current_line(node); end

  def on_match_pattern(node); end

  def on_match_pattern_p(node); end

  def on_match_rest(node); end

  def on_match_var(node); end

  def on_match_with_lvasgn(node); end

  def on_mlhs(node); end

  def on_module(node); end

  def on_next(node); end

  def on_not(node); end

  def on_nth_ref(node); end

  def on_numblock(node); end

  def on_op_asgn(node); end

  def on_optarg(node); end

  def on_or(node); end

  def on_or_asgn(node); end

  def on_pair(node); end

  def on_pin(node); end

  def on_postexe(node); end

  def on_preexe(node); end

  def on_procarg0(node); end

  def on_redo(node); end

  def on_regexp(node); end

  def on_resbody(node); end

  def on_rescue(node); end

  def on_restarg(node); end

  def on_restarg_expr(node); end

  def on_retry(node); end

  def on_return(node); end

  def on_sclass(node); end

  def on_send(node); end

  def on_shadowarg(node); end

  def on_splat(node); end

  def on_super(node); end

  def on_undef(node); end

  def on_unless_guard(node); end

  def on_until(node); end

  def on_until_post(node); end

  def on_var(node); end

  def on_vasgn(node); end

  def on_when(node); end

  def on_while(node); end

  def on_while_post(node); end

  def on_xstr(node); end

  def on_yield(node); end

  def process_argument_node(node); end

  def process_regular_node(node); end

  def process_var_asgn_node(node); end

  def process_variable_node(node); end
end

class Parser::Base
  def builder(); end

  def context(); end

  def current_arg_stack(); end

  def diagnostics(); end

  def initialize(builder=T.unsafe(nil)); end

  def lexer(); end

  def max_numparam_stack(); end

  def parse(source_buffer); end

  def parse_with_comments(source_buffer); end

  def pattern_hash_keys(); end

  def pattern_variables(); end

  def reset(); end

  def source_buffer(); end

  def static_env(); end

  def tokenize(source_buffer, recover=T.unsafe(nil)); end
end

class Parser::Base
  def self.default_parser(); end

  def self.parse(string, file=T.unsafe(nil), line=T.unsafe(nil)); end

  def self.parse_file(filename); end

  def self.parse_file_with_comments(filename); end

  def self.parse_with_comments(string, file=T.unsafe(nil), line=T.unsafe(nil)); end
end

class Parser::Builders::Default
  def __ENCODING__(__ENCODING__t); end

  def __FILE__(__FILE__t); end

  def __LINE__(__LINE__t); end

  def accessible(node); end

  def alias(alias_t, to, from); end

  def arg(name_t); end

  def arg_expr(expr); end

  def args(begin_t, args, end_t, check_args=T.unsafe(nil)); end

  def array(begin_t, elements, end_t); end

  def array_pattern(lbrack_t, elements, rbrack_t); end

  def assign(lhs, eql_t, rhs); end

  def assignable(node); end

  def associate(begin_t, pairs, end_t); end

  def attr_asgn(receiver, dot_t, selector_t); end

  def back_ref(token); end

  def begin(begin_t, body, end_t); end

  def begin_body(compound_stmt, rescue_bodies=T.unsafe(nil), else_t=T.unsafe(nil), else_=T.unsafe(nil), ensure_t=T.unsafe(nil), ensure_=T.unsafe(nil)); end

  def begin_keyword(begin_t, body, end_t); end

  def binary_op(receiver, operator_t, arg); end

  def block(method_call, begin_t, args, body, end_t); end

  def block_pass(amper_t, arg); end

  def blockarg(amper_t, name_t); end

  def blockarg_expr(amper_t, expr); end

  def call_lambda(lambda_t); end

  def call_method(receiver, dot_t, selector_t, lparen_t=T.unsafe(nil), args=T.unsafe(nil), rparen_t=T.unsafe(nil)); end

  def call_type_for_dot(dot_t); end

  def case(case_t, expr, when_bodies, else_t, else_body, end_t); end

  def case_match(case_t, expr, in_bodies, else_t, else_body, end_t); end

  def character(char_t); end

  def complex(complex_t); end

  def compstmt(statements); end

  def condition(cond_t, cond, then_t, if_true, else_t, if_false, end_t); end

  def condition_mod(if_true, if_false, cond_t, cond); end

  def const(name_t); end

  def const_fetch(scope, t_colon2, name_t); end

  def const_global(t_colon3, name_t); end

  def const_op_assignable(node); end

  def const_pattern(const, ldelim_t, pattern, rdelim_t); end

  def cvar(token); end

  def dedent_string(node, dedent_level); end

  def def_class(class_t, name, lt_t, superclass, body, end_t); end

  def def_endless_method(def_t, name_t, args, assignment_t, body); end

  def def_endless_singleton(def_t, definee, dot_t, name_t, args, assignment_t, body); end

  def def_method(def_t, name_t, args, body, end_t); end

  def def_module(module_t, name, body, end_t); end

  def def_sclass(class_t, lshft_t, expr, body, end_t); end

  def def_singleton(def_t, definee, dot_t, name_t, args, body, end_t); end

  def emit_file_line_as_literals(); end

  def emit_file_line_as_literals=(emit_file_line_as_literals); end

  def false(false_t); end

  def find_pattern(lbrack_t, elements, rbrack_t); end

  def float(float_t); end

  def for(for_t, iterator, in_t, iteratee, do_t, body, end_t); end

  def forward_arg(dots_t); end

  def forward_only_args(begin_t, dots_t, end_t); end

  def forwarded_args(dots_t); end

  def forwarded_kwrestarg(dstar_t); end

  def forwarded_restarg(star_t); end

  def gvar(token); end

  def hash_pattern(lbrace_t, kwargs, rbrace_t); end

  def ident(token); end

  def if_guard(if_t, if_body); end

  def in_match(lhs, in_t, rhs); end

  def in_pattern(in_t, pattern, guard, then_t, body); end

  def index(receiver, lbrack_t, indexes, rbrack_t); end

  def index_asgn(receiver, lbrack_t, indexes, rbrack_t); end

  def integer(integer_t); end

  def ivar(token); end

  def keyword_cmd(type, keyword_t, lparen_t=T.unsafe(nil), args=T.unsafe(nil), rparen_t=T.unsafe(nil)); end

  def kwarg(name_t); end

  def kwnilarg(dstar_t, nil_t); end

  def kwoptarg(name_t, value); end

  def kwrestarg(dstar_t, name_t=T.unsafe(nil)); end

  def kwsplat(dstar_t, arg); end

  def logical_op(type, lhs, op_t, rhs); end

  def loop(type, keyword_t, cond, do_t, body, end_t); end

  def loop_mod(type, body, keyword_t, cond); end

  def match_alt(left, pipe_t, right); end

  def match_as(value, assoc_t, as); end

  def match_hash_var(name_t); end

  def match_hash_var_from_str(begin_t, strings, end_t); end

  def match_label(label_type, label); end

  def match_nil_pattern(dstar_t, nil_t); end

  def match_op(receiver, match_t, arg); end

  def match_pair(label_type, label, value); end

  def match_pattern(lhs, match_t, rhs); end

  def match_pattern_p(lhs, match_t, rhs); end

  def match_rest(star_t, name_t=T.unsafe(nil)); end

  def match_var(name_t); end

  def match_with_trailing_comma(match, comma_t); end

  def multi_assign(lhs, eql_t, rhs); end

  def multi_lhs(begin_t, items, end_t); end

  def nil(nil_t); end

  def not_op(not_t, begin_t=T.unsafe(nil), receiver=T.unsafe(nil), end_t=T.unsafe(nil)); end

  def nth_ref(token); end

  def numargs(max_numparam); end

  def objc_kwarg(kwname_t, assoc_t, name_t); end

  def objc_restarg(star_t, name=T.unsafe(nil)); end

  def objc_varargs(pair, rest_of_varargs); end

  def op_assign(lhs, op_t, rhs); end

  def optarg(name_t, eql_t, value); end

  def pair(key, assoc_t, value); end

  def pair_keyword(key_t, value); end

  def pair_label(key_t); end

  def pair_list_18(list); end

  def pair_quoted(begin_t, parts, end_t, value); end

  def parser(); end

  def parser=(parser); end

  def pin(pin_t, var); end

  def postexe(postexe_t, lbrace_t, compstmt, rbrace_t); end

  def preexe(preexe_t, lbrace_t, compstmt, rbrace_t); end

  def procarg0(arg); end

  def range_exclusive(lhs, dot3_t, rhs); end

  def range_inclusive(lhs, dot2_t, rhs); end

  def rational(rational_t); end

  def regexp_compose(begin_t, parts, end_t, options); end

  def regexp_options(regopt_t); end

  def rescue_body(rescue_t, exc_list, assoc_t, exc_var, then_t, compound_stmt); end

  def restarg(star_t, name_t=T.unsafe(nil)); end

  def restarg_expr(star_t, expr=T.unsafe(nil)); end

  def self(token); end

  def shadowarg(name_t); end

  def splat(star_t, arg=T.unsafe(nil)); end

  def string(string_t); end

  def string_compose(begin_t, parts, end_t); end

  def string_internal(string_t); end

  def symbol(symbol_t); end

  def symbol_compose(begin_t, parts, end_t); end

  def symbol_internal(symbol_t); end

  def symbols_compose(begin_t, parts, end_t); end

  def ternary(cond, question_t, if_true, colon_t, if_false); end

  def true(true_t); end

  def unary_num(unary_t, numeric); end

  def unary_op(op_t, receiver); end

  def undef_method(undef_t, names); end

  def unless_guard(unless_t, unless_body); end

  def when(when_t, patterns, then_t, body); end

  def word(parts); end

  def words_compose(begin_t, parts, end_t); end

  def xstring_compose(begin_t, parts, end_t); end
end

class Parser::Builders::Default
  def self.emit_arg_inside_procarg0(); end

  def self.emit_arg_inside_procarg0=(emit_arg_inside_procarg0); end

  def self.emit_encoding(); end

  def self.emit_encoding=(emit_encoding); end

  def self.emit_forward_arg(); end

  def self.emit_forward_arg=(emit_forward_arg); end

  def self.emit_index(); end

  def self.emit_index=(emit_index); end

  def self.emit_kwargs(); end

  def self.emit_kwargs=(emit_kwargs); end

  def self.emit_lambda(); end

  def self.emit_lambda=(emit_lambda); end

  def self.emit_match_pattern(); end

  def self.emit_match_pattern=(emit_match_pattern); end

  def self.emit_procarg0(); end

  def self.emit_procarg0=(emit_procarg0); end

  def self.modernize(); end
end

class Parser::Context
  def cant_return(); end

  def cant_return=(cant_return); end

  def in_argdef(); end

  def in_argdef=(in_argdef); end

  def in_block(); end

  def in_block=(in_block); end

  def in_class(); end

  def in_class=(in_class); end

  def in_def(); end

  def in_def=(in_def); end

  def in_defined(); end

  def in_defined=(in_defined); end

  def in_dynamic_block?(); end

  def in_kwarg(); end

  def in_kwarg=(in_kwarg); end

  def in_lambda(); end

  def in_lambda=(in_lambda); end

  def reset(); end
  FLAGS = ::T.let(nil, ::T.untyped)
end

class Parser::CurrentArgStack
  def empty?(); end

  def pop(); end

  def push(value); end

  def reset(); end

  def set(value); end

  def stack(); end

  def top(); end
end

module Parser::Deprecation
  def warn_of_deprecation(); end

  def warned_of_deprecation=(warned_of_deprecation); end
end

class Parser::Diagnostic
  def arguments(); end

  def highlights(); end

  def initialize(level, reason, arguments, location, highlights=T.unsafe(nil)); end

  def level(); end

  def location(); end

  def message(); end

  def reason(); end

  def render(); end
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Parser::Diagnostic::Engine
  def all_errors_are_fatal(); end

  def all_errors_are_fatal=(all_errors_are_fatal); end

  def consumer(); end

  def consumer=(consumer); end

  def ignore?(diagnostic); end

  def ignore_warnings(); end

  def ignore_warnings=(ignore_warnings); end

  def initialize(consumer=T.unsafe(nil)); end

  def process(diagnostic); end

  def raise?(diagnostic); end
end

class Parser::Lexer
  def advance(); end

  def arg_or_cmdarg(cmd_state); end

  def check_ambiguous_slash(tm); end

  def cmdarg(); end

  def cmdarg=(cmdarg); end

  def cmdarg_stack(); end

  def command_start(); end

  def command_start=(command_start); end

  def comments(); end

  def comments=(comments); end

  def cond(); end

  def cond=(cond); end

  def cond_stack(); end

  def context(); end

  def context=(context); end

  def dedent_level(); end

  def diagnostic(type, reason, arguments=T.unsafe(nil), location=T.unsafe(nil), highlights=T.unsafe(nil)); end

  def diagnostics(); end

  def diagnostics=(diagnostics); end

  def e_lbrace(); end

  def emit(type, value=T.unsafe(nil), s=T.unsafe(nil), e=T.unsafe(nil)); end

  def emit_class_var(ts=T.unsafe(nil), te=T.unsafe(nil)); end

  def emit_colon_with_digits(p, tm, diag_msg); end

  def emit_comment(s=T.unsafe(nil), e=T.unsafe(nil)); end

  def emit_comment_from_range(p, pe); end

  def emit_do(do_block=T.unsafe(nil)); end

  def emit_global_var(ts=T.unsafe(nil), te=T.unsafe(nil)); end

  def emit_instance_var(ts=T.unsafe(nil), te=T.unsafe(nil)); end

  def emit_rbrace_rparen_rbrack(); end

  def emit_singleton_class(); end

  def emit_table(table, s=T.unsafe(nil), e=T.unsafe(nil)); end

  def encoding(); end

  def force_utf32(); end

  def force_utf32=(force_utf32); end

  def initialize(version); end

  def lambda_stack(); end

  def numeric_literal_int(); end

  def on_newline(p); end

  def paren_nest(); end

  def pop_cmdarg(); end

  def pop_cond(); end

  def push_cmdarg(); end

  def push_cond(); end

  def range(s=T.unsafe(nil), e=T.unsafe(nil)); end

  def reset(reset_state=T.unsafe(nil)); end

  def source_buffer(); end

  def source_buffer=(source_buffer); end

  def stack_pop(); end

  def state(); end

  def state=(state); end

  def static_env(); end

  def static_env=(static_env); end

  def tok(s=T.unsafe(nil), e=T.unsafe(nil)); end

  def tokens(); end

  def tokens=(tokens); end

  def version(); end

  def version?(*versions); end
  ESCAPE_WHITESPACE = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_BEGIN = ::T.let(nil, ::T.untyped)
  LEX_STATES = ::T.let(nil, ::T.untyped)
  PUNCTUATION = ::T.let(nil, ::T.untyped)
  PUNCTUATION_BEGIN = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Dedenter
  def dedent(string); end

  def initialize(dedent_level); end

  def interrupt(); end
  TAB_WIDTH = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Literal
  def backslash_delimited?(); end

  def clear_buffer(); end

  def coerce_encoding(string); end

  def dedent_level(); end

  def delimiter?(delimiter); end

  def emit(token, type, s, e); end

  def emit_start_tok(); end

  def end_interp_brace_and_try_closing(); end

  def extend_content(); end

  def extend_space(ts, te); end

  def extend_string(string, ts, te); end

  def flush_string(); end

  def heredoc?(); end

  def heredoc_e(); end

  def infer_indent_level(line); end

  def initialize(lexer, str_type, delimiter, str_s, heredoc_e=T.unsafe(nil), indent=T.unsafe(nil), dedent_body=T.unsafe(nil), label_allowed=T.unsafe(nil)); end

  def interpolate?(); end

  def munge_escape?(character); end

  def nest_and_try_closing(delimiter, ts, te, lookahead=T.unsafe(nil)); end

  def plain_heredoc?(); end

  def regexp?(); end

  def saved_herebody_s(); end

  def saved_herebody_s=(saved_herebody_s); end

  def squiggly_heredoc?(); end

  def start_interp_brace(); end

  def str_s(); end

  def supports_line_continuation_via_slash?(); end

  def type(); end

  def words?(); end
  DELIMITERS = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  TAB = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::StackState
  def active?(); end

  def clear(); end

  def empty?(); end

  def initialize(name); end

  def lexpop(); end

  def pop(); end

  def push(bit); end
end

class Parser::Lexer
  def self.lex_en_expr_arg(); end

  def self.lex_en_expr_arg=(lex_en_expr_arg); end

  def self.lex_en_expr_beg(); end

  def self.lex_en_expr_beg=(lex_en_expr_beg); end

  def self.lex_en_expr_cmdarg(); end

  def self.lex_en_expr_cmdarg=(lex_en_expr_cmdarg); end

  def self.lex_en_expr_dot(); end

  def self.lex_en_expr_dot=(lex_en_expr_dot); end

  def self.lex_en_expr_end(); end

  def self.lex_en_expr_end=(lex_en_expr_end); end

  def self.lex_en_expr_endarg(); end

  def self.lex_en_expr_endarg=(lex_en_expr_endarg); end

  def self.lex_en_expr_endfn(); end

  def self.lex_en_expr_endfn=(lex_en_expr_endfn); end

  def self.lex_en_expr_fname(); end

  def self.lex_en_expr_fname=(lex_en_expr_fname); end

  def self.lex_en_expr_labelarg(); end

  def self.lex_en_expr_labelarg=(lex_en_expr_labelarg); end

  def self.lex_en_expr_mid(); end

  def self.lex_en_expr_mid=(lex_en_expr_mid); end

  def self.lex_en_expr_value(); end

  def self.lex_en_expr_value=(lex_en_expr_value); end

  def self.lex_en_expr_variable(); end

  def self.lex_en_expr_variable=(lex_en_expr_variable); end

  def self.lex_en_inside_string(); end

  def self.lex_en_inside_string=(lex_en_inside_string); end

  def self.lex_en_leading_dot(); end

  def self.lex_en_leading_dot=(lex_en_leading_dot); end

  def self.lex_en_line_begin(); end

  def self.lex_en_line_begin=(lex_en_line_begin); end

  def self.lex_en_line_comment(); end

  def self.lex_en_line_comment=(lex_en_line_comment); end

  def self.lex_error(); end

  def self.lex_error=(lex_error); end

  def self.lex_start(); end

  def self.lex_start=(lex_start); end
end

class Parser::LexerStrings
  def advance(p); end

  def check_ambiguous_slash(tm); end

  def check_invalid_escapes(p); end

  def close_interp_on_current_literal(p); end

  def cond(); end

  def continue_lexing(current_literal); end

  def dedent_level(); end

  def diagnostic(type, reason, arguments=T.unsafe(nil), location=T.unsafe(nil), highlights=T.unsafe(nil)); end

  def emit(type, value=T.unsafe(nil), s=T.unsafe(nil), e=T.unsafe(nil)); end

  def emit_character_constant(); end

  def emit_interp_var(interp_var_kind); end

  def emit_invalid_escapes?(); end

  def encode_escape(ord); end

  def encode_escaped_char(p); end

  def eof_codepoint?(point); end

  def extend_interp_code(current_literal); end

  def extend_interp_digit_var(); end

  def extend_interp_var(current_literal); end

  def extend_string_eol_check_eof(current_literal, pe); end

  def extend_string_eol_heredoc_intertwined(p); end

  def extend_string_eol_heredoc_line(); end

  def extend_string_eol_words(current_literal, p); end

  def extend_string_escaped(); end

  def extend_string_for_token_range(current_literal, string); end

  def extend_string_slice_end(lookahead); end

  def herebody_s(); end

  def herebody_s=(herebody_s); end

  def initialize(lexer, version); end

  def literal(); end

  def next_state_for_literal(literal); end

  def on_newline(p); end

  def pop_literal(); end

  def push_literal(*args); end

  def range(s=T.unsafe(nil), e=T.unsafe(nil)); end

  def read_character_constant(p); end

  def read_post_meta_or_ctrl_char(p); end

  def reset(); end

  def slash_c_char(); end

  def slash_m_char(); end

  def source_buffer(); end

  def source_buffer=(source_buffer); end

  def source_pts(); end

  def source_pts=(source_pts); end

  def tok(s=T.unsafe(nil), e=T.unsafe(nil)); end

  def unescape_char(p); end

  def unicode_points(p); end

  def version?(*versions); end
  ESCAPES = ::T.let(nil, ::T.untyped)
  ESCAPE_WHITESPACE = ::T.let(nil, ::T.untyped)
  LEX_STATES = ::T.let(nil, ::T.untyped)
  REGEXP_META_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class Parser::LexerStrings
  def self.lex_en_character(); end

  def self.lex_en_character=(lex_en_character); end

  def self.lex_en_interp_backslash_delimited(); end

  def self.lex_en_interp_backslash_delimited=(lex_en_interp_backslash_delimited); end

  def self.lex_en_interp_backslash_delimited_words(); end

  def self.lex_en_interp_backslash_delimited_words=(lex_en_interp_backslash_delimited_words); end

  def self.lex_en_interp_string(); end

  def self.lex_en_interp_string=(lex_en_interp_string); end

  def self.lex_en_interp_words(); end

  def self.lex_en_interp_words=(lex_en_interp_words); end

  def self.lex_en_plain_backslash_delimited(); end

  def self.lex_en_plain_backslash_delimited=(lex_en_plain_backslash_delimited); end

  def self.lex_en_plain_backslash_delimited_words(); end

  def self.lex_en_plain_backslash_delimited_words=(lex_en_plain_backslash_delimited_words); end

  def self.lex_en_plain_string(); end

  def self.lex_en_plain_string=(lex_en_plain_string); end

  def self.lex_en_plain_words(); end

  def self.lex_en_plain_words=(lex_en_plain_words); end

  def self.lex_en_regexp_modifiers(); end

  def self.lex_en_regexp_modifiers=(lex_en_regexp_modifiers); end

  def self.lex_en_unknown(); end

  def self.lex_en_unknown=(lex_en_unknown); end

  def self.lex_error(); end

  def self.lex_error=(lex_error); end

  def self.lex_start(); end

  def self.lex_start=(lex_start); end
end

class Parser::MaxNumparamStack
  def empty?(); end

  def has_numparams?(); end

  def has_ordinary_params!(); end

  def has_ordinary_params?(); end

  def pop(); end

  def push(static:); end

  def register(numparam); end

  def stack(); end

  def top(); end
  ORDINARY_PARAMS = ::T.let(nil, ::T.untyped)
end

module Parser::Messages
  def self.compile(reason, arguments); end
end

module Parser::Meta
  NODE_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Rewriter
  def assignment?(node); end

  def initialize(*arg); end

  def insert_after(range, content); end

  def insert_before(range, content); end

  def remove(range); end

  def replace(range, content); end

  def rewrite(source_buffer, ast); end

  def wrap(range, before, after); end
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Buffer
  def column_for_position(position); end

  def decompose_position(position); end

  def first_line(); end

  def initialize(name, first_line=T.unsafe(nil), source: T.unsafe(nil)); end

  def last_line(); end

  def line_for_position(position); end

  def line_range(lineno); end

  def name(); end

  def raw_source=(input); end

  def read(); end

  def slice(start, length=T.unsafe(nil)); end

  def source(); end

  def source=(input); end

  def source_line(lineno); end

  def source_lines(); end

  def source_range(); end
  ENCODING_RE = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Buffer
  def self.recognize_encoding(string); end

  def self.reencode_string(input); end
end

class Parser::Source::Comment
  def ==(other); end

  def document?(); end

  def initialize(range); end

  def inline?(); end

  def loc(); end

  def location(); end

  def text(); end

  def type(); end
end

class Parser::Source::Comment::Associator
  def associate(); end

  def associate_by_identity(); end

  def associate_locations(); end

  def initialize(ast, comments); end

  def skip_directives(); end

  def skip_directives=(skip_directives); end
  MAGIC_COMMENT_RE = ::T.let(nil, ::T.untyped)
  POSTFIX_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Comment
  def self.associate(ast, comments); end

  def self.associate_by_identity(ast, comments); end

  def self.associate_locations(ast, comments); end
end

class Parser::Source::Map
  def ==(other); end

  def column(); end

  def expression(); end

  def first_line(); end

  def initialize(expression); end

  def last_column(); end

  def last_line(); end

  def line(); end

  def node(); end

  def node=(node); end

  def to_hash(); end

  def update_expression(expression_l); end

  def with(&block); end

  def with_expression(expression_l); end
end

class Parser::Source::Map::Collection
  def begin(); end

  def end(); end

  def initialize(begin_l, end_l, expression_l); end
end

class Parser::Source::Map::Condition
  def begin(); end

  def else(); end

  def end(); end

  def initialize(keyword_l, begin_l, else_l, end_l, expression_l); end

  def keyword(); end
end

class Parser::Source::Map::Constant
  def double_colon(); end

  def initialize(double_colon, name, expression); end

  def name(); end

  def operator(); end

  def update_operator(operator_l); end

  def with_operator(operator_l); end
end

class Parser::Source::Map::Definition
  def end(); end

  def initialize(keyword_l, operator_l, name_l, end_l); end

  def keyword(); end

  def name(); end

  def operator(); end
end

class Parser::Source::Map::For
  def begin(); end

  def end(); end

  def in(); end

  def initialize(keyword_l, in_l, begin_l, end_l, expression_l); end

  def keyword(); end
end

class Parser::Source::Map::Heredoc
  def heredoc_body(); end

  def heredoc_end(); end

  def initialize(begin_l, body_l, end_l); end
end

class Parser::Source::Map::Index
  def begin(); end

  def end(); end

  def initialize(begin_l, end_l, expression_l); end

  def operator(); end

  def update_operator(operator_l); end

  def with_operator(operator_l); end
end

class Parser::Source::Map::Keyword
  def begin(); end

  def end(); end

  def initialize(keyword_l, begin_l, end_l, expression_l); end

  def keyword(); end
end

class Parser::Source::Map::MethodDefinition
  def assignment(); end

  def end(); end

  def initialize(keyword_l, operator_l, name_l, end_l, assignment_l, body_l); end

  def keyword(); end

  def name(); end

  def operator(); end
end

class Parser::Source::Map::ObjcKwarg
  def argument(); end

  def initialize(keyword_l, operator_l, argument_l, expression_l); end

  def keyword(); end

  def operator(); end
end

class Parser::Source::Map::Operator
  def initialize(operator, expression); end

  def operator(); end
end

class Parser::Source::Map::RescueBody
  def assoc(); end

  def begin(); end

  def initialize(keyword_l, assoc_l, begin_l, expression_l); end

  def keyword(); end
end

class Parser::Source::Map::Send
  def begin(); end

  def dot(); end

  def end(); end

  def initialize(dot_l, selector_l, begin_l, end_l, expression_l); end

  def operator(); end

  def selector(); end

  def update_operator(operator_l); end

  def with_operator(operator_l); end
end

class Parser::Source::Map::Ternary
  def colon(); end

  def initialize(question_l, colon_l, expression_l); end

  def question(); end
end

class Parser::Source::Map::Variable
  def initialize(name_l, expression_l=T.unsafe(nil)); end

  def name(); end

  def operator(); end

  def update_operator(operator_l); end

  def with_operator(operator_l); end
end

class Parser::Source::Range
  def adjust(begin_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end

  def begin(); end

  def begin_pos(); end

  def column(); end

  def column_range(); end

  def contained?(other); end

  def contains?(other); end

  def crossing?(other); end

  def disjoint?(other); end

  def empty?(); end

  def end(); end

  def end_pos(); end

  def first_line(); end

  def initialize(source_buffer, begin_pos, end_pos); end

  def intersect(other); end

  def is?(*what); end

  def join(other); end

  def last_column(); end

  def last_line(); end

  def length(); end

  def line(); end

  def overlaps?(other); end

  def resize(new_size); end

  def size(); end

  def source(); end

  def source_buffer(); end

  def source_line(); end

  def to_a(); end

  def to_range(); end

  def with(begin_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end
end

class Parser::Source::Rewriter
  def diagnostics(); end

  def initialize(source_buffer); end

  def insert_after(range, content); end

  def insert_after_multi(range, content); end

  def insert_before(range, content); end

  def insert_before_multi(range, content); end

  def process(); end

  def remove(range); end

  def replace(range, content); end

  def source_buffer(); end

  def transaction(); end

  def wrap(range, before, after); end
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Rewriter::Action
  def allow_multiple_insertions(); end

  def allow_multiple_insertions?(); end

  def initialize(range, replacement=T.unsafe(nil), allow_multiple_insertions=T.unsafe(nil), order=T.unsafe(nil)); end

  def order(); end

  def range(); end

  def replacement(); end
end

class Parser::Source::TreeRewriter
  def action_root(); end

  def as_nested_actions(); end

  def as_replacements(); end

  def diagnostics(); end

  def empty?(); end

  def import!(foreign_rewriter, offset: T.unsafe(nil)); end

  def in_transaction?(); end

  def initialize(source_buffer, crossing_deletions: T.unsafe(nil), different_replacements: T.unsafe(nil), swallowed_insertions: T.unsafe(nil)); end

  def insert_after(range, content); end

  def insert_after_multi(range, text); end

  def insert_before(range, content); end

  def insert_before_multi(range, text); end

  def merge(with); end

  def merge!(with); end

  def process(); end

  def remove(range); end

  def replace(range, content); end

  def source_buffer(); end

  def transaction(); end

  def wrap(range, insert_before, insert_after); end
  ACTIONS = ::T.let(nil, ::T.untyped)
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
  POLICY_TO_LEVEL = ::T.let(nil, ::T.untyped)
end

class Parser::Source::TreeRewriter::Action
  def analyse_hierarchy(action); end

  def bsearch_child_index(from=T.unsafe(nil)); end

  def call_enforcer_for_merge(action); end

  def check_fusible(action, *fusible); end

  def children(); end

  def combine(action); end

  def combine_children(more_children); end

  def contract(); end

  def do_combine(action); end

  def empty?(); end

  def fuse_deletions(action, fusible, other_sibblings); end

  def initialize(range, enforcer, insert_before: T.unsafe(nil), replacement: T.unsafe(nil), insert_after: T.unsafe(nil), children: T.unsafe(nil)); end

  def insert_after(); end

  def insert_before(); end

  def insertion?(); end

  def merge(action); end

  def moved(source_buffer, offset); end

  def nested_actions(); end

  def ordered_replacements(); end

  def place_in_hierarchy(action); end

  def range(); end

  def replacement(); end

  def swallow(children); end

  def with(range: T.unsafe(nil), enforcer: T.unsafe(nil), children: T.unsafe(nil), insert_before: T.unsafe(nil), replacement: T.unsafe(nil), insert_after: T.unsafe(nil)); end
end

class Parser::StaticEnvironment
  def declare(name); end

  def declare_anonymous_blockarg(); end

  def declare_anonymous_kwrestarg(); end

  def declare_anonymous_restarg(); end

  def declare_forward_args(); end

  def declared?(name); end

  def declared_anonymous_blockarg?(); end

  def declared_anonymous_blockarg_in_current_scpe?(); end

  def declared_anonymous_kwrestarg?(); end

  def declared_anonymous_kwrestarg_in_current_scope?(); end

  def declared_anonymous_restarg?(); end

  def declared_anonymous_restarg_in_current_scope?(); end

  def declared_forward_args?(); end

  def empty?(); end

  def extend_dynamic(); end

  def extend_static(); end

  def parent_has_anonymous_blockarg?(); end

  def parent_has_anonymous_kwrestarg?(); end

  def parent_has_anonymous_restarg?(); end

  def reset(); end

  def unextend(); end
  ANONYMOUS_BLOCKARG_INHERITED = ::T.let(nil, ::T.untyped)
  ANONYMOUS_BLOCKARG_IN_CURRENT_SCOPE = ::T.let(nil, ::T.untyped)
  ANONYMOUS_KWRESTARG_INHERITED = ::T.let(nil, ::T.untyped)
  ANONYMOUS_KWRESTARG_IN_CURRENT_SCOPE = ::T.let(nil, ::T.untyped)
  ANONYMOUS_RESTARG_INHERITED = ::T.let(nil, ::T.untyped)
  ANONYMOUS_RESTARG_IN_CURRENT_SCOPE = ::T.let(nil, ::T.untyped)
  FORWARD_ARGS = ::T.let(nil, ::T.untyped)
end

class Parser::SyntaxError
  def diagnostic(); end

  def initialize(diagnostic); end
end

class Parser::TreeRewriter
  def assignment?(node); end

  def insert_after(range, content); end

  def insert_before(range, content); end

  def remove(range); end

  def replace(range, content); end

  def rewrite(source_buffer, ast, **policy); end

  def wrap(range, before, after); end
end

class Parser::VariablesStack
  def declare(name); end

  def declared?(name); end

  def empty?(); end

  def pop(); end

  def push(); end

  def reset(); end
end

class Pathname
  def lutime(arg, arg1); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pathname
  def self.mktmpdir(); end
end

module PopperJs
  VERSION = ::T.let(nil, ::T.untyped)
end

class PrettyPrint
  VERSION = ::T.let(nil, ::T.untyped)
end

module Prism
  BACKEND = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Prism::ClassVariableAndWriteNode
  def desugar(); end
end

class Prism::ClassVariableOperatorWriteNode
  def desugar(); end
end

class Prism::ClassVariableOrWriteNode
  def desugar(); end
end

class Prism::ConstantAndWriteNode
  def desugar(); end
end

class Prism::ConstantOperatorWriteNode
  def desugar(); end
end

class Prism::ConstantOrWriteNode
  def desugar(); end
end

module Prism::DSL
  extend ::Prism::DSL
end

class Prism::DesugarCompiler
end

class Prism::DesugarCompiler
end

class Prism::Dispatcher
  def dispatch(node); end

  def dispatch_once(node); end

  def listeners(); end

  def register(listener, *events); end
end

class Prism::Dispatcher
end

class Prism::DotVisitor
  def digraph(); end

  def to_dot(); end
end

class Prism::DotVisitor
end

class Prism::GlobalVariableAndWriteNode
  def desugar(); end
end

class Prism::GlobalVariableOperatorWriteNode
  def desugar(); end
end

class Prism::GlobalVariableOrWriteNode
  def desugar(); end
end

class Prism::InspectVisitor
  def commands(); end

  def indent(); end
end

class Prism::InstanceVariableAndWriteNode
  def desugar(); end
end

class Prism::InstanceVariableOperatorWriteNode
  def desugar(); end
end

class Prism::InstanceVariableOrWriteNode
  def desugar(); end
end

class Prism::LocalVariableAndWriteNode
  def desugar(); end
end

class Prism::LocalVariableOperatorWriteNode
  def desugar(); end
end

class Prism::LocalVariableOrWriteNode
  def desugar(); end
end

class Prism::MutationCompiler
end

class Prism::MutationCompiler
end

module Prism::Pack
  AGNOSTIC_ENDIAN = ::T.let(nil, ::T.untyped)
  BACK = ::T.let(nil, ::T.untyped)
  BER = ::T.let(nil, ::T.untyped)
  BIG_ENDIAN = ::T.let(nil, ::T.untyped)
  COMMENT = ::T.let(nil, ::T.untyped)
  ENDIAN_NA = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  INTEGER = ::T.let(nil, ::T.untyped)
  LENGTH_FIXED = ::T.let(nil, ::T.untyped)
  LENGTH_MAX = ::T.let(nil, ::T.untyped)
  LENGTH_NA = ::T.let(nil, ::T.untyped)
  LENGTH_RELATIVE = ::T.let(nil, ::T.untyped)
  LITTLE_ENDIAN = ::T.let(nil, ::T.untyped)
  MOVE = ::T.let(nil, ::T.untyped)
  NATIVE_ENDIAN = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  SIGNED = ::T.let(nil, ::T.untyped)
  SIGNED_NA = ::T.let(nil, ::T.untyped)
  SIZE_16 = ::T.let(nil, ::T.untyped)
  SIZE_32 = ::T.let(nil, ::T.untyped)
  SIZE_64 = ::T.let(nil, ::T.untyped)
  SIZE_8 = ::T.let(nil, ::T.untyped)
  SIZE_INT = ::T.let(nil, ::T.untyped)
  SIZE_LONG = ::T.let(nil, ::T.untyped)
  SIZE_LONG_LONG = ::T.let(nil, ::T.untyped)
  SIZE_NA = ::T.let(nil, ::T.untyped)
  SIZE_P = ::T.let(nil, ::T.untyped)
  SIZE_SHORT = ::T.let(nil, ::T.untyped)
  SPACE = ::T.let(nil, ::T.untyped)
  STRING_BASE64 = ::T.let(nil, ::T.untyped)
  STRING_FIXED = ::T.let(nil, ::T.untyped)
  STRING_HEX_HIGH = ::T.let(nil, ::T.untyped)
  STRING_HEX_LOW = ::T.let(nil, ::T.untyped)
  STRING_LSB = ::T.let(nil, ::T.untyped)
  STRING_MIME = ::T.let(nil, ::T.untyped)
  STRING_MSB = ::T.let(nil, ::T.untyped)
  STRING_NULL_PADDED = ::T.let(nil, ::T.untyped)
  STRING_NULL_TERMINATED = ::T.let(nil, ::T.untyped)
  STRING_POINTER = ::T.let(nil, ::T.untyped)
  STRING_SPACE_PADDED = ::T.let(nil, ::T.untyped)
  STRING_UU = ::T.let(nil, ::T.untyped)
  UNSIGNED = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
end

class Prism::Pack::Directive
  ENDIAN_DESCRIPTIONS = ::T.let(nil, ::T.untyped)
  SIGNED_DESCRIPTIONS = ::T.let(nil, ::T.untyped)
  SIZE_DESCRIPTIONS = ::T.let(nil, ::T.untyped)
end

class Prism::Pattern
  def compile(); end

  def initialize(query); end

  def query(); end

  def scan(root); end
end

class Prism::Pattern::CompilationError
  def initialize(repr); end
end

class Prism::Pattern::CompilationError
end

class Prism::Pattern
end

module Prism::Relocation
end

class Prism::Relocation::CharacterColumnsField
  def fields(value); end
end

class Prism::Relocation::CharacterColumnsField
end

class Prism::Relocation::CharacterOffsetsField
  def fields(value); end
end

class Prism::Relocation::CharacterOffsetsField
end

class Prism::Relocation::CodeUnitColumnsField
  def encoding(); end

  def fields(value); end

  def initialize(repository, encoding); end

  def repository(); end
end

class Prism::Relocation::CodeUnitColumnsField
end

class Prism::Relocation::CodeUnitOffsetsField
  def encoding(); end

  def fields(value); end

  def initialize(repository, encoding); end

  def repository(); end
end

class Prism::Relocation::CodeUnitOffsetsField
end

class Prism::Relocation::ColumnsField
  def fields(value); end
end

class Prism::Relocation::ColumnsField
end

class Prism::Relocation::CommentsField
end

class Prism::Relocation::CommentsField::Comment
  def initialize(slice); end

  def slice(); end
end

class Prism::Relocation::CommentsField::Comment
end

class Prism::Relocation::CommentsField
end

class Prism::Relocation::Entry
  def comments(); end

  def end_character_column(); end

  def end_character_offset(); end

  def end_code_units_column(); end

  def end_code_units_offset(); end

  def end_column(); end

  def end_line(); end

  def end_offset(); end

  def filepath(); end

  def initialize(repository); end

  def leading_comments(); end

  def reify!(values); end

  def start_character_column(); end

  def start_character_offset(); end

  def start_code_units_column(); end

  def start_code_units_offset(); end

  def start_column(); end

  def start_line(); end

  def start_offset(); end

  def trailing_comments(); end
end

class Prism::Relocation::Entry::MissingValueError
end

class Prism::Relocation::Entry::MissingValueError
end

class Prism::Relocation::Entry
end

class Prism::Relocation::FilepathField
  def fields(_value); end

  def initialize(value); end

  def value(); end
end

class Prism::Relocation::FilepathField
end

class Prism::Relocation::LeadingCommentsField
  def fields(value); end
end

class Prism::Relocation::LeadingCommentsField
end

class Prism::Relocation::LinesField
  def fields(value); end
end

class Prism::Relocation::LinesField
end

class Prism::Relocation::OffsetsField
  def fields(value); end
end

class Prism::Relocation::OffsetsField
end

class Prism::Relocation::Repository
  def character_columns(); end

  def character_offsets(); end

  def code_unit_columns(encoding); end

  def code_unit_offsets(encoding); end

  def code_units_cache(encoding); end

  def columns(); end

  def comments(); end

  def enter(node_id, field_name); end

  def entries(); end

  def fields(); end

  def filepath(); end

  def initialize(source); end

  def leading_comments(); end

  def lines(); end

  def offsets(); end

  def reify!(); end

  def source(); end

  def trailing_comments(); end
end

class Prism::Relocation::Repository::ConfigurationError
end

class Prism::Relocation::Repository::ConfigurationError
end

class Prism::Relocation::Repository
end

class Prism::Relocation::Source
  def code_units_cache(encoding); end

  def initialize(value); end

  def result(); end

  def value(); end
end

class Prism::Relocation::Source
end

class Prism::Relocation::SourceFilepath
end

class Prism::Relocation::SourceFilepath
end

class Prism::Relocation::SourceString
end

class Prism::Relocation::SourceString
end

class Prism::Relocation::TrailingCommentsField
  def fields(value); end
end

class Prism::Relocation::TrailingCommentsField
end

module Prism::Relocation
  def self.filepath(value); end

  def self.string(value); end
end

module Prism::Serialize
end

module Prism::Serialize
  def self.load_lex(input, serialized, freeze); end

  def self.load_parse(input, serialized, freeze); end

  def self.load_parse_comments(input, serialized, freeze); end

  def self.load_parse_lex(input, serialized, freeze); end
end

class Prism::Translation::Parser
  def default_encoding(); end

  def initialize(builder=T.unsafe(nil), parser: T.unsafe(nil)); end

  def try_declare_numparam(node); end
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
end

class Prism::Translation::Parser::Builder
  def itarg(); end
end

class Prism::Translation::Parser::Builder
end

class Prism::Translation::Parser::PrismDiagnostic
  def initialize(message, level, reason, location); end
end

class Prism::Translation::Parser::PrismDiagnostic
end

class Prism::Translation::Ripper
  def column(); end

  def filename(); end

  def initialize(source, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end

  def lineno(); end

  def source(); end
  EVENTS = ::T.let(nil, ::T.untyped)
  PARSER_EVENTS = ::T.let(nil, ::T.untyped)
  PARSER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
  SCANNER_EVENTS = ::T.let(nil, ::T.untyped)
  SCANNER_EVENT_TABLE = ::T.let(nil, ::T.untyped)
end

class Prism::Translation::Ripper::SexpBuilder
  def error(); end

  def on_BEGIN(*args); end

  def on_CHAR(tok); end

  def on_END(*args); end

  def on___end__(tok); end

  def on_alias(*args); end

  def on_alias_error(*args); end

  def on_aref(*args); end

  def on_aref_field(*args); end

  def on_arg_ambiguous(*args); end

  def on_arg_paren(*args); end

  def on_args_add(*args); end

  def on_args_add_block(*args); end

  def on_args_add_star(*args); end

  def on_args_forward(*args); end

  def on_args_new(*args); end

  def on_array(*args); end

  def on_aryptn(*args); end

  def on_assign(*args); end

  def on_assign_error(*args); end

  def on_assoc_new(*args); end

  def on_assoc_splat(*args); end

  def on_assoclist_from_args(*args); end

  def on_backref(tok); end

  def on_backtick(tok); end

  def on_bare_assoc_hash(*args); end

  def on_begin(*args); end

  def on_binary(*args); end

  def on_block_var(*args); end

  def on_blockarg(*args); end

  def on_bodystmt(*args); end

  def on_brace_block(*args); end

  def on_break(*args); end

  def on_call(*args); end

  def on_case(*args); end

  def on_class(*args); end

  def on_class_name_error(*args); end

  def on_comma(tok); end

  def on_command(*args); end

  def on_command_call(*args); end

  def on_comment(tok); end

  def on_const(tok); end

  def on_const_path_field(*args); end

  def on_const_path_ref(*args); end

  def on_const_ref(*args); end

  def on_cvar(tok); end

  def on_def(*args); end

  def on_defined(*args); end

  def on_defs(*args); end

  def on_do_block(*args); end

  def on_dot2(*args); end

  def on_dot3(*args); end

  def on_dyna_symbol(*args); end

  def on_else(*args); end

  def on_elsif(*args); end

  def on_embdoc(tok); end

  def on_embdoc_beg(tok); end

  def on_embdoc_end(tok); end

  def on_embexpr_beg(tok); end

  def on_embexpr_end(tok); end

  def on_embvar(tok); end

  def on_ensure(*args); end

  def on_excessed_comma(*args); end

  def on_fcall(*args); end

  def on_field(*args); end

  def on_float(tok); end

  def on_fndptn(*args); end

  def on_for(*args); end

  def on_gvar(tok); end

  def on_hash(*args); end

  def on_heredoc_beg(tok); end

  def on_heredoc_end(tok); end

  def on_hshptn(*args); end

  def on_ident(tok); end

  def on_if(*args); end

  def on_if_mod(*args); end

  def on_ifop(*args); end

  def on_ignored_nl(tok); end

  def on_ignored_sp(tok); end

  def on_imaginary(tok); end

  def on_in(*args); end

  def on_int(tok); end

  def on_ivar(tok); end

  def on_kw(tok); end

  def on_kwrest_param(*args); end

  def on_label(tok); end

  def on_label_end(tok); end

  def on_lambda(*args); end

  def on_lbrace(tok); end

  def on_lbracket(tok); end

  def on_lparen(tok); end

  def on_magic_comment(*args); end

  def on_massign(*args); end

  def on_method_add_arg(*args); end

  def on_method_add_block(*args); end

  def on_mlhs_add(*args); end

  def on_mlhs_add_post(*args); end

  def on_mlhs_add_star(*args); end

  def on_mlhs_new(*args); end

  def on_mlhs_paren(*args); end

  def on_module(*args); end

  def on_mrhs_add(*args); end

  def on_mrhs_add_star(*args); end

  def on_mrhs_new(*args); end

  def on_mrhs_new_from_args(*args); end

  def on_next(*args); end

  def on_nl(tok); end

  def on_nokw_param(*args); end

  def on_op(tok); end

  def on_opassign(*args); end

  def on_operator_ambiguous(*args); end

  def on_param_error(*args); end

  def on_params(*args); end

  def on_paren(*args); end

  def on_period(tok); end

  def on_program(*args); end

  def on_qsymbols_add(*args); end

  def on_qsymbols_beg(tok); end

  def on_qsymbols_new(*args); end

  def on_qwords_add(*args); end

  def on_qwords_beg(tok); end

  def on_qwords_new(*args); end

  def on_rational(tok); end

  def on_rbrace(tok); end

  def on_rbracket(tok); end

  def on_redo(*args); end

  def on_regexp_add(*args); end

  def on_regexp_beg(tok); end

  def on_regexp_end(tok); end

  def on_regexp_literal(*args); end

  def on_regexp_new(*args); end

  def on_rescue(*args); end

  def on_rescue_mod(*args); end

  def on_rest_param(*args); end

  def on_retry(*args); end

  def on_return(*args); end

  def on_return0(*args); end

  def on_rparen(tok); end

  def on_sclass(*args); end

  def on_semicolon(tok); end

  def on_sp(tok); end

  def on_stmts_add(*args); end

  def on_stmts_new(*args); end

  def on_string_add(*args); end

  def on_string_concat(*args); end

  def on_string_content(*args); end

  def on_string_dvar(*args); end

  def on_string_embexpr(*args); end

  def on_string_literal(*args); end

  def on_super(*args); end

  def on_symbeg(tok); end

  def on_symbol(*args); end

  def on_symbol_literal(*args); end

  def on_symbols_add(*args); end

  def on_symbols_beg(tok); end

  def on_symbols_new(*args); end

  def on_tlambda(tok); end

  def on_tlambeg(tok); end

  def on_top_const_field(*args); end

  def on_top_const_ref(*args); end

  def on_tstring_beg(tok); end

  def on_tstring_content(tok); end

  def on_tstring_end(tok); end

  def on_unary(*args); end

  def on_undef(*args); end

  def on_unless(*args); end

  def on_unless_mod(*args); end

  def on_until(*args); end

  def on_until_mod(*args); end

  def on_var_alias(*args); end

  def on_var_field(*args); end

  def on_var_ref(*args); end

  def on_vcall(*args); end

  def on_void_stmt(*args); end

  def on_when(*args); end

  def on_while(*args); end

  def on_while_mod(*args); end

  def on_word_add(*args); end

  def on_word_new(*args); end

  def on_words_add(*args); end

  def on_words_beg(tok); end

  def on_words_new(*args); end

  def on_words_sep(tok); end

  def on_xstring_add(*args); end

  def on_xstring_literal(*args); end

  def on_xstring_new(*args); end

  def on_yield(*args); end

  def on_yield0(*args); end

  def on_zsuper(*args); end
end

class Prism::Translation::Ripper::SexpBuilder
end

class Prism::Translation::Ripper::SexpBuilderPP
end

class Prism::Translation::Ripper::SexpBuilderPP
end

class Prism::Translation::Ripper
  def self.lex(src, filename=T.unsafe(nil), lineno=T.unsafe(nil), raise_errors: T.unsafe(nil)); end

  def self.parse(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end
end

class Prism::Translation::RubyParser
  def parse(source, filepath=T.unsafe(nil)); end

  def parse_file(filepath); end
end

class Prism::Translation::RubyParser
  def self.parse(source, filepath=T.unsafe(nil)); end

  def self.parse_file(filepath); end
end

class Proc
  def <<(arg); end

  def >>(arg); end

  def clone(); end
end

class Process::Status
  def self.wait(*arg); end
end

class Process::Tms
  def self.keyword_init?(); end
end

module Process
  extend ::SQLite3::ForkSafety::CoreExt
  extend ::FFI::ModernForkTracking
  extend ::RedisClient::PIDCache::CoreExt
  extend ::ConnectionPool::ForkTracker
  extend ::Dalli::PIDCache::CoreExt
  extend ::ActiveSupport::ForkTracker::CoreExt
  extend ::DEBUGGER__::ForkInterceptor
  extend ::DEBUGGER__::ForkInterceptor::DaemonInterceptor
  def self.exit(*arg); end
end

class Propshaft::Compiler::CssAssetUrls
  ASSET_URL_PATTERN = ::T.let(nil, ::T.untyped)
end

class Propshaft::Compiler::JsAssetUrls
  ASSET_URL_PATTERN = ::T.let(nil, ::T.untyped)
end

class Propshaft::Compiler::SourceMappingUrls
  SOURCE_MAPPING_PATTERN = ::T.let(nil, ::T.untyped)
end

class Propshaft::Server
  VARY = ::T.let(nil, ::T.untyped)
end

module Psych
  LOADER_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Psych::ScalarScanner
  INTEGER_LEGACY = ::T.let(nil, ::T.untyped)
  INTEGER_STRICT = ::T.let(nil, ::T.untyped)
end

class Psych::Visitors::RestrictedYAMLTree
  DEFAULT_PERMITTED_CLASSES = ::T.let(nil, ::T.untyped)
end

module Psych
  extend ::Bootsnap::CompileCache::YAML::Psych4::Patch
end

module PublicSuffix
  BANG = ::T.let(nil, ::T.untyped)
  DOT = ::T.let(nil, ::T.untyped)
  STAR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class PublicSuffix::List
  DEFAULT_LIST_PATH = ::T.let(nil, ::T.untyped)
end

module Puma
  HAS_FORK = ::T.let(nil, ::T.untyped)
  HAS_NATIVE_IO_WAIT = ::T.let(nil, ::T.untyped)
  HAS_SSL = ::T.let(nil, ::T.untyped)
  HAS_UNIX_SOCKET = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  IS_JRUBY = ::T.let(nil, ::T.untyped)
  IS_LINUX = ::T.let(nil, ::T.untyped)
  IS_MRI = ::T.let(nil, ::T.untyped)
  IS_OSX = ::T.let(nil, ::T.untyped)
  IS_WINDOWS = ::T.let(nil, ::T.untyped)
  Plugins = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Puma::Binder
  def activated_sockets(); end

  def add_ssl_listener(host, port, ctx, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_tcp_listener(host, port, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_unix_listener(path, umask=T.unsafe(nil), mode=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def before_parse(&block); end

  def close(); end

  def close_listeners(); end

  def connected_ports(); end

  def create_activated_fds(env_hash); end

  def create_inherited_fds(env_hash); end

  def env(sock); end

  def envs(); end

  def inherit_ssl_listener(fd, ctx); end

  def inherit_tcp_listener(host, port, fd); end

  def inherit_unix_listener(path, fd); end

  def inherited_fds(); end

  def initialize(log_writer, conf=T.unsafe(nil), env: T.unsafe(nil)); end

  def ios(); end

  def ios=(ios); end

  def listeners(); end

  def listeners=(listeners); end

  def localhost_authority(); end

  def localhost_authority_context(); end

  def parse(binds, log_writer=T.unsafe(nil), log_msg=T.unsafe(nil)); end

  def proto_env(); end

  def redirects_for_restart(); end

  def redirects_for_restart_env(); end

  def synthesize_binds_from_activated_fs(binds, only_matching); end

  def unix_paths(); end
  RACK_VERSION = ::T.let(nil, ::T.untyped)
end

class Puma::Client
  def body(); end

  def call(); end

  def can_close?(); end

  def close(); end

  def closed?(); end

  def eagerly_finish(); end

  def env(); end

  def expect_proxy_proto=(val); end

  def finish(timeout); end

  def hijacked(); end

  def http_content_length_limit=(http_content_length_limit); end

  def http_content_length_limit_exceeded(); end

  def in_data_phase(); end

  def initialize(io, env=T.unsafe(nil)); end

  def io(); end

  def io_buffer(); end

  def io_ok?(); end

  def listener(); end

  def listener=(listener); end

  def peer_family(); end

  def peerip(); end

  def peerip=(peerip); end

  def ready(); end

  def remote_addr_header(); end

  def remote_addr_header=(remote_addr_header); end

  def reset(fast_check=T.unsafe(nil)); end

  def set_timeout(val); end

  def tempfile(); end

  def tempfile_close(); end

  def timeout(); end

  def timeout!(); end

  def timeout_at(); end

  def to_io(); end

  def try_to_finish(); end

  def try_to_parse_proxy_protocol(); end

  def write_error(status_code); end
  ALLOWED_TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE_INVALID = ::T.let(nil, ::T.untyped)
  CHUNK_VALID_ENDING = ::T.let(nil, ::T.untyped)
  CHUNK_VALID_ENDING_SIZE = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH_VALUE_INVALID = ::T.let(nil, ::T.untyped)
  EmptyBody = ::T.let(nil, ::T.untyped)
  MAX_CHUNK_EXCESS = ::T.let(nil, ::T.untyped)
  MAX_CHUNK_HEADER_SIZE = ::T.let(nil, ::T.untyped)
  TE_ERR_MSG = ::T.let(nil, ::T.untyped)
end

class Puma::Cluster
  def all_workers_booted?(); end

  def all_workers_idle_timed_out?(); end

  def all_workers_in_phase?(); end

  def check_workers(); end

  def cull_start_index(diff); end

  def cull_workers(); end

  def fork_worker!(); end

  def halt(); end

  def next_worker_index(); end

  def phased_restart(refork=T.unsafe(nil)); end

  def preload?(); end

  def reload_worker_directory(); end

  def restart(); end

  def run(); end

  def setup_signals(); end

  def spawn_worker(idx, master); end

  def spawn_workers(); end

  def start_phased_restart(); end

  def stop(); end

  def stop_blocked(); end

  def stop_workers(); end

  def worker(index, master); end

  def worker_at(idx); end

  def workers(); end

  def workers_to_cull(diff); end
end

class Puma::Cluster::Worker
  def index(); end

  def initialize(index:, master:, launcher:, pipes:, server: T.unsafe(nil)); end

  def master(); end

  def run(); end
end

class Puma::Cluster::WorkerHandle
  def boot!(); end

  def booted?(); end

  def hup(); end

  def index(); end

  def initialize(idx, pid, phase, options); end

  def kill(); end

  def last_checkin(); end

  def last_status(); end

  def phase(); end

  def phase=(phase); end

  def pid(); end

  def pid=(pid); end

  def ping!(status); end

  def ping_timeout(); end

  def signal(); end

  def started_at(); end

  def term(); end

  def term!(); end

  def term?(); end

  def uptime(); end
end

class Puma::Configuration
  def app(); end

  def app_configured?(); end

  def clamp(); end

  def config_files(); end

  def configure(); end

  def environment(); end

  def final_options(); end

  def flatten(); end

  def flatten!(); end

  def initialize(user_options=T.unsafe(nil), default_options=T.unsafe(nil), env=T.unsafe(nil), &block); end

  def load(); end

  def load_plugin(name); end

  def options(); end

  def plugins(); end

  def puma_default_options(env=T.unsafe(nil)); end

  def puma_options_from_env(env=T.unsafe(nil)); end

  def rackup(); end

  def run_hooks(key, arg, log_writer, hook_data=T.unsafe(nil)); end
  DEFAULTS = ::T.let(nil, ::T.untyped)
end

class Puma::Configuration::ConfigMiddleware
  def call(env); end

  def initialize(config, app); end
end

class Puma::Configuration
  def self.random_token(); end

  def self.temp_path(); end
end

module Puma::Const
  BANNED_HEADER_KEY = ::T.let(nil, ::T.untyped)
  CGI_VER = ::T.let(nil, ::T.untyped)
  CHUNKED = ::T.let(nil, ::T.untyped)
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  CLOSE = ::T.let(nil, ::T.untyped)
  CLOSE_CHUNKED = ::T.let(nil, ::T.untyped)
  CODE_NAME = ::T.let(nil, ::T.untyped)
  COLON = ::T.let(nil, ::T.untyped)
  CONNECTION_CLOSE = ::T.let(nil, ::T.untyped)
  CONNECTION_KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH2 = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH_S = ::T.let(nil, ::T.untyped)
  CONTINUE = ::T.let(nil, ::T.untyped)
  DQUOTE = ::T.let(nil, ::T.untyped)
  EARLY_HINTS = ::T.let(nil, ::T.untyped)
  ERROR_RESPONSE = ::T.let(nil, ::T.untyped)
  FAST_TRACK_KA_TIMEOUT = ::T.let(nil, ::T.untyped)
  GATEWAY_INTERFACE = ::T.let(nil, ::T.untyped)
  HALT_COMMAND = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HIJACK = ::T.let(nil, ::T.untyped)
  HIJACK_IO = ::T.let(nil, ::T.untyped)
  HIJACK_P = ::T.let(nil, ::T.untyped)
  HTTP = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTPS_KEY = ::T.let(nil, ::T.untyped)
  HTTP_10_200 = ::T.let(nil, ::T.untyped)
  HTTP_11 = ::T.let(nil, ::T.untyped)
  HTTP_11_100 = ::T.let(nil, ::T.untyped)
  HTTP_11_200 = ::T.let(nil, ::T.untyped)
  HTTP_CONNECTION = ::T.let(nil, ::T.untyped)
  HTTP_EXPECT = ::T.let(nil, ::T.untyped)
  HTTP_HEADER_DELIMITER = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  IANA_HTTP_METHODS = ::T.let(nil, ::T.untyped)
  ILLEGAL_HEADER_KEY_REGEX = ::T.let(nil, ::T.untyped)
  ILLEGAL_HEADER_VALUE_REGEX = ::T.let(nil, ::T.untyped)
  KEEP_ALIVE = ::T.let(nil, ::T.untyped)
  LINE_END = ::T.let(nil, ::T.untyped)
  LOCALHOST = ::T.let(nil, ::T.untyped)
  LOCALHOST_IPV4 = ::T.let(nil, ::T.untyped)
  LOCALHOST_IPV6 = ::T.let(nil, ::T.untyped)
  MAX_BODY = ::T.let(nil, ::T.untyped)
  MAX_HEADER = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  PORT_443 = ::T.let(nil, ::T.untyped)
  PORT_80 = ::T.let(nil, ::T.untyped)
  PROXY_PROTOCOL_V1_REGEX = ::T.let(nil, ::T.untyped)
  PUMA_CONFIG = ::T.let(nil, ::T.untyped)
  PUMA_PEERCERT = ::T.let(nil, ::T.untyped)
  PUMA_SERVER_STRING = ::T.let(nil, ::T.untyped)
  PUMA_SOCKET = ::T.let(nil, ::T.untyped)
  PUMA_TMP_BASE = ::T.let(nil, ::T.untyped)
  PUMA_VERSION = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_AFTER_REPLY = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  REMOTE_ADDR = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  REQUEST_URI = ::T.let(nil, ::T.untyped)
  RESTART_COMMAND = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SERVER_SOFTWARE = ::T.let(nil, ::T.untyped)
  STOP_COMMAND = ::T.let(nil, ::T.untyped)
  SUPPORTED_HTTP_METHODS = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING2 = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING_CHUNKED = ::T.let(nil, ::T.untyped)
  UNMASKABLE_HEADERS = ::T.let(nil, ::T.untyped)
  UNSPECIFIED_IPV4 = ::T.let(nil, ::T.untyped)
  UNSPECIFIED_IPV6 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  WRITE_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Puma::Const::PipeRequest
  PIPE_BOOT = ::T.let(nil, ::T.untyped)
  PIPE_EXTERNAL_TERM = ::T.let(nil, ::T.untyped)
  PIPE_FORK = ::T.let(nil, ::T.untyped)
  PIPE_IDLE = ::T.let(nil, ::T.untyped)
  PIPE_PING = ::T.let(nil, ::T.untyped)
  PIPE_TERM = ::T.let(nil, ::T.untyped)
  PIPE_WAKEUP = ::T.let(nil, ::T.untyped)
end

class Puma::DSL
  def _load_from(path); end

  def _offer_plugins(); end

  def activate_control_app(url=T.unsafe(nil), opts=T.unsafe(nil)); end

  def after_refork(key=T.unsafe(nil), &block); end

  def after_worker_boot(&block); end

  def after_worker_fork(&block); end

  def app(obj=T.unsafe(nil), &block); end

  def before_fork(&block); end

  def bind(url); end

  def bind_to_activated_sockets(bind=T.unsafe(nil)); end

  def clean_thread_locals(which=T.unsafe(nil)); end

  def clear_binds!(); end

  def custom_logger(custom_logger); end

  def debug(); end

  def default_host(); end

  def directory(dir); end

  def drain_on_shutdown(which=T.unsafe(nil)); end

  def early_hints(answer=T.unsafe(nil)); end

  def enable_keep_alives(enabled=T.unsafe(nil)); end

  def environment(environment); end

  def extra_runtime_dependencies(answer=T.unsafe(nil)); end

  def first_data_timeout(seconds); end

  def force_shutdown_after(val=T.unsafe(nil)); end

  def fork_worker(after_requests=T.unsafe(nil)); end

  def get(key, default=T.unsafe(nil)); end

  def http_content_length_limit(limit); end

  def idle_timeout(seconds); end

  def initialize(options, config); end

  def inject(&blk); end

  def io_selector_backend(backend); end

  def load(file); end

  def log_formatter(&block); end

  def log_requests(which=T.unsafe(nil)); end

  def lowlevel_error_handler(obj=T.unsafe(nil), &block); end

  def max_fast_inline(num_of_requests); end

  def mutate_stdout_and_stderr_to_sync_on_write(enabled=T.unsafe(nil)); end

  def on_booted(&block); end

  def on_refork(key=T.unsafe(nil), &block); end

  def on_restart(&block); end

  def on_stopped(&block); end

  def on_thread_exit(&block); end

  def on_thread_start(&block); end

  def on_worker_boot(key=T.unsafe(nil), &block); end

  def on_worker_fork(&block); end

  def on_worker_shutdown(key=T.unsafe(nil), &block); end

  def out_of_band(&block); end

  def persistent_timeout(seconds); end

  def pidfile(path); end

  def plugin(name); end

  def port(port, host=T.unsafe(nil)); end

  def preload_app!(answer=T.unsafe(nil)); end

  def prune_bundler(answer=T.unsafe(nil)); end

  def queue_requests(answer=T.unsafe(nil)); end

  def quiet(which=T.unsafe(nil)); end

  def rack_url_scheme(scheme=T.unsafe(nil)); end

  def rackup(path); end

  def raise_exception_on_sigterm(answer=T.unsafe(nil)); end

  def restart_command(cmd); end

  def set_default_host(host); end

  def set_remote_address(val=T.unsafe(nil)); end

  def shutdown_debug(val=T.unsafe(nil)); end

  def silence_fork_callback_warning(); end

  def silence_single_worker_warning(); end

  def ssl_bind(host, port, opts=T.unsafe(nil)); end

  def state_path(path); end

  def state_permission(permission); end

  def stdout_redirect(stdout=T.unsafe(nil), stderr=T.unsafe(nil), append=T.unsafe(nil)); end

  def supported_http_methods(methods); end

  def tag(string); end

  def threads(min, max=T.unsafe(nil)); end

  def wait_for_less_busy_worker(val=T.unsafe(nil)); end

  def worker_boot_timeout(timeout); end

  def worker_check_interval(interval); end

  def worker_culling_strategy(strategy); end

  def worker_shutdown_timeout(timeout); end

  def worker_timeout(timeout); end

  def workers(count); end
  ON_WORKER_KEY = ::T.let(nil, ::T.untyped)
end

class Puma::DSL
  def self.ssl_bind_str(host, port, opts); end
end

class Puma::ErrorLogger
  def debug(options=T.unsafe(nil)); end

  def info(options=T.unsafe(nil)); end

  def initialize(ioerr, env: T.unsafe(nil)); end

  def ioerr(); end

  def request_dump(req); end

  def request_headers(req); end

  def request_parsed?(req); end

  def request_title(req); end

  def title(options=T.unsafe(nil)); end
  LOG_QUEUE = ::T.let(nil, ::T.untyped)
  REQUEST_FORMAT = ::T.let(nil, ::T.untyped)
end

class Puma::ErrorLogger
  def self.stdio(env: T.unsafe(nil)); end
end

class Puma::Events
  def fire(hook, *args); end

  def fire_on_booted!(); end

  def fire_on_restart!(); end

  def fire_on_stopped!(); end

  def on_booted(&block); end

  def on_restart(&block); end

  def on_stopped(&block); end

  def register(hook, obj=T.unsafe(nil), &blk); end
end

class Puma::HttpParserError
end

class Puma::HttpParserError
end

class Puma::IOBuffer
  def append(*arg); end

  def clear(); end

  def empty?(); end

  def initialize(); end

  def read_and_reset(); end

  def reset(); end
end

module Puma::JSONSerialization
  BACKSLASH = ::T.let(nil, ::T.untyped)
  CHAR_TO_ESCAPE = ::T.let(nil, ::T.untyped)
  CONTROL_CHAR_TO_ESCAPE = ::T.let(nil, ::T.untyped)
  QUOTE = ::T.let(nil, ::T.untyped)
end

class Puma::Launcher
  def binder(); end

  def close_binder_listeners(); end

  def config(); end

  def connected_ports(); end

  def delete_pidfile(); end

  def events(); end

  def halt(); end

  def initialize(conf, launcher_args=T.unsafe(nil)); end

  def log_writer(); end

  def options(); end

  def phased_restart(); end

  def refork(); end

  def restart(); end

  def restart_args(); end

  def restart_dir(); end

  def run(); end

  def stats(); end

  def stop(); end

  def thread_status(); end

  def write_state(); end
end

class Puma::Launcher::BundlePruner
  def initialize(original_argv, extra_runtime_dependencies, log_writer); end

  def prune(); end
end

class Puma::Launcher::BundlePruner
end

class Puma::LogWriter
  def connection_error(error, req, text=T.unsafe(nil)); end

  def custom_logger(); end

  def custom_logger=(custom_logger); end

  def debug(str); end

  def debug_error(error, req=T.unsafe(nil), text=T.unsafe(nil)); end

  def error(str); end

  def format(str); end

  def formatter(); end

  def formatter=(formatter); end

  def initialize(stdout, stderr, env: T.unsafe(nil)); end

  def log(str); end

  def parse_error(error, req); end

  def ssl_error(error, ssl_socket); end

  def stderr(); end

  def stdout(); end

  def unknown_error(error, req=T.unsafe(nil), text=T.unsafe(nil)); end

  def write(str); end
  DEFAULT = ::T.let(nil, ::T.untyped)
  LOG_QUEUE = ::T.let(nil, ::T.untyped)
end

class Puma::LogWriter::DefaultFormatter
  def call(str); end
end

class Puma::LogWriter::PidFormatter
  def call(str); end
end

class Puma::LogWriter
  def self.null(env: T.unsafe(nil)); end

  def self.stdio(env: T.unsafe(nil)); end

  def self.strings(env: T.unsafe(nil)); end
end

module Puma::MiniSSL
  HAS_TLS1_3 = ::T.let(nil, ::T.untyped)
  OPENSSL_LIBRARY_VERSION = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_SSL3 = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_TLS1 = ::T.let(nil, ::T.untyped)
  OPENSSL_NO_TLS1_1 = ::T.let(nil, ::T.untyped)
  OPENSSL_VERSION = ::T.let(nil, ::T.untyped)
  VERIFICATION_FLAGS = ::T.let(nil, ::T.untyped)
  VERIFY_FAIL_IF_NO_PEER_CERT = ::T.let(nil, ::T.untyped)
  VERIFY_NONE = ::T.let(nil, ::T.untyped)
  VERIFY_PEER = ::T.let(nil, ::T.untyped)
end

class Puma::MiniSSL::ContextBuilder
  def context(); end

  def initialize(params, log_writer); end
end

class Puma::MiniSSL::SSLError
end

class Puma::MiniSSL::SSLError
end

class Puma::NullIO
  def binmode(); end

  def binmode?(); end

  def close(); end

  def closed?(); end

  def each(&blk); end

  def eof?(); end

  def external_encoding(); end

  def flush(); end

  def gets(); end

  def pos(); end

  def puts(*ary); end

  def read(length=T.unsafe(nil), buffer=T.unsafe(nil)); end

  def rewind(); end

  def seek(pos, whence=T.unsafe(nil)); end

  def set_encoding(enc); end

  def size(); end

  def string(); end

  def sync(); end

  def sync=(v); end

  def write(*ary); end
end

class Puma::Plugin
  def in_background(&blk); end
  CALLER_FILE = ::T.let(nil, ::T.untyped)
end

class Puma::Plugin
  def self.create(&blk); end

  def self.extract_name(ary); end
end

class Puma::PluginLoader
  def create(name); end

  def fire_starts(launcher); end
end

class Puma::PluginRegistry
  def add_background(blk); end

  def find(name); end

  def fire_background(); end

  def register(name, cls); end
end

class Puma::Reactor
  def add(client); end

  def initialize(backend, &block); end

  def run(background=T.unsafe(nil)); end

  def shutdown(); end
end

module Puma::Request
  def default_server_port(env); end

  def handle_request(client, requests); end

  def prepare_response(status, headers, res_body, requests, client); end
  BODY_LEN_MAX = ::T.let(nil, ::T.untyped)
  CUSTOM_STAT = ::T.let(nil, ::T.untyped)
  IO_BODY_MAX = ::T.let(nil, ::T.untyped)
  IO_BUFFER_LEN_MAX = ::T.let(nil, ::T.untyped)
  SOCKET_WRITE_ERR_MSG = ::T.let(nil, ::T.untyped)
end

class Puma::Runner
  def app(); end

  def close_control_listeners(); end

  def debug(str); end

  def development?(); end

  def error(str); end

  def initialize(launcher); end

  def load_and_bind(); end

  def log(str); end

  def options(); end

  def output_header(mode); end

  def redirect_io(); end

  def redirected_io?(); end

  def ruby_engine(); end

  def start_control(); end

  def start_server(); end

  def stop_control(); end

  def test?(); end

  def wakeup!(); end
end

class Puma::Server
  def add_ssl_listener(host, port, ctx, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_tcp_listener(host, port, optimize_for_latency=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def add_unix_listener(path, umask=T.unsafe(nil), mode=T.unsafe(nil), backlog=T.unsafe(nil)); end

  def app(); end

  def app=(app); end

  def auto_trim_time(); end

  def backlog(); end

  def begin_restart(sync=T.unsafe(nil)); end

  def binder(); end

  def binder=(binder); end

  def busy_threads(); end

  def client_error(e, client, requests=T.unsafe(nil)); end

  def closed_socket?(socket); end

  def connected_ports(); end

  def cork_socket(socket); end

  def early_hints(); end

  def events(); end

  def first_data_timeout(); end

  def graceful_shutdown(); end

  def halt(sync=T.unsafe(nil)); end

  def handle_check(); end

  def handle_servers(); end

  def inherit_binder(bind); end

  def initialize(app, events=T.unsafe(nil), options=T.unsafe(nil)); end

  def leak_stack_on_error(); end

  def log_writer(); end

  def lowlevel_error(e, env, status=T.unsafe(nil)); end

  def max_threads(); end

  def min_threads(); end

  def options(); end

  def persistent_timeout(); end

  def pool_capacity(); end

  def process_client(client); end

  def reactor_wakeup(client); end

  def reaping_time(); end

  def requests_count(); end

  def run(background=T.unsafe(nil), thread_name: T.unsafe(nil)); end

  def running(); end

  def shutting_down?(); end

  def stats(); end

  def stop(sync=T.unsafe(nil)); end

  def thread(); end

  def uncork_socket(socket); end

  def with_force_shutdown(client, &block); end
  STAT_METHODS = ::T.let(nil, ::T.untyped)
end

class Puma::Server
  def self.current(); end
end

class Puma::Single
  def halt(); end

  def restart(); end

  def run(); end

  def stop(); end

  def stop_blocked(); end
end

class Puma::ThreadPool
  def <<(work); end

  def auto_reap!(timeout=T.unsafe(nil)); end

  def auto_trim!(timeout=T.unsafe(nil)); end

  def backlog(); end

  def busy_threads(); end

  def initialize(name, options=T.unsafe(nil), &block); end

  def pool_capacity(); end

  def reap(); end

  def shutdown(timeout=T.unsafe(nil)); end

  def spawned(); end

  def stats(); end

  def trim(force=T.unsafe(nil)); end

  def trim_requested(); end

  def wait_for_less_busy_worker(delay_s); end

  def wait_until_not_full(); end

  def waiting(); end

  def with_force_shutdown(); end

  def with_mutex(&block); end
  SHUTDOWN_GRACE_TIME = ::T.let(nil, ::T.untyped)
end

class Puma::ThreadPool::Automaton
  def initialize(pool, timeout, thread_name, message); end

  def start!(); end

  def stop(); end
end

class Puma::ThreadPool
  def self.clean_thread_locals(); end
end

class Puma::UserFileDefaultOptions
  def [](key); end

  def []=(key, value); end

  def all_of(key); end

  def default_options(); end

  def fetch(key, default_value=T.unsafe(nil)); end

  def file_options(); end

  def final_options(); end

  def finalize_values(); end

  def initialize(user_options, default_options); end

  def user_options(); end
end

module Puma::Util
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Puma::Util::HeaderHash
  def [](k); end

  def []=(k, v); end

  def delete(k); end

  def has_key?(k); end

  def include?(k); end

  def initialize(hash=T.unsafe(nil)); end

  def key?(k); end

  def member?(k); end

  def merge(other); end

  def merge!(other); end

  def replace(other); end
end

class Puma::Util::HeaderHash
  def self.new(hash=T.unsafe(nil)); end
end

module Puma::Util
  def self.escape(s, encoding=T.unsafe(nil)); end

  def self.parse_query(qs, d=T.unsafe(nil), &unescaper); end

  def self.pipe(); end

  def self.purge_interrupt_queue(); end

  def self.unescape(s, encoding=T.unsafe(nil)); end
end

module RBS
  VERSION = ::T.let(nil, ::T.untyped)
end

class RBS::AST::Annotation
  def ==(other); end

  def eql?(other); end

  def initialize(string:, location:); end

  def location(); end

  def string(); end

  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Comment
  def ==(other); end

  def eql?(other); end

  def initialize(string:, location:); end

  def location(); end

  def string(); end

  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Declarations::AliasDecl
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def initialize(new_name:, old_name:, location:, comment:, annotations: T.unsafe(nil)); end

  def location(); end

  def new_name(); end

  def old_name(); end
end

class RBS::AST::Declarations::Class
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def initialize(name:, type_params:, super_class:, members:, annotations:, location:, comment:); end

  def location(); end

  def members(); end

  def name(); end

  def super_class(); end

  def to_json(state=T.unsafe(nil)); end

  def type_params(); end

  def update(name: T.unsafe(nil), type_params: T.unsafe(nil), super_class: T.unsafe(nil), members: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil)); end
end

class RBS::AST::Declarations::Class::Super
  def ==(other); end

  def args(); end

  def eql?(other); end

  def initialize(name:, args:, location:); end

  def location(); end

  def name(); end

  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Declarations::ClassAlias
  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Declarations::Constant
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def initialize(name:, type:, location:, comment:, annotations: T.unsafe(nil)); end

  def location(); end

  def name(); end

  def to_json(state=T.unsafe(nil)); end

  def type(); end
end

class RBS::AST::Declarations::Global
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def initialize(name:, type:, location:, comment:, annotations: T.unsafe(nil)); end

  def location(); end

  def name(); end

  def to_json(state=T.unsafe(nil)); end

  def type(); end
end

class RBS::AST::Declarations::Interface
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def initialize(name:, type_params:, members:, annotations:, location:, comment:); end

  def location(); end

  def members(); end

  def name(); end

  def to_json(state=T.unsafe(nil)); end

  def type_params(); end

  def update(name: T.unsafe(nil), type_params: T.unsafe(nil), members: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil)); end
end

module RBS::AST::Declarations::MixinHelper
  def each_mixin(&block); end
end

class RBS::AST::Declarations::Module
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def initialize(name:, type_params:, members:, self_types:, annotations:, location:, comment:); end

  def location(); end

  def members(); end

  def name(); end

  def self_types(); end

  def to_json(state=T.unsafe(nil)); end

  def type_params(); end

  def update(name: T.unsafe(nil), type_params: T.unsafe(nil), members: T.unsafe(nil), self_types: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil)); end
end

class RBS::AST::Declarations::Module::Self
  def ==(other); end

  def args(); end

  def eql?(other); end

  def initialize(name:, args:, location:); end

  def location(); end

  def name(); end

  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Declarations::ModuleAlias
  def to_json(state=T.unsafe(nil)); end
end

module RBS::AST::Declarations::NestedDeclarationHelper
  def each_decl(); end

  def each_member(); end
end

class RBS::AST::Declarations::TypeAlias
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def initialize(name:, type_params:, type:, annotations:, location:, comment:); end

  def location(); end

  def name(); end

  def to_json(state=T.unsafe(nil)); end

  def type(); end

  def type_params(); end
end

class RBS::AST::Directives::ResolveTypeNames
  def initialize(value:, location:); end

  def location(); end

  def value(); end
end

class RBS::AST::Directives::Use
  def clauses(); end

  def initialize(clauses:, location:); end

  def location(); end
end

class RBS::AST::Directives::Use::SingleClause
  def initialize(type_name:, new_name:, location:); end

  def location(); end

  def new_name(); end

  def type_name(); end
end

class RBS::AST::Directives::Use::WildcardClause
  def initialize(namespace:, location:); end

  def location(); end

  def namespace(); end
end

class RBS::AST::Members::Alias
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def initialize(new_name:, old_name:, kind:, annotations:, location:, comment:); end

  def instance?(); end

  def kind(); end

  def location(); end

  def new_name(); end

  def old_name(); end

  def singleton?(); end

  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Members::AttrAccessor
  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Members::AttrReader
  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Members::AttrWriter
  def to_json(state=T.unsafe(nil)); end
end

module RBS::AST::Members::Attribute
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def hash(); end

  def initialize(name:, type:, ivar_name:, kind:, annotations:, location:, comment:, visibility: T.unsafe(nil)); end

  def ivar_name(); end

  def kind(); end

  def location(); end

  def name(); end

  def type(); end

  def update(name: T.unsafe(nil), type: T.unsafe(nil), ivar_name: T.unsafe(nil), kind: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil), visibility: T.unsafe(nil)); end

  def visibility(); end
end

class RBS::AST::Members::ClassInstanceVariable
  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Members::ClassVariable
  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Members::Extend
  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Members::Include
  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Members::InstanceVariable
  def to_json(state=T.unsafe(nil)); end
end

module RBS::AST::Members::LocationOnly
  def ==(other); end

  def eql?(other); end

  def hash(); end

  def initialize(location:); end

  def location(); end
end

class RBS::AST::Members::MethodDefinition
  def ==(other); end

  def annotations(); end

  def comment(); end

  def eql?(other); end

  def initialize(name:, kind:, overloads:, annotations:, location:, comment:, overloading:, visibility:); end

  def instance?(); end

  def kind(); end

  def location(); end

  def name(); end

  def overloading(); end

  def overloading?(); end

  def overloads(); end

  def singleton?(); end

  def to_json(state=T.unsafe(nil)); end

  def update(name: T.unsafe(nil), kind: T.unsafe(nil), overloads: T.unsafe(nil), annotations: T.unsafe(nil), location: T.unsafe(nil), comment: T.unsafe(nil), overloading: T.unsafe(nil), visibility: T.unsafe(nil)); end

  def visibility(); end
end

class RBS::AST::Members::MethodDefinition::Overload
  def ==(other); end

  def annotations(); end

  def eql?(other); end

  def initialize(method_type:, annotations:); end

  def method_type(); end

  def sub(subst); end

  def to_json(state=T.unsafe(nil)); end

  def update(annotations: T.unsafe(nil), method_type: T.unsafe(nil)); end
end

module RBS::AST::Members::Mixin
  def ==(other); end

  def annotations(); end

  def args(); end

  def comment(); end

  def eql?(other); end

  def hash(); end

  def initialize(name:, args:, annotations:, location:, comment:); end

  def location(); end

  def name(); end
end

class RBS::AST::Members::Prepend
  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Members::Private
  def to_json(state=T.unsafe(nil)); end
end

class RBS::AST::Members::Public
  def to_json(state=T.unsafe(nil)); end
end

module RBS::AST::Members::Var
  def ==(other); end

  def comment(); end

  def eql?(other); end

  def hash(); end

  def initialize(name:, type:, location:, comment:); end

  def location(); end

  def name(); end

  def type(); end
end

class RBS::AST::TypeParam
  def ==(other); end

  def default_type(); end

  def eql?(other); end

  def initialize(name:, variance:, upper_bound:, location:, default_type: T.unsafe(nil), unchecked: T.unsafe(nil)); end

  def location(); end

  def map_type(&block); end

  def name(); end

  def to_json(state=T.unsafe(nil)); end

  def unchecked!(value=T.unsafe(nil)); end

  def unchecked?(); end

  def upper_bound(); end

  def upper_bound_type(); end

  def variance(); end
end

class RBS::AST::TypeParam
  def self.application(params, args); end

  def self.normalize_args(params, args); end

  def self.rename(params, new_names:); end

  def self.resolve_variables(params); end

  def self.subst_var(vars, type); end

  def self.validate(type_params); end
end

class RBS::AST::Visitor
  def visit(node); end

  def visit_all(nodes); end

  def visit_declaration_class(node); end

  def visit_declaration_constant(node); end

  def visit_declaration_global(node); end

  def visit_declaration_interface(node); end

  def visit_declaration_module(node); end

  def visit_declaration_type_alias(node); end

  def visit_member_alias(node); end

  def visit_member_attr_accessor(node); end

  def visit_member_attr_reader(node); end

  def visit_member_attr_writer(node); end

  def visit_member_class_instance_variable(node); end

  def visit_member_class_variable(node); end

  def visit_member_extend(node); end

  def visit_member_include(node); end

  def visit_member_instance_variable(node); end

  def visit_member_method_definition(node); end

  def visit_member_prepend(node); end

  def visit_member_private(node); end

  def visit_member_public(node); end
end

class RBS::AncestorGraph
  def ancestor_builder(); end

  def build(); end

  def build_ancestors(node, ancestors); end

  def children(); end

  def each_ancestor(node, yielded: T.unsafe(nil), &block); end

  def each_child(node, &block); end

  def each_descendant(node, yielded: T.unsafe(nil), &block); end

  def each_parent(node, &block); end

  def env(); end

  def initialize(env:, ancestor_builder: T.unsafe(nil)); end

  def parents(); end

  def register(parent:, child:); end
end

class RBS::AncestorGraph::InstanceNode
  def type_name(); end

  def type_name=(_); end
end

class RBS::AncestorGraph::InstanceNode
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RBS::AncestorGraph::SingletonNode
  def type_name(); end

  def type_name=(_); end
end

class RBS::AncestorGraph::SingletonNode
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RBS::Buffer
  def content(); end

  def initialize(name:, content:); end

  def last_position(); end

  def lines(); end

  def loc_to_pos(loc); end

  def name(); end

  def pos_to_loc(pos); end

  def ranges(); end
end

module RBS::BuiltinNames
  Array = ::T.let(nil, ::T.untyped)
  BasicObject = ::T.let(nil, ::T.untyped)
  Class = ::T.let(nil, ::T.untyped)
  Comparable = ::T.let(nil, ::T.untyped)
  Enumerable = ::T.let(nil, ::T.untyped)
  Enumerator = ::T.let(nil, ::T.untyped)
  FalseClass = ::T.let(nil, ::T.untyped)
  Float = ::T.let(nil, ::T.untyped)
  Hash = ::T.let(nil, ::T.untyped)
  Integer = ::T.let(nil, ::T.untyped)
  Kernel = ::T.let(nil, ::T.untyped)
  Module = ::T.let(nil, ::T.untyped)
  Numeric = ::T.let(nil, ::T.untyped)
  Object = ::T.let(nil, ::T.untyped)
  Range = ::T.let(nil, ::T.untyped)
  Regexp = ::T.let(nil, ::T.untyped)
  Set = ::T.let(nil, ::T.untyped)
  String = ::T.let(nil, ::T.untyped)
  Symbol = ::T.let(nil, ::T.untyped)
  TrueClass = ::T.let(nil, ::T.untyped)
end

class RBS::BuiltinNames::Name
  def initialize(name:); end

  def instance_type(*args); end

  def instance_type?(type); end

  def name(); end

  def singleton_type(); end

  def singleton_type?(type); end
end

class RBS::BuiltinNames::Name
  def self.define(name, namespace: T.unsafe(nil)); end
end

class RBS::CLI::ColoredIO
  def initialize(stdout:); end

  def puts(*arg, **arg1, &arg2); end

  def puts_green(string); end

  def puts_red(string); end

  def stdout(); end
end

class RBS::ClassInstanceVariableDuplicationError
  def kind(); end
end

class RBS::Collection::Cleaner
  def clean(); end

  def initialize(lockfile_path:); end

  def lock(); end

  def needed?(gem_name, version); end
end

class RBS::Collection::Config
  def config_path(); end

  def data(); end

  def gem(gem_name); end

  def gems(); end

  def initialize(data, config_path:); end

  def repo_path(); end

  def repo_path_data(); end

  def sources(); end
  PATH = ::T.let(nil, ::T.untyped)
end

class RBS::Collection::Config::CollectionNotAvailable
  def initialize(); end
end

class RBS::Collection::Config::Lockfile
  def check_rbs_availability!(); end

  def fullpath(); end

  def gemfile_lock_fullpath(); end

  def gemfile_lock_path(); end

  def gems(); end

  def initialize(lockfile_path:, path:, gemfile_lock_path:); end

  def library_data(lib); end

  def lockfile_dir(); end

  def lockfile_path(); end

  def path(); end

  def sources(); end

  def to_lockfile(); end
end

class RBS::Collection::Config::Lockfile
  def self.from_lockfile(lockfile_path:, data:); end
end

class RBS::Collection::Config::LockfileGenerator
  def config(); end

  def definition(); end

  def existing_lockfile(); end

  def gem_entries(); end

  def gem_hash(); end

  def generate(); end

  def initialize(config:, definition:, with_lockfile:); end

  def lockfile(); end
  ALUMNI_STDLIBS = ::T.let(nil, ::T.untyped)
end

class RBS::Collection::Config::LockfileGenerator::GemfileLockMismatchError
  def initialize(expected:, actual:); end
end

class RBS::Collection::Config::LockfileGenerator
  def self.generate(config:, definition:, with_lockfile: T.unsafe(nil)); end
end

class RBS::Collection::Config
  def self.find_config_path(); end

  def self.from_path(path); end

  def self.generate_lockfile(config_path:, definition:, with_lockfile: T.unsafe(nil)); end

  def self.to_lockfile_path(config_path); end
end

class RBS::Collection::Installer
  def initialize(lockfile_path:, stdout: T.unsafe(nil)); end

  def install_from_lockfile(); end

  def lockfile(); end

  def stdout(); end
end

module RBS::Collection::Sources::Base
  def dependencies_of(name, version); end
end

class RBS::Collection::Sources::Git
  def has?(name, version); end

  def initialize(name:, revision:, remote:, repo_dir:); end

  def install(dest:, name:, version:, stdout:); end

  def load_metadata(dir:); end

  def manifest_of(name, version); end

  def metadata_content(name:, version:); end

  def name(); end

  def remote(); end

  def repo_dir(); end

  def resolved_revision(); end

  def revision(); end

  def to_lockfile(); end

  def versions(name); end

  def write_metadata(dir:, name:, version:); end
  METADATA_FILENAME = ::T.let(nil, ::T.untyped)
end

class RBS::Collection::Sources::Local
  def full_path(); end

  def has?(name, version); end

  def initialize(path:, base_directory:); end

  def install(dest:, name:, version:, stdout:); end

  def manifest_of(name, version); end

  def path(); end

  def to_lockfile(); end

  def versions(name); end
end

class RBS::Collection::Sources::Rubygems
  def has?(name, version); end

  def install(dest:, name:, version:, stdout:); end

  def manifest_of(name, version); end

  def to_lockfile(); end

  def versions(name); end
end

class RBS::Collection::Sources::Stdlib
  def has?(name, version); end

  def install(dest:, name:, version:, stdout:); end

  def manifest_of(name, version); end

  def to_lockfile(); end

  def versions(name); end
  REPO = ::T.let(nil, ::T.untyped)
end

module RBS::Collection::Sources
  def self.from_config_entry(source_entry, base_directory:); end
end

class RBS::Constant
  def ==(other); end

  def entry(); end

  def eql?(other); end

  def initialize(name:, type:, entry:); end

  def name(); end

  def type(); end
end

class RBS::CyclicClassAliasDefinitionError
  def alias_entry(); end

  def initialize(entry); end

  def location(); end
end

class RBS::CyclicTypeParameterBound
  def initialize(type_name:, method_name:, params:, location:); end

  def location(); end

  def method_name(); end

  def params(); end

  def type_name(); end
end

class RBS::Definition
  def ancestors(); end

  def class?(); end

  def class_type?(); end

  def class_variables(); end

  def each_type(&block); end

  def entry(); end

  def initialize(type_name:, entry:, self_type:, ancestors:); end

  def instance_type?(); end

  def interface?(); end

  def interface_type?(); end

  def map_method_type(&block); end

  def methods(); end

  def module?(); end

  def self_type(); end

  def sub(s); end

  def type_name(); end

  def type_params(); end

  def type_params_decl(); end
end

class RBS::Definition::Ancestor::Instance
  def ==(other); end

  def args(); end

  def eql?(other); end

  def initialize(name:, args:, source:); end

  def name(); end

  def source(); end
end

class RBS::Definition::Ancestor::Singleton
  def ==(other); end

  def eql?(other); end

  def initialize(name:); end

  def name(); end
end

class RBS::Definition::InstanceAncestors
  def ancestors(); end

  def apply(args, env:, location:); end

  def initialize(type_name:, params:, ancestors:); end

  def params(); end

  def type_name(); end
end

class RBS::Definition::Method
  def ==(other); end

  def accessibility(); end

  def alias_member(); end

  def alias_of(); end

  def annotations(); end

  def comments(); end

  def defined_in(); end

  def defs(); end

  def eql?(other); end

  def extra_annotations(); end

  def implemented_in(); end

  def initialize(super_method:, defs:, accessibility:, alias_of:, annotations: T.unsafe(nil), alias_member: T.unsafe(nil)); end

  def map_method_type(&block); end

  def map_type(&block); end

  def map_type_bound(&block); end

  def members(); end

  def method_types(); end

  def private?(); end

  def public?(); end

  def sub(s); end

  def super_method(); end

  def update(super_method: T.unsafe(nil), defs: T.unsafe(nil), accessibility: T.unsafe(nil), alias_of: T.unsafe(nil), annotations: T.unsafe(nil), alias_member: T.unsafe(nil)); end
end

class RBS::Definition::Method::TypeDef
  def ==(other); end

  def annotations(); end

  def comment(); end

  def defined_in(); end

  def each_annotation(&block); end

  def eql?(other); end

  def implemented_in(); end

  def initialize(type:, member:, defined_in:, implemented_in:, overload_annotations: T.unsafe(nil)); end

  def member(); end

  def member_annotations(); end

  def overload?(); end

  def overload_annotations(); end

  def type(); end

  def update(type: T.unsafe(nil), member: T.unsafe(nil), defined_in: T.unsafe(nil), implemented_in: T.unsafe(nil)); end
end

class RBS::Definition::SingletonAncestors
  def ancestors(); end

  def initialize(type_name:, ancestors:); end

  def type_name(); end
end

class RBS::Definition::Variable
  def declared_in(); end

  def initialize(parent_variable:, type:, declared_in:, source:); end

  def parent_variable(); end

  def source(); end

  def sub(s); end

  def type(); end
end

class RBS::DefinitionBuilder
  def ancestor_builder(); end

  def build_instance(type_name); end

  def build_interface(type_name); end

  def build_singleton(type_name); end

  def build_singleton0(type_name); end

  def define_instance(definition, type_name, subst, define_class_vars:); end

  def define_interface(definition, type_name, subst); end

  def define_method(methods, definition, method, subst, self_type_methods, defined_in:, implemented_in: T.unsafe(nil)); end

  def ensure_namespace!(namespace, location:); end

  def env(); end

  def expand_alias(type_name); end

  def expand_alias1(type_name); end

  def expand_alias2(type_name, args); end

  def import_methods(definition, module_name, module_methods, interfaces_methods, subst, self_type_methods); end

  def initialize(env:, ancestor_builder: T.unsafe(nil), method_builder: T.unsafe(nil)); end

  def insert_variable(type_name, variables, name:, type:, source:); end

  def instance_cache(); end

  def interface_cache(); end

  def interface_methods(interface_ancestors); end

  def method_builder(); end

  def singleton0_cache(); end

  def singleton_cache(); end

  def source_location(source, decl); end

  def tapp_subst(name, args); end

  def try_cache(type_name, cache:); end

  def update(env:, except:, ancestor_builder:); end

  def validate_params_with(type_params, result:); end

  def validate_type_name(name, location); end

  def validate_type_params(definition, ancestors:, methods:); end

  def validate_type_presence(type); end

  def validate_variable(var); end
end

class RBS::DefinitionBuilder::AncestorBuilder
  def env(); end

  def fill_ancestor_source(ancestor, name:, source:, &block); end

  def initialize(env:); end

  def instance_ancestors(type_name, building_ancestors: T.unsafe(nil)); end

  def instance_ancestors_cache(); end

  def interface_ancestors(type_name, building_ancestors: T.unsafe(nil)); end

  def interface_ancestors_cache(); end

  def mixin_ancestors(entry, type_name, included_modules:, included_interfaces:, extended_modules:, prepended_modules:, extended_interfaces:); end

  def mixin_ancestors0(decl, type_name, align_params:, included_modules:, included_interfaces:, extended_modules:, prepended_modules:, extended_interfaces:); end

  def one_instance_ancestors(type_name); end

  def one_instance_ancestors_cache(); end

  def one_interface_ancestors(type_name); end

  def one_interface_ancestors_cache(); end

  def one_singleton_ancestors(type_name); end

  def one_singleton_ancestors_cache(); end

  def singleton_ancestors(type_name, building_ancestors: T.unsafe(nil)); end

  def singleton_ancestors_cache(); end

  def validate_super_class!(type_name, entry); end
end

class RBS::DefinitionBuilder::AncestorBuilder::OneAncestors
  def each_ancestor(&block); end

  def each_extended_interface(&block); end

  def each_extended_module(&block); end

  def each_included_interface(&block); end

  def each_included_module(&block); end

  def each_prepended_module(&block); end

  def each_self_type(&block); end

  def extended_interfaces(); end

  def extended_modules(); end

  def included_interfaces(); end

  def included_modules(); end

  def initialize(type_name:, params:, super_class:, self_types:, included_modules:, included_interfaces:, prepended_modules:, extended_modules:, extended_interfaces:); end

  def params(); end

  def prepended_modules(); end

  def self_types(); end

  def super_class(); end

  def type_name(); end
end

class RBS::DefinitionBuilder::AncestorBuilder::OneAncestors
  def self.class_instance(type_name:, params:, super_class:); end

  def self.interface(type_name:, params:); end

  def self.module_instance(type_name:, params:); end

  def self.singleton(type_name:, super_class:); end
end

class RBS::DefinitionBuilder::MethodBuilder
  def build_alias(methods, type, member:); end

  def build_attribute(methods, type, member:, accessibility:); end

  def build_instance(type_name); end

  def build_interface(type_name); end

  def build_method(methods, type, member:, accessibility:); end

  def build_singleton(type_name); end

  def each_member_with_accessibility(members, accessibility: T.unsafe(nil)); end

  def env(); end

  def initialize(env:); end

  def instance_methods(); end

  def interface_methods(); end

  def singleton_methods(); end

  def update(env:, except:); end
end

class RBS::DefinitionBuilder::MethodBuilder::Methods
  def each(&blk); end

  def initialize(type:); end

  def methods(); end

  def type(); end

  def validate!(); end
end

class RBS::DefinitionBuilder::MethodBuilder::Methods::Definition
  def accessibility(); end

  def original(); end
end

class RBS::DefinitionBuilder::MethodBuilder::Methods::Definition
  def self.empty(name:, type:); end
end

class RBS::DefinitionBuilder::MethodBuilder::Methods::Sorter
  def initialize(methods); end

  def methods(); end

  def tsort_each_child(defn); end

  def tsort_each_node(&block); end
end

module RBS::DetailedMessageable
  def detailed_message(highlight: T.unsafe(nil), **arg); end
end

class RBS::Diff
  def each_diff(&block); end

  def initialize(type_name:, library_options:, after_path: T.unsafe(nil), before_path: T.unsafe(nil), detail: T.unsafe(nil)); end
end

class RBS::DuplicatedDeclarationError
  def decls(); end

  def initialize(name, *decls); end

  def name(); end
end

class RBS::DuplicatedInterfaceMethodDefinitionError
  def initialize(type:, method_name:, member:); end

  def location(); end

  def member(); end

  def method_name(); end

  def qualified_method_name(); end

  def type(); end

  def type_name(); end
end

class RBS::DuplicatedMethodDefinitionError
  def initialize(type:, method_name:, members:); end

  def location(); end

  def members(); end

  def method_name(); end

  def other_locations(); end

  def qualified_method_name(); end

  def type(); end

  def type_name(); end
end

class RBS::Environment
  def <<(decl); end

  def absolute_type(resolver, map, type, context:); end

  def absolute_type_name(resolver, map, type_name, context:); end

  def add_signature(buffer:, directives:, decls:); end

  def append_context(context, decl); end

  def buffers(); end

  def class_alias?(name); end

  def class_alias_decls(); end

  def class_decl?(name); end

  def class_decls(); end

  def class_entry(type_name); end

  def constant_decl?(name); end

  def constant_decls(); end

  def constant_entry(type_name); end

  def constant_name?(name); end

  def declarations(); end

  def global_decls(); end

  def insert_decl(decl, outer:, namespace:); end

  def interface_decls(); end

  def interface_name?(name); end

  def module_alias?(name); end

  def module_class_entry(type_name); end

  def module_decl?(name); end

  def module_entry(type_name); end

  def module_name?(name); end

  def normalize_module_name(name); end

  def normalize_module_name?(name); end

  def normalize_type_name(name); end

  def normalize_type_name!(name); end

  def normalize_type_name?(name); end

  def normalized_class_entry(type_name); end

  def normalized_module_class_entry(type_name); end

  def normalized_module_entry(type_name); end

  def normalized_type_name!(name); end

  def normalized_type_name?(type_name); end

  def resolve_declaration(resolver, map, decl, outer:, prefix:); end

  def resolve_member(resolver, map, member, context:); end

  def resolve_method_type(resolver, map, type, context:); end

  def resolve_signature(resolver, table, dirs, decls, only: T.unsafe(nil)); end

  def resolve_type_names(only: T.unsafe(nil)); end

  def resolve_type_params(resolver, map, params, context:); end

  def resolver_context(*nesting); end

  def signatures(); end

  def type_alias_decls(); end

  def type_alias_name?(name); end

  def type_name?(name); end

  def unload(buffers); end

  def validate_type_params(); end
end

module RBS::Environment::ContextUtil
  def calculate_context(decls); end
end

class RBS::Environment::ModuleEntry
  def self_types(); end
end

class RBS::Environment::MultiEntry
  def compatible_params?(ps1, ps2); end

  def decls(); end

  def initialize(name:); end

  def insert(decl:, outer:); end

  def name(); end

  def primary(); end

  def type_params(); end

  def validate_type_params(); end
end

class RBS::Environment::MultiEntry::D
  def context(); end

  def decl(); end

  def decl=(_); end

  def outer(); end

  def outer=(_); end
end

class RBS::Environment::MultiEntry::D
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RBS::Environment::SingleEntry
  def context(); end

  def decl(); end

  def initialize(name:, decl:, outer:); end

  def name(); end

  def outer(); end
end

class RBS::Environment::UseMap
  def build_map(clause); end

  def initialize(table:); end

  def resolve(type_name); end

  def resolve?(type_name); end

  def use_dirs(); end
end

class RBS::Environment::UseMap::Table
  def children(); end

  def compute_children(); end

  def known_types(); end
end

class RBS::Environment
  def self.from_loader(loader); end
end

class RBS::EnvironmentLoader
  def add(path: T.unsafe(nil), library: T.unsafe(nil), version: T.unsafe(nil), resolve_dependencies: T.unsafe(nil)); end

  def add_collection(lockfile); end

  def core_root(); end

  def dirs(); end

  def each_dir(); end

  def each_signature(); end

  def has_library?(library:, version:); end

  def initialize(core_root: T.unsafe(nil), repository: T.unsafe(nil)); end

  def libs(); end

  def load(env:); end

  def repository(); end

  def resolve_dependencies(library:, version:); end
  DEFAULT_CORE_ROOT = ::T.let(nil, ::T.untyped)
end

class RBS::EnvironmentLoader::UnknownLibraryError
  def initialize(lib:); end

  def library(); end
end

class RBS::EnvironmentLoader
  def self.gem_sig_path(name, version); end
end

class RBS::EnvironmentWalker
  def builder(); end

  def each_type_name(type, &block); end

  def each_type_node(type, &block); end

  def env(); end

  def initialize(env:); end

  def only_ancestors!(only=T.unsafe(nil)); end

  def only_ancestors?(); end

  def tsort_each_child(node, &block); end

  def tsort_each_node(&block); end
end

class RBS::EnvironmentWalker::InstanceNode
  def type_name(); end

  def type_name=(_); end
end

class RBS::EnvironmentWalker::InstanceNode
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RBS::EnvironmentWalker::SingletonNode
  def type_name(); end

  def type_name=(_); end
end

class RBS::EnvironmentWalker::SingletonNode
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RBS::EnvironmentWalker::TypeNameNode
  def type_name(); end

  def type_name=(_); end
end

class RBS::EnvironmentWalker::TypeNameNode
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RBS::Factory
  def type_name(string); end
end

module RBS::FileFinder
  def self.each_file(path, skip_hidden:, immediate: T.unsafe(nil), &block); end
end

class RBS::GenericParameterMismatchError
  def decl(); end

  def initialize(name:, decl:); end

  def name(); end
end

class RBS::InconsistentClassModuleAliasError
  def alias_entry(); end

  def initialize(entry); end

  def location(); end
end

class RBS::InheritModuleError
  def initialize(super_decl); end

  def location(); end

  def super_decl(); end
end

class RBS::InheritModuleError
  def self.check!(super_decl, env:); end
end

class RBS::InstanceVariableDuplicationError
  def kind(); end
end

class RBS::InvalidOverloadMethodError
  def initialize(type_name:, method_name:, kind:, members:); end

  def kind(); end

  def location(); end

  def members(); end

  def method_name(); end

  def type_name(); end
end

class RBS::InvalidTypeApplicationError
  def args(); end

  def initialize(type_name:, args:, params:, location:); end

  def location(); end

  def params(); end

  def type_name(); end

  def type_params(); end
end

class RBS::InvalidTypeApplicationError
  def self.check!(type_name:, args:, params:, location:); end

  def self.check2!(env:, type_name:, args:, location:); end
end

class RBS::InvalidVarianceAnnotationError
  def initialize(type_name:, param:, location:); end

  def location(); end

  def param(); end

  def type_name(); end
end

class RBS::Location
  def ==(other); end

  def [](arg); end

  def _add_optional_child(arg, arg1, arg2); end

  def _add_optional_no_child(arg); end

  def _add_required_child(arg, arg1, arg2); end

  def _optional_keys(); end

  def _required_keys(); end

  def add_optional_child(name, range); end

  def add_required_child(name, range); end

  def aref(arg); end

  def buffer(); end

  def each_optional_key(&block); end

  def each_required_key(&block); end

  def end_column(); end

  def end_line(); end

  def end_loc(); end

  def end_pos(); end

  def initialize(arg, arg1, arg2); end

  def key?(name); end

  def name(); end

  def optional_key?(name); end

  def range(); end

  def required_key?(name); end

  def source(); end

  def start_column(); end

  def start_line(); end

  def start_loc(); end

  def start_pos(); end

  def to_json(state=T.unsafe(nil)); end
end

RBS::Location::WithChildren = RBS::Location

class RBS::Location
  def self.new(buffer_=T.unsafe(nil), start_pos_=T.unsafe(nil), end_pos_=T.unsafe(nil), buffer: T.unsafe(nil), start_pos: T.unsafe(nil), end_pos: T.unsafe(nil)); end

  def self.to_string(location, default: T.unsafe(nil)); end
end

class RBS::Locator
  def buffer(); end

  def decls(); end

  def dirs(); end

  def find(line:, column:); end

  def find2(line:, column:); end

  def find_in_decl(pos, decl:, array:); end

  def find_in_directive(pos, dir, array); end

  def find_in_loc(pos, location:, array:); end

  def find_in_member(pos, member:, array:); end

  def find_in_method_type(pos, method_type:, array:); end

  def find_in_type(pos, type:, array:); end

  def find_in_type_param(pos, type_param:, array:); end

  def initialize(buffer:, dirs:, decls:); end

  def test_loc(pos, location:); end
end

module RBS::MethodNameHelper
  def method_name_string(); end
end

class RBS::MethodType
  def ==(other); end

  def block(); end

  def each_type(&block); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(type_params:, type:, block:, location:); end

  def location(); end

  def map_type(&block); end

  def map_type_bound(&block); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def type(); end

  def type_param_names(); end

  def type_params(); end

  def update(type_params: T.unsafe(nil), type: T.unsafe(nil), block: T.unsafe(nil), location: T.unsafe(nil)); end

  def with_nonreturn_void?(); end
end

class RBS::MixinClassError
  def initialize(type_name:, member:); end

  def location(); end

  def member(); end

  def type_name(); end
end

class RBS::MixinClassError
  def self.check!(type_name:, env:, member:); end
end

class RBS::Namespace
  def +(other); end

  def ==(other); end

  def absolute!(); end

  def absolute?(); end

  def append(component); end

  def ascend(); end

  def empty?(); end

  def eql?(other); end

  def initialize(path:, absolute:); end

  def parent(); end

  def path(); end

  def relative!(); end

  def relative?(); end

  def split(); end

  def to_type_name(); end
end

class RBS::Namespace
  def self.empty(); end

  def self.parse(string); end

  def self.root(); end
end

class RBS::NoMixinFoundError
  def initialize(type_name:, member:); end

  def location(); end

  def member(); end

  def type_name(); end
end

class RBS::NoMixinFoundError
  def self.check!(type_name, env:, member:); end
end

class RBS::NoSelfTypeFoundError
  def initialize(type_name:, location:); end

  def location(); end

  def type_name(); end
end

class RBS::NoSelfTypeFoundError
  def self.check!(self_type, env:); end
end

class RBS::NoSuperclassFoundError
  def initialize(type_name:, location:); end

  def location(); end

  def type_name(); end
end

class RBS::NoSuperclassFoundError
  def self.check!(type_name, env:, location:); end
end

class RBS::NoTypeFoundError
  def initialize(type_name:, location:); end

  def location(); end

  def type_name(); end
end

class RBS::NoTypeFoundError
  def self.check!(type_name, env:, location:); end
end

class RBS::NonregularTypeAliasError
  def diagnostic(); end

  def initialize(diagnostic:, location:); end

  def location(); end
end

class RBS::Parser
  KEYWORDS = ::T.let(nil, ::T.untyped)
end

class RBS::Parser::LexResult
  def buffer(); end

  def initialize(buffer:, value:); end

  def value(); end
end

class RBS::Parser::Token
  def comment?(); end

  def initialize(type:, location:); end

  def location(); end

  def type(); end

  def value(); end
end

class RBS::Parser
  def self._lex(arg, arg1); end

  def self._parse_method_type(arg, arg1, arg2, arg3, arg4); end

  def self._parse_signature(arg, arg1, arg2); end

  def self._parse_type(arg, arg1, arg2, arg3, arg4); end

  def self.buffer(source); end

  def self.lex(source); end

  def self.magic_comment(buf); end

  def self.parse_method_type(source, range: T.unsafe(nil), variables: T.unsafe(nil), require_eof: T.unsafe(nil)); end

  def self.parse_signature(source); end

  def self.parse_type(source, range: T.unsafe(nil), variables: T.unsafe(nil), require_eof: T.unsafe(nil)); end
end

class RBS::ParsingError
  def error_message(); end

  def initialize(location, error_message, token_type); end

  def location(); end

  def token_type(); end
end

class RBS::Prototype::NodeUsage
  def calculate(node, conditional:); end

  def conditional_nodes(); end

  def each_conditional_node(&block); end

  def initialize(node); end
end

class RBS::Prototype::RB
  def block_type(node); end

  def body_type(node); end

  def const_to_name(node, context:); end

  def const_to_name!(node, context: T.unsafe(nil)); end

  def current_accessibility(decls, index=T.unsafe(nil)); end

  def decls(); end

  def find_def_index_by_name(decls, name); end

  def function_return_type_from_body(node); end

  def function_type_from_body(node, def_name); end

  def if_unless_type(node); end

  def is_accessibility?(decl); end

  def literal_to_symbol(node); end

  def literal_to_type(node); end

  def node_type(node, default: T.unsafe(nil)); end

  def param_type(node, default: T.unsafe(nil)); end

  def parse(string); end

  def private(); end

  def process(node, decls:, comments:, context:); end

  def process_children(node, decls:, comments:, context:); end

  def public(); end

  def range_element_type(types); end

  def remove_unnecessary_accessibility_methods!(decls); end

  def sort_members!(decls); end

  def source_decls(); end

  def toplevel_members(); end

  def types_to_union_type(types); end
end

class RBS::Prototype::RB::Context
  def attribute_kind(); end

  def enter_namespace(namespace); end

  def method_kind(); end

  def update(module_function: T.unsafe(nil), singleton: T.unsafe(nil), in_def: T.unsafe(nil)); end
end

class RBS::Prototype::RB::Context
  def self.initial(namespace: T.unsafe(nil)); end
end

class RBS::Prototype::RBI
  def call_node?(node, name:, receiver: T.unsafe(nil), args: T.unsafe(nil)); end

  def const_to_name(node); end

  def current_module(); end

  def current_module!(); end

  def current_namespace(); end

  def decls(); end

  def each_arg(array, &block); end

  def each_child(node); end

  def join_comments(nodes, comments); end

  def last_sig(); end

  def method_type(args_node, type_node, variables:, overloads:); end

  def modules(); end

  def nested_name(name); end

  def node_to_hash(node); end

  def parse(string); end

  def parse_params(args_node, args, method_type, variables:, overloads:); end

  def pop_sig(); end

  def proc_type?(type_node); end

  def process(node, comments:, outer: T.unsafe(nil)); end

  def push_class(name, super_class, comment:); end

  def push_module(name, comment:); end

  def push_sig(node); end

  def type_of(type_node, variables:); end

  def type_of0(type_node, variables:); end
end

class RBS::Prototype::Runtime
  def block_from_ast_of(method); end

  def builder(); end

  def decls(); end

  def ensure_outer_module_declarations(mod); end

  def env(); end

  def generate_class(mod); end

  def generate_constants(mod, decls); end

  def generate_methods(mod, module_name, members); end

  def generate_mixin(mod, decl, type_name, type_name_absolute); end

  def generate_module(mod); end

  def generate_super_class(mod); end

  def initialize(patterns:, env:, merge:, todo: T.unsafe(nil), owners_included: T.unsafe(nil)); end

  def merge(); end

  def merge_rbs(module_name, members, instance: T.unsafe(nil), singleton: T.unsafe(nil)); end

  def method_type(method); end

  def outline(); end

  def outline=(outline); end

  def owners_included(); end

  def parse(file); end

  def patterns(); end

  def target?(const); end

  def target_method?(mod, instance: T.unsafe(nil), singleton: T.unsafe(nil)); end

  def todo(); end

  def todo_object(); end

  def type_args(type_name); end

  def type_params(mod); end
end

class RBS::Prototype::Runtime::DataGenerator
  def self.generatable?(target); end
end

module RBS::Prototype::Runtime::Reflection
  def self.constants_of(mod, inherit=T.unsafe(nil)); end

  def self.object_class(value); end
end

class RBS::Prototype::Runtime::StructGenerator
  CAN_CALL_KEYWORD_INIT_P = ::T.let(nil, ::T.untyped)
end

class RBS::Prototype::Runtime::StructGenerator
  def self.generatable?(target); end
end

class RBS::Prototype::Runtime::ValueObjectBase
  def build_decl(); end

  def initialize(target_class); end
end

class RBS::RecursiveAliasDefinitionError
  def defs(); end

  def initialize(type:, defs:); end

  def location(); end

  def type(); end
end

class RBS::RecursiveAncestorError
  def ancestors(); end

  def initialize(ancestors:, location:); end

  def location(); end
end

class RBS::RecursiveAncestorError
  def self.check!(self_ancestor, ancestors:, location:); end
end

class RBS::RecursiveTypeAliasError
  def alias_names(); end

  def initialize(alias_names:, location:); end

  def location(); end

  def name(); end
end

class RBS::Repository
  def add(dir); end

  def dirs(); end

  def gems(); end

  def initialize(no_stdlib: T.unsafe(nil)); end

  def lookup(gem, version); end

  def lookup_path(gem, version); end
  DEFAULT_STDLIB_ROOT = ::T.let(nil, ::T.untyped)
end

class RBS::Repository::GemRBS
  def empty?(); end

  def find_best_version(version); end

  def initialize(name:); end

  def latest_version(); end

  def load!(); end

  def name(); end

  def oldest_version(); end

  def paths(); end

  def version_names(); end

  def versions(); end
end

class RBS::Repository::VersionPath
  def gem(); end

  def gem=(_); end

  def path(); end

  def path=(_); end

  def version(); end

  def version=(_); end
end

class RBS::Repository::VersionPath
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RBS::Repository
  def self.default(); end

  def self.find_best_version(version, candidates); end
end

class RBS::Resolver::ConstantResolver
  def builder(); end

  def child_constants_cache(); end

  def children(module_name); end

  def constants(context); end

  def constants_from_ancestors(module_name, constants:); end

  def constants_from_context(context, constants:); end

  def constants_itself(context, constants:); end

  def context_constants_cache(); end

  def initialize(builder:); end

  def load_child_constants(name); end

  def load_context_constants(context); end

  def resolve(name, context:); end

  def resolve_child(module_name, name); end

  def table(); end
end

class RBS::Resolver::ConstantResolver::Table
  def children(name); end

  def children_table(); end

  def constant(name); end

  def constant_of_constant(name, entry); end

  def constant_of_module(name, entry); end

  def constants_table(); end

  def initialize(environment); end

  def toplevel(); end
end

class RBS::Resolver::TypeNameResolver
  def all_names(); end

  def cache(); end

  def env(); end

  def has_name?(full_name); end

  def initialize(env); end

  def partition(type_name); end

  def resolve(type_name, context:); end

  def resolve_in(head, context); end

  def try_cache(query); end
end

class RBS::Substitution
  def +(other); end

  def [](ty); end

  def add(from:, to:); end

  def apply(ty); end

  def empty?(); end

  def instance_type(); end

  def instance_type=(instance_type); end

  def mapping(); end

  def without(*vars); end
end

class RBS::Substitution
  def self.build(variables, types, instance_type: T.unsafe(nil), &block); end
end

class RBS::Subtractor
  def call(minuend=T.unsafe(nil), context: T.unsafe(nil)); end

  def initialize(minuend, subtrahend); end
end

class RBS::SuperclassMismatchError
  def entry(); end

  def initialize(name:, entry:); end

  def name(); end
end

class RBS::TypeAliasDependency
  def build_dependencies(); end

  def circular_definition?(alias_name); end

  def dependencies(); end

  def dependencies_of(name); end

  def direct_dependencies(); end

  def direct_dependencies_of(name); end

  def env(); end

  def initialize(env:); end

  def transitive_closure(); end
end

class RBS::TypeAliasRegularity
  def build_alias_type(name); end

  def builder(); end

  def compatible_args?(args1, args2); end

  def diagnostics(); end

  def each_alias_type(type, &block); end

  def each_mutual_alias_defs(&block); end

  def env(); end

  def initialize(env:); end

  def nonregular?(type_name); end

  def validate(); end

  def validate_alias_type(alias_type, names, types); end
end

class RBS::TypeAliasRegularity::Diagnostic
  def initialize(type_name:, nonregular_type:); end

  def nonregular_type(); end

  def type_name(); end
end

class RBS::TypeAliasRegularity
  def self.validate(env:); end
end

class RBS::TypeName
  def +(other); end

  def ==(other); end

  def absolute!(); end

  def absolute?(); end

  def alias?(); end

  def class?(); end

  def eql?(other); end

  def initialize(namespace:, name:); end

  def interface?(); end

  def kind(); end

  def name(); end

  def namespace(); end

  def relative!(); end

  def split(); end

  def to_json(state=T.unsafe(nil)); end

  def to_namespace(); end

  def with_prefix(namespace); end
end

class RBS::TypeName
  def self.parse(string); end
end

class RBS::TypeParamDefaultReferenceError
  def initialize(type_param, location:); end

  def location(); end

  def type_param(); end
end

class RBS::TypeParamDefaultReferenceError
  def self.check!(type_params); end
end

class RBS::Types::Alias
  def initialize(name:, args:, location:); end

  def location(); end

  def map_type(&block); end

  def map_type_name(&block); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end
end

module RBS::Types::Application
  def ==(other); end

  def args(); end

  def each_type(&block); end

  def eql?(other); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def hash(); end

  def name(); end

  def to_s(level=T.unsafe(nil)); end

  def with_nonreturn_void?(); end
end

class RBS::Types::Bases::Any
  def initialize(location:, todo: T.unsafe(nil)); end
end

class RBS::Types::Bases::Base
  def ==(other); end

  def eql?(other); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(location:); end

  def location(); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def with_nonreturn_void?(); end
end

class RBS::Types::Block
  def ==(other); end

  def initialize(type:, required:, self_type: T.unsafe(nil)); end

  def map_type(&block); end

  def required(); end

  def self_type(); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def type(); end
end

class RBS::Types::ClassInstance
  def initialize(name:, args:, location:); end

  def location(); end

  def map_type(&block); end

  def map_type_name(&block); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end
end

class RBS::Types::ClassSingleton
  def ==(other); end

  def eql?(other); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(name:, location:); end

  def location(); end

  def map_type_name(&arg); end

  def name(); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def with_nonreturn_void?(); end
end

module RBS::Types::EmptyEachType
  def each_type(); end

  def map_type(&block); end
end

class RBS::Types::Function
  def ==(other); end

  def amap(array, &block); end

  def drop_head(); end

  def drop_tail(); end

  def each_param(&block); end

  def each_type(); end

  def empty?(); end

  def eql?(other); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_keyword?(); end

  def has_self_type?(); end

  def hmapv(hash, &block); end

  def initialize(required_positionals:, optional_positionals:, rest_positionals:, trailing_positionals:, required_keywords:, optional_keywords:, rest_keywords:, return_type:); end

  def map_type(&block); end

  def map_type_name(&block); end

  def optional_keywords(); end

  def optional_positionals(); end

  def param_to_s(); end

  def required_keywords(); end

  def required_positionals(); end

  def rest_keywords(); end

  def rest_positionals(); end

  def return_to_s(); end

  def return_type(); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def trailing_positionals(); end

  def update(required_positionals: T.unsafe(nil), optional_positionals: T.unsafe(nil), rest_positionals: T.unsafe(nil), trailing_positionals: T.unsafe(nil), required_keywords: T.unsafe(nil), optional_keywords: T.unsafe(nil), rest_keywords: T.unsafe(nil), return_type: T.unsafe(nil)); end

  def with_nonreturn_void?(); end

  def with_return_type(type); end
end

class RBS::Types::Function::Param
  def ==(other); end

  def eql?(other); end

  def initialize(type:, name:, location: T.unsafe(nil)); end

  def location(); end

  def map_type(&block); end

  def name(); end

  def to_json(state=T.unsafe(nil)); end

  def type(); end
end

class RBS::Types::Function
  def self.empty(return_type); end
end

class RBS::Types::Interface
  def initialize(name:, args:, location:); end

  def location(); end

  def map_type(&block); end

  def map_type_name(&block); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end
end

class RBS::Types::Intersection
  def ==(other); end

  def each_type(&block); end

  def eql?(other); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(types:, location:); end

  def location(); end

  def map_type(&block); end

  def map_type_name(&block); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def types(); end

  def with_nonreturn_void?(); end
end

class RBS::Types::Literal
  def ==(other); end

  def eql?(other); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(literal:, location:); end

  def literal(); end

  def location(); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def with_nonreturn_void?(); end
  TABLE = ::T.let(nil, ::T.untyped)
end

class RBS::Types::Literal
  def self.unescape_string(string, is_double_quote); end
end

module RBS::Types::NoFreeVariables
  def free_variables(set=T.unsafe(nil)); end
end

module RBS::Types::NoSubst
  def sub(s); end
end

module RBS::Types::NoTypeName
  def map_type_name(&arg); end
end

class RBS::Types::Optional
  def ==(other); end

  def each_type(); end

  def eql?(other); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(type:, location:); end

  def location(); end

  def map_type(&block); end

  def map_type_name(&block); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def type(); end

  def with_nonreturn_void?(); end
end

class RBS::Types::Proc
  def ==(other); end

  def block(); end

  def each_type(&block); end

  def eql?(other); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(location:, type:, block:, self_type: T.unsafe(nil)); end

  def location(); end

  def map_type(&block); end

  def map_type_name(&block); end

  def self_type(); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def type(); end

  def with_nonreturn_void?(); end
end

class RBS::Types::Record
  def ==(other); end

  def all_fields(); end

  def each_type(&block); end

  def eql?(other); end

  def fields(); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(location:, all_fields: T.unsafe(nil), fields: T.unsafe(nil)); end

  def location(); end

  def map_type(&block); end

  def map_type_name(&block); end

  def optional_fields(); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def with_nonreturn_void?(); end
end

module RBS::Types::SelfTypeBindingHelper
  def self.self_type_binding_to_s(t); end
end

class RBS::Types::Tuple
  def ==(other); end

  def each_type(&block); end

  def eql?(other); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(types:, location:); end

  def location(); end

  def map_type(&block); end

  def map_type_name(&block); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def types(); end

  def with_nonreturn_void?(); end
end

class RBS::Types::Union
  def ==(other); end

  def each_type(&block); end

  def eql?(other); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(types:, location:); end

  def location(); end

  def map_type(&block); end

  def map_type_name(&block); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def types(); end

  def with_nonreturn_void?(); end
end

class RBS::Types::UntypedFunction
  def ==(other); end

  def each_param(&block); end

  def each_type(&block); end

  def empty?(); end

  def eql?(other); end

  def free_variables(acc=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(return_type:); end

  def map_type(&block); end

  def map_type_name(&block); end

  def param_to_s(); end

  def return_to_s(); end

  def return_type(); end

  def sub(subst); end

  def to_json(state=T.unsafe(nil)); end

  def update(return_type: T.unsafe(nil)); end

  def with_nonreturn_void?(); end

  def with_return_type(ty); end
end

class RBS::Types::Variable
  def ==(other); end

  def eql?(other); end

  def free_variables(set=T.unsafe(nil)); end

  def has_classish_type?(); end

  def has_self_type?(); end

  def initialize(name:, location:); end

  def location(); end

  def name(); end

  def sub(s); end

  def to_json(state=T.unsafe(nil)); end

  def to_s(level=T.unsafe(nil)); end

  def with_nonreturn_void?(); end
end

class RBS::Types::Variable
  def self.build(v); end

  def self.fresh(v=T.unsafe(nil)); end
end

class RBS::UnknownMethodAliasError
  def aliased_name(); end

  def initialize(type_name:, original_name:, aliased_name:, location:); end

  def location(); end

  def original_name(); end

  def type_name(); end
end

class RBS::Validator
  def absolute_type(type, context:, &block); end

  def definition_builder(); end

  def env(); end

  def initialize(env:, resolver: T.unsafe(nil)); end

  def resolver(); end

  def type_alias_dependency(); end

  def type_alias_regularity(); end

  def validate_class_alias(entry:); end

  def validate_method_definition(method_def, type_name:); end

  def validate_type(type, context:); end

  def validate_type_alias(entry:); end

  def validate_type_params(params, type_name:, location:, method_name: T.unsafe(nil)); end

  def validate_variable(var); end
end

class RBS::VariableDuplicationError
  def initialize(type_name:, variable_name:, location:); end

  def location(); end

  def type_name(); end

  def variable_name(); end
end

class RBS::VarianceCalculator
  def builder(); end

  def env(); end

  def function(type, result:, context:); end

  def in_inherit(name:, args:, variables:); end

  def in_method_type(method_type:, variables:); end

  def in_type_alias(name:); end

  def initialize(builder:); end

  def negate(variance); end

  def type(type, result:, context:); end
end

class RBS::VarianceCalculator::Result
  def compatible?(var, with_annotation:); end

  def contravariant(x); end

  def covariant(x); end

  def each(&block); end

  def include?(name); end

  def incompatible?(params); end

  def initialize(variables:); end

  def invariant(x); end

  def result(); end
end

class RBS::Vendorer
  def clean!(); end

  def copy!(); end

  def ensure_dir(); end

  def initialize(vendor_dir:, loader:); end

  def loader(); end

  def vendor_dir(); end
end

class RBS::WillSyntaxError
  def initialize(message, location:); end

  def location(); end
end

class RBS::Writer
  def attribute(kind, attr); end

  def format_annotation(annotation); end

  def indent(size=T.unsafe(nil)); end

  def indentation(); end

  def initialize(out:); end

  def method_name(name); end

  def name_and_args(name, args); end

  def name_and_params(name, params); end

  def out(); end

  def prefix(); end

  def preserve!(preserve: T.unsafe(nil)); end

  def preserve?(); end

  def preserve_empty_line(prev, decl); end

  def put_lines(lines, leading_spaces:); end

  def puts(string=T.unsafe(nil)); end

  def write(contents); end

  def write_annotation(annotations); end

  def write_comment(comment); end

  def write_decl(decl); end

  def write_def(member); end

  def write_loc_source(located); end

  def write_member(member); end

  def write_use_directive(dir); end
end

module RBS
  def self.logger(); end

  def self.logger_level(); end

  def self.logger_level=(level); end

  def self.logger_output(); end

  def self.logger_output=(val); end

  def self.print_warning(); end
end

class RDoc::Alias
  def initialize(text, old_name, new_name, comment, singleton=T.unsafe(nil)); end
end

class RDoc::AnyMethod
  def _call_seq(); end

  def has_call_seq?(); end

  def section_title(); end

  def section_title=(section_title); end

  def skip_description?(); end
end

class RDoc::Attr
  def initialize(text, name, rw, comment, singleton=T.unsafe(nil)); end
end

class RDoc::ClassModule
  def embed_mixins(); end

  def initialize(name, superclass=T.unsafe(nil)); end

  def super_classes(); end
end

class RDoc::CodeObject
  def initialize_visibility(); end

  def mixin_from(); end

  def mixin_from=(mixin_from); end
end

class RDoc::Comment
  def initialize(text=T.unsafe(nil), location=T.unsafe(nil), language=T.unsafe(nil)); end

  def line(); end

  def line=(line); end
end

class RDoc::Comment
  def self.from_document(document); end
end

class RDoc::Constant
  def initialize(name, value, comment); end
end

class RDoc::Context
  def add_module_by_normal_module(mod); end

  def initialize_methods_etc(); end

  def instance_methods(); end
end

class RDoc::Context::Section
  def initialize(parent, title, comment); end
end

class RDoc::CrossReference
  def initialize(context); end

  def resolve_method(name); end
  METHOD_ARGS_REGEXP_STR = ::T.let(nil, ::T.untyped)
  METHOD_ARG_REGEXP_STR = ::T.let(nil, ::T.untyped)
end

class RDoc::ERBIO
  def initialize(str, trim_mode: T.unsafe(nil), eoutvar: T.unsafe(nil)); end
end

module RDoc::Encoding
  HEADER_REGEXP = ::T.let(nil, ::T.untyped)
end

module RDoc::Encoding
  def self.detect_encoding(string); end

  def self.remove_magic_comment(string); end
end

class RDoc::Generator::Darkfish
  include ::ERB::Escape
  include ::ActiveSupport::CoreExt::ERBUtilPrivate
  include ::ActiveSupport::CoreExt::ERBUtil
  def excerpt(comment); end

  def generate_ancestor_list(ancestors, klass); end

  def initialize(store, options); end
end

class RDoc::Generator::JsonIndex
  def initialize(parent_generator, options); end
end

class RDoc::Generator::POT
  def initialize(store, options); end
end

class RDoc::Generator::POT::MessageExtractor
  def initialize(store); end
end

class RDoc::Generator::POT::POEntry
  def initialize(msgid, options=T.unsafe(nil)); end
end

class RDoc::Generator::RI
  def initialize(store, options); end
end

class RDoc::I18n::Locale
  def initialize(name); end
end

class RDoc::Markup::AttrChanger
  def self.keyword_init?(); end
end

class RDoc::Markup::AttrSpan
  def initialize(length, exclusive); end
end

class RDoc::Markup::AttributeManager
  def add_regexp_handling(pattern, name, exclusive=T.unsafe(nil)); end

  def convert_attrs_matching_word_pairs(str, attrs, exclusive); end

  def convert_attrs_word_pair_map(str, attrs, exclusive); end

  def convert_regexp_handlings(str, attrs, exclusive=T.unsafe(nil)); end

  def exclusive?(attr); end

  def exclusive_bitmap(); end

  def regexp_handlings(); end
  NON_PRINTING_END = ::T.let(nil, ::T.untyped)
  NON_PRINTING_START = ::T.let(nil, ::T.untyped)
end

class RDoc::Markup::Attributes
  def regexp_handling(); end
end

class RDoc::Markup::Document
  def initialize(*parts); end
end

class RDoc::Markup::Heading
  def self.keyword_init?(); end
end

class RDoc::Markup::Include
  def initialize(file, include_path); end
end

class RDoc::Markup::IndentedParagraph
  def initialize(indent, *parts); end
end

class RDoc::Markup::List
  def initialize(type=T.unsafe(nil), *items); end
end

class RDoc::Markup::ListItem
  def initialize(label=T.unsafe(nil), *parts); end
end

class RDoc::Markup::Parser::MyStringScanner
  def [](i); end

  def eos?(); end

  def initialize(input); end

  def matched(); end

  def newline!(); end

  def pos(); end

  def scan(re); end

  def unscan(s); end
end

class RDoc::Markup::Parser::MyStringScanner
end

class RDoc::Markup::PreProcess
  def initialize(input_file_name, include_path); end
end

class RDoc::Markup::Raw
  def initialize(*parts); end
end

class RDoc::Markup::RegexpHandling
  def ==(o); end

  def initialize(type, text); end

  def text(); end

  def text=(text); end

  def type(); end
end

class RDoc::Markup::RegexpHandling
end

class RDoc::Markup::Table
  def ==(other); end

  def accept(visitor); end

  def align(); end

  def align=(align); end

  def body(); end

  def body=(body); end

  def header(); end

  def header=(header); end

  def initialize(header, align, body); end
end

class RDoc::Markup::Table
end

class RDoc::Markup::ToHtml
  def accept_table(header, body, aligns); end

  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_HYPERLINK(target); end

  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end

  def init_link_notation_regexp_handlings(); end

  def init_regexp_handlings(); end
  URL_CHARACTERS_REGEXP_STR = ::T.let(nil, ::T.untyped)
end

class RDoc::Markup::ToHtmlCrossref
  def handle_regexp_CROSSREF(target); end

  def initialize(options, from_path, context, markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToHtmlSnippet
  def handle_regexp_CROSSREF(target); end

  def initialize(options, characters=T.unsafe(nil), paragraphs=T.unsafe(nil), markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToLabel
  def handle_regexp_CROSSREF(target); end

  def handle_regexp_HARD_BREAK(*node); end

  def handle_regexp_TIDYLINK(target); end

  def initialize(markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToMarkdown
  def handle_regexp_RDOCLINK(target); end

  def handle_regexp_TIDYLINK(target); end
end

class RDoc::Markup::ToRdoc
  def accept_table(header, body, aligns); end

  def handle_regexp_HARD_BREAK(target); end

  def handle_regexp_SUPPRESSED_CROSSREF(target); end

  def initialize(markup=T.unsafe(nil)); end
end

class RDoc::Markup::ToTableOfContents
  def accept_table(*node); end

  def initialize(); end
end

class RDoc::Markup::ToTtOnly
  def initialize(markup=T.unsafe(nil)); end
end

class RDoc::MethodAttr
  def initialize(text, name); end

  def name_ord_range(); end
end

class RDoc::Mixin
  def initialize(name, comment); end
end

class RDoc::Options
  def apply_default_exclude(); end

  def autolink_excluded_words(); end

  def autolink_excluded_words=(autolink_excluded_words); end

  def embed_mixins(); end

  def embed_mixins=(embed_mixins); end

  def initialize(loaded_options=T.unsafe(nil)); end

  def override(map); end

  def skip_tests(); end

  def skip_tests=(skip_tests); end

  def to_yaml(*options); end

  def warn_missing_rdoc_ref(); end

  def warn_missing_rdoc_ref=(warn_missing_rdoc_ref); end
  DEFAULT_EXCLUDE = ::T.let(nil, ::T.untyped)
end

class RDoc::Options
  def self.load_options(); end
end

class RDoc::Parser
  def handle_tab_width(body); end

  def initialize(top_level, content, options, stats); end
end

class RDoc::Parser::C
  def add_alias(var_name, class_obj, old_name, new_name, comment); end

  def do_classes_and_modules(); end

  def new_comment(text=T.unsafe(nil), location=T.unsafe(nil), language=T.unsafe(nil)); end
  BOOL_ARG_PATTERN = ::T.let(nil, ::T.untyped)
  TRUE_VALUES = ::T.let(nil, ::T.untyped)
end

class RDoc::Parser::ChangeLog
  def parse_date(date); end
end

module RDoc::Parser::ChangeLog::Git
  def create_entries(entries); end

  def parse_entries(); end

  def parse_info(info); end
  HEADING_LEVEL = ::T.let(nil, ::T.untyped)
end

class RDoc::Parser::ChangeLog::Git::LogEntry
  def accept(visitor); end

  def aref(); end

  def author(); end

  def author=(_); end

  def base(); end

  def base=(_); end

  def commit(); end

  def commit=(_); end

  def contents(); end

  def contents=(_); end

  def date(); end

  def date=(_); end

  def email(); end

  def email=(_); end

  def initialize(base, commit, author, email, date, contents); end

  def label(context=T.unsafe(nil)); end

  def level(); end

  def text(); end
end

class RDoc::Parser::ChangeLog::Git::LogEntry
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

module RDoc::Parser::ChangeLog::Git
end

class RDoc::Parser::RBS
  def scan(); end
end

class RDoc::Parser::RBS
end

class RDoc::Parser::RipperStateLex
  def get_squashed_tk(); end

  def initialize(code); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
end

class RDoc::Parser::RipperStateLex::InnerStateLex
  def initialize(code); end

  def on_default(event, tok, data); end
end

class RDoc::Parser::RipperStateLex::InnerStateLex
end

class RDoc::Parser::RipperStateLex::Token
  def char_no(); end

  def char_no=(_); end

  def kind(); end

  def kind=(_); end

  def line_no(); end

  def line_no=(_); end

  def state(); end

  def state=(_); end

  def text(); end

  def text=(_); end
end

class RDoc::Parser::RipperStateLex::Token
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class RDoc::Parser::RipperStateLex
  def self.end?(token); end

  def self.parse(code); end
end

class RDoc::Parser::Ruby
  def get_included_module_with_optional_parens(); end

  def parse_included_with_activesupport_concern(container, comment); end

  def retrieve_comment_body(tk); end

  def skip_parentheses(&block); end
end

module RDoc::Parser::RubyTools
  def skip_tkspace_without_nl(); end
end

class RDoc::RD::BlockParser
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
end

class RDoc::RD::Inline
  def initialize(rdoc, reference); end
end

class RDoc::RD::InlineParser
  def initialize(block_parser); end
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
end

class RDoc::RDoc
  TEST_SUITE_DIRECTORY_NAMES = ::T.let(nil, ::T.untyped)
  UNCONDITIONALLY_SKIPPED_DIRECTORIES = ::T.let(nil, ::T.untyped)
end

class RDoc::RI::Driver
  def expand_rdoc_refs_at_the_bottom(out); end

  def initialize(initial_options=T.unsafe(nil)); end
  RDOC_REFS_REGEXP = ::T.let(nil, ::T.untyped)
end

class RDoc::RI::Driver::NotFoundError
  def initialize(klass, suggestion_proc=T.unsafe(nil)); end
end

RDoc::RI::Store = RDoc::Store

class RDoc::Require
  def initialize(name, comment); end
end

class RDoc::Servlet
  def initialize(server, stores, cache, mount_path=T.unsafe(nil), extra_doc_dirs=T.unsafe(nil)); end
end

class RDoc::Stats
  def initialize(store, num_files, verbosity=T.unsafe(nil)); end
end

class RDoc::Stats::Quiet
  def initialize(num_files); end
end

class RDoc::Store
  def initialize(path=T.unsafe(nil), type=T.unsafe(nil)); end

  def resolve_c_superclasses(); end

  def unmatched_constant_alias(); end

  def update_parser_of_file(absolute_name, parser); end
end

class RDoc::Store::MissingFileError
  def initialize(store, file, name); end
end

class RDoc::Task
  def coverage_task_description(); end

  def inline_source(); end

  def inline_source=(value); end
end

module RDoc::Text
  def language(); end

  def language=(language); end
  SPACE_SEPARATED_LETTER_CLASS = ::T.let(nil, ::T.untyped)
end

class RDoc::TopLevel
  def initialize(absolute_name, relative_name=T.unsafe(nil)); end
end

class REXML::AttlistDecl
  def initialize(source); end
end

class REXML::Attribute
  def initialize(first, second=T.unsafe(nil), parent=T.unsafe(nil)); end
end

class REXML::Attributes
  def initialize(element); end
end

class REXML::CData
  def initialize(first, whitespace=T.unsafe(nil), parent=T.unsafe(nil)); end
end

class REXML::Child
  def initialize(parent=T.unsafe(nil)); end
end

class REXML::Comment
  def initialize(first, second=T.unsafe(nil)); end
end

class REXML::Declaration
  def initialize(src); end
end

class REXML::DocType
  def initialize(first, parent=T.unsafe(nil)); end
end

class REXML::Document
  def entity_expansion_limit=(entity_expansion_limit); end

  def entity_expansion_text_limit(); end

  def entity_expansion_text_limit=(entity_expansion_text_limit); end

  def initialize(source=T.unsafe(nil), context=T.unsafe(nil)); end
end

class REXML::Element
  def initialize(arg=T.unsafe(nil), parent=T.unsafe(nil), context=T.unsafe(nil)); end
end

class REXML::Elements
  def initialize(parent); end

  def parent(); end
end

class REXML::Entity
  def initialize(stream, value=T.unsafe(nil), parent=T.unsafe(nil), reference=T.unsafe(nil)); end
end

class REXML::ExternalEntity
  def initialize(src); end
end

class REXML::Formatters::Default
  def initialize(ie_hack=T.unsafe(nil)); end
end

class REXML::Formatters::Pretty
  def initialize(indentation=T.unsafe(nil), ie_hack=T.unsafe(nil)); end
end

class REXML::IOSource
  def initialize(arg, block_size=T.unsafe(nil), encoding=T.unsafe(nil)); end
end

class REXML::Instruction
  def initialize(target, content=T.unsafe(nil)); end
end

module REXML::Namespace
  NAME_WITHOUT_NAMESPACE = ::T.let(nil, ::T.untyped)
end

class REXML::NotationDecl
  def initialize(name, middle, pub, sys); end
end

class REXML::Output
  def initialize(real_IO, encd=T.unsafe(nil)); end
end

class REXML::ParseException
  def initialize(message, source=T.unsafe(nil), parser=T.unsafe(nil), exception=T.unsafe(nil)); end
end

class REXML::Parsers::BaseParser
  def entity_expansion_count(); end

  def entity_expansion_limit=(entity_expansion_limit); end

  def entity_expansion_text_limit=(entity_expansion_text_limit); end

  def initialize(source); end

  def reset(); end
  EXTERNAL_ID_PUBLIC = ::T.let(nil, ::T.untyped)
  EXTERNAL_ID_SYSTEM = ::T.let(nil, ::T.untyped)
  PUBLIC_ID = ::T.let(nil, ::T.untyped)
  QNAME = ::T.let(nil, ::T.untyped)
  QNAME_STR = ::T.let(nil, ::T.untyped)
end

class REXML::Parsers::StreamParser
  def entity_expansion_count(); end

  def entity_expansion_limit=(limit); end

  def entity_expansion_text_limit=(limit); end

  def initialize(source, listener); end
end

class REXML::Parsers::TreeParser
  def initialize(source, build_context=T.unsafe(nil)); end
end

class REXML::Parsers::XPathParser
  def preciate_to_string(parsed, &block); end

  def predicate_to_path(parsed, &block); end
  LOCAL_NAME_WILDCARD = ::T.let(nil, ::T.untyped)
  PREFIX_WILDCARD = ::T.let(nil, ::T.untyped)
end

class REXML::ReferenceWriter
  def initialize(id_type, public_id_literal, system_literal, context=T.unsafe(nil)); end

  def write(output); end
end

class REXML::Source
  def buffer_encoding=(encoding); end

  def drop_parsed_content(); end

  def ensure_buffer(); end

  def initialize(arg, encoding=T.unsafe(nil)); end

  def match?(pattern, cons=T.unsafe(nil)); end

  def peek_byte(); end

  def position=(pos); end

  def read_until(term); end

  def scan_byte(); end
end

class REXML::Text
  def initialize(arg, respect_whitespace=T.unsafe(nil), parent=T.unsafe(nil), raw=T.unsafe(nil), entity_filter=T.unsafe(nil), illegal=T.unsafe(nil)); end
end

class REXML::UndefinedNamespaceException
  def initialize(prefix, source, parser); end
end

class REXML::Validation::ValidationException
  def initialize(msg); end
end

class REXML::XMLDecl
  def initialize(version=T.unsafe(nil), encoding=T.unsafe(nil), standalone=T.unsafe(nil)); end
end

class REXML::XPathNode
  def context(); end

  def initialize(node, context=T.unsafe(nil)); end

  def position(); end

  def raw_node(); end
end

class REXML::XPathParser
  def initialize(strict: T.unsafe(nil)); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

module Raabro
  VERSION = ::T.let(nil, ::T.untyped)
end

module Racc
  Copyright = ::T.let(nil, ::T.untyped)
  Racc_No_Extensions = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Racc::CparseParams
end

class Racc::CparseParams
end

class Racc::Parser
  Racc_Main_Parsing_Routine = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Id_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Type = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Version = ::T.let(nil, ::T.untyped)
  Racc_YY_Parse_Method = ::T.let(nil, ::T.untyped)
end

module Rack
  CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  CONTENT_LENGTH = ::T.let(nil, ::T.untyped)
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DELETE = ::T.let(nil, ::T.untyped)
  ETAG = ::T.let(nil, ::T.untyped)
  EXPIRES = ::T.let(nil, ::T.untyped)
  GET = ::T.let(nil, ::T.untyped)
  HEAD = ::T.let(nil, ::T.untyped)
  HTTPS = ::T.let(nil, ::T.untyped)
  HTTP_COOKIE = ::T.let(nil, ::T.untyped)
  HTTP_HOST = ::T.let(nil, ::T.untyped)
  HTTP_PORT = ::T.let(nil, ::T.untyped)
  HTTP_VERSION = ::T.let(nil, ::T.untyped)
  LINK = ::T.let(nil, ::T.untyped)
  OPTIONS = ::T.let(nil, ::T.untyped)
  PATCH = ::T.let(nil, ::T.untyped)
  PATH_INFO = ::T.let(nil, ::T.untyped)
  POST = ::T.let(nil, ::T.untyped)
  PUT = ::T.let(nil, ::T.untyped)
  QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_ERRORS = ::T.let(nil, ::T.untyped)
  RACK_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_HIJACK_IO = ::T.let(nil, ::T.untyped)
  RACK_INPUT = ::T.let(nil, ::T.untyped)
  RACK_IS_HIJACK = ::T.let(nil, ::T.untyped)
  RACK_LOGGER = ::T.let(nil, ::T.untyped)
  RACK_METHODOVERRIDE_ORIGINAL_METHOD = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  RACK_MULTIPART_TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  RACK_MULTIPROCESS = ::T.let(nil, ::T.untyped)
  RACK_MULTITHREAD = ::T.let(nil, ::T.untyped)
  RACK_RECURSIVE_INCLUDE = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_COOKIE_STRING = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_INPUT = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_FORM_VARS = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_HASH = ::T.let(nil, ::T.untyped)
  RACK_REQUEST_QUERY_STRING = ::T.let(nil, ::T.untyped)
  RACK_RUNONCE = ::T.let(nil, ::T.untyped)
  RACK_SESSION = ::T.let(nil, ::T.untyped)
  RACK_SESSION_OPTIONS = ::T.let(nil, ::T.untyped)
  RACK_SESSION_UNPACKED_COOKIE_DATA = ::T.let(nil, ::T.untyped)
  RACK_SHOWSTATUS_DETAIL = ::T.let(nil, ::T.untyped)
  RACK_TEMPFILES = ::T.let(nil, ::T.untyped)
  RACK_URL_SCHEME = ::T.let(nil, ::T.untyped)
  RACK_VERSION = ::T.let(nil, ::T.untyped)
  RELEASE = ::T.let(nil, ::T.untyped)
  REQUEST_METHOD = ::T.let(nil, ::T.untyped)
  REQUEST_PATH = ::T.let(nil, ::T.untyped)
  SCRIPT_NAME = ::T.let(nil, ::T.untyped)
  SERVER_NAME = ::T.let(nil, ::T.untyped)
  SERVER_PORT = ::T.let(nil, ::T.untyped)
  SERVER_PROTOCOL = ::T.let(nil, ::T.untyped)
  SET_COOKIE = ::T.let(nil, ::T.untyped)
  TRACE = ::T.let(nil, ::T.untyped)
  TRANSFER_ENCODING = ::T.let(nil, ::T.untyped)
  UNLINK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::AbstractHandler
  def initialize(app, realm=T.unsafe(nil), &authenticator); end

  def realm(); end

  def realm=(realm); end
end

class Rack::Auth::AbstractRequest
  def initialize(env); end

  def params(); end

  def parts(); end

  def provided?(); end

  def request(); end

  def scheme(); end

  def valid?(); end
  AUTHORIZATION_KEYS = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Basic
  def call(env); end
end

class Rack::Auth::Basic::Request
  def basic?(); end

  def credentials(); end

  def username(); end
end

class Rack::Auth::Digest::MD5
  def call(env); end

  def initialize(app, realm=T.unsafe(nil), opaque=T.unsafe(nil), &authenticator); end

  def opaque(); end

  def opaque=(opaque); end

  def passwords_hashed=(passwords_hashed); end

  def passwords_hashed?(); end
  QOP = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::Nonce
  def digest(); end

  def fresh?(); end

  def initialize(timestamp=T.unsafe(nil), given_digest=T.unsafe(nil)); end

  def stale?(); end

  def valid?(); end
end

class Rack::Auth::Digest::Nonce
  def self.parse(string); end

  def self.private_key(); end

  def self.private_key=(private_key); end

  def self.time_limit(); end

  def self.time_limit=(time_limit); end
end

class Rack::Auth::Digest::Params
  def [](k); end

  def []=(k, v); end

  def initialize(); end

  def quote(str); end
  UNQUOTED = ::T.let(nil, ::T.untyped)
end

class Rack::Auth::Digest::Params
  def self.dequote(str); end

  def self.parse(str); end

  def self.split_header_value(str); end
end

class Rack::Auth::Digest::Request
  def correct_uri?(); end

  def digest?(); end

  def method(); end

  def method_missing(sym, *args); end

  def nonce(); end

  def respond_to?(sym, *arg); end
end

class Rack::Builder
  def call(env); end

  def freeze_app(); end

  def initialize(default_app=T.unsafe(nil), &block); end

  def map(path, &block); end

  def run(app); end

  def to_app(); end

  def use(middleware, *args, **arg, &block); end

  def warmup(prc=T.unsafe(nil), &block); end
  UTF_8_BOM = ::T.let(nil, ::T.untyped)
end

class Rack::Builder
  def self.app(default_app=T.unsafe(nil), &block); end

  def self.load_file(path, opts=T.unsafe(nil)); end

  def self.new_from_string(builder_script, file=T.unsafe(nil)); end

  def self.parse_file(config, opts=T.unsafe(nil)); end
end

class Rack::Cascade
  def <<(app); end

  def add(app); end

  def apps(); end

  def call(env); end

  def include?(app); end

  def initialize(apps, cascade_for=T.unsafe(nil)); end
  NotFound = ::T.let(nil, ::T.untyped)
end

class Rack::Chunked
  def call(env); end

  def chunkable_version?(ver); end

  def initialize(app); end
end

class Rack::Chunked::Body
  def close(); end

  def each(&block); end

  def initialize(body); end
  TAIL = ::T.let(nil, ::T.untyped)
  TERM = ::T.let(nil, ::T.untyped)
end

class Rack::CommonLogger
  def call(env); end

  def initialize(app, logger=T.unsafe(nil)); end
  FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::Config
  def call(env); end

  def initialize(app, &block); end
end

class Rack::ContentLength
  def call(env); end

  def initialize(app); end
end

class Rack::ContentType
  def call(env); end

  def initialize(app, content_type=T.unsafe(nil)); end
end

class Rack::Deflater
  def call(env); end

  def initialize(app, options=T.unsafe(nil)); end
end

class Rack::Deflater::GzipStream
  def close(); end

  def each(&block); end

  def initialize(body, mtime, sync); end

  def write(data); end
end

class Rack::Directory
  def call(env); end

  def check_bad_request(path_info); end

  def check_forbidden(path_info); end

  def entity_not_found(path_info); end

  def filesize_format(int); end

  def get(env); end

  def initialize(root, app=T.unsafe(nil)); end

  def list_directory(path_info, path, script_name); end

  def list_path(env, path, path_info, script_name); end

  def root(); end

  def stat(path); end
  DIR_FILE = ::T.let(nil, ::T.untyped)
  DIR_PAGE_FOOTER = ::T.let(nil, ::T.untyped)
  DIR_PAGE_HEADER = ::T.let(nil, ::T.untyped)
  FILESIZE_FORMAT = ::T.let(nil, ::T.untyped)
end

class Rack::ETag
  DEFAULT_CACHE_CONTROL = ::T.let(nil, ::T.untyped)
  ETAG_STRING = ::T.let(nil, ::T.untyped)
end

class Rack::Events
  def call(env); end

  def initialize(app, handlers); end
end

module Rack::Events::Abstract
  def on_commit(req, res); end

  def on_error(req, res, e); end

  def on_finish(req, res); end

  def on_send(req, res); end

  def on_start(req, res); end
end

class Rack::Events::BufferedResponse
  def body(); end

  def initialize(status, headers, body); end

  def to_a(); end
end

class Rack::Events::EventedBodyProxy
  def each(&blk); end

  def initialize(body, request, response, handlers, &block); end

  def request(); end

  def response(); end
end

Rack::File = Rack::Files

class Rack::Files
  ALLOWED_VERBS = ::T.let(nil, ::T.untyped)
  ALLOW_HEADER = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
end

class Rack::ForwardRequest
  def env(); end

  def initialize(url, env=T.unsafe(nil)); end

  def url(); end
end

class Rack::Handler::CGI
  def self.run(app, **options); end

  def self.send_body(body); end

  def self.send_headers(status, headers); end

  def self.serve(app); end
end

class Rack::Handler::WEBrick
  def initialize(server, app); end
end

class Rack::Handler::WEBrick
  def self.run(app, **options); end

  def self.shutdown(); end

  def self.valid_options(); end
end

module Rack::Handler
  def self.default(); end

  def self.get(server); end

  def self.pick(server_names); end

  def self.register(server, klass); end

  def self.try_require(prefix, const_name); end
end

class Rack::Lint
  def _call(env); end

  def call(env=T.unsafe(nil)); end

  def check_content_length(status, headers); end

  def check_content_type(status, headers); end

  def check_env(env); end

  def check_error(error); end

  def check_headers(header); end

  def check_hijack(env); end

  def check_hijack_response(headers, env); end

  def check_input(input); end

  def check_status(status); end

  def close(); end

  def each(&blk); end

  def initialize(app); end

  def verify_content_length(bytes); end
end

module Rack::Lint::Assertion
  def assert(message); end
end

class Rack::Lint::ErrorWrapper
  def close(*args); end

  def flush(); end

  def initialize(error); end

  def puts(str); end

  def write(str); end
end

class Rack::Lint::HijackWrapper
  def close(*args, **arg, &block); end

  def close_read(*args, **arg, &block); end

  def close_write(*args, **arg, &block); end

  def closed?(*args, **arg, &block); end

  def flush(*args, **arg, &block); end

  def initialize(io); end

  def read(*args, **arg, &block); end

  def read_nonblock(*args, **arg, &block); end

  def write(*args, **arg, &block); end

  def write_nonblock(*args, **arg, &block); end
  REQUIRED_METHODS = ::T.let(nil, ::T.untyped)
end

class Rack::Lint::InputWrapper
  def close(*args); end

  def each(*args, &blk); end

  def gets(*args); end

  def initialize(input); end

  def read(*args); end

  def rewind(*args); end
end

class Rack::Lock
  def call(env); end

  def initialize(app, mutex=T.unsafe(nil)); end
end

class Rack::Logger
  def call(env); end

  def initialize(app, level=T.unsafe(nil)); end
end

class Rack::MediaType
  SPLIT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Rack::MediaType
  def self.params(content_type); end

  def self.type(content_type); end
end

class Rack::MethodOverride
  ALLOWED_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHODS = ::T.let(nil, ::T.untyped)
  HTTP_METHOD_OVERRIDE_HEADER = ::T.let(nil, ::T.untyped)
  METHOD_OVERRIDE_PARAM_KEY = ::T.let(nil, ::T.untyped)
end

module Rack::Mime
  MIME_TYPES = ::T.let(nil, ::T.untyped)
end

module Rack::Mime
  def self.match?(value, matcher); end

  def self.mime_type(ext, fallback=T.unsafe(nil)); end
end

class Rack::MockRequest
  DEFAULT_ENV = ::T.let(nil, ::T.untyped)
end

Rack::MockSession = Rack::Test::Session

module Rack::Multipart
  ATTRIBUTE = ::T.let(nil, ::T.untyped)
  ATTRIBUTE_CHAR = ::T.let(nil, ::T.untyped)
  BROKEN = ::T.let(nil, ::T.untyped)
  CONDISP = ::T.let(nil, ::T.untyped)
  DISPPARM = ::T.let(nil, ::T.untyped)
  EOL = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_INITIAL_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_NAME = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_PARAMETER = ::T.let(nil, ::T.untyped)
  EXTENDED_OTHER_VALUE = ::T.let(nil, ::T.untyped)
  EXTENDED_PARAMETER = ::T.let(nil, ::T.untyped)
  MULTIPART = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_DISPOSITION = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_ID = ::T.let(nil, ::T.untyped)
  MULTIPART_CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER = ::T.let(nil, ::T.untyped)
  REGULAR_PARAMETER_NAME = ::T.let(nil, ::T.untyped)
  RFC2183 = ::T.let(nil, ::T.untyped)
  SECTION = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
  VALUE = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Generator
  def dump(); end

  def initialize(params, first=T.unsafe(nil)); end
end

class Rack::Multipart::Generator
end

class Rack::Multipart::Parser
  def initialize(boundary, tempfile, bufsize, query_parser); end

  def on_read(content); end

  def result(); end

  def state(); end
  BOUNDARY_REGEX = ::T.let(nil, ::T.untyped)
  BUFSIZE = ::T.let(nil, ::T.untyped)
  CHARSET = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  TEMPFILE_FACTORY = ::T.let(nil, ::T.untyped)
  TEXT_PLAIN = ::T.let(nil, ::T.untyped)
end

class Rack::Multipart::Parser::BoundedIO
  def initialize(io, content_length); end

  def read(size, outbuf=T.unsafe(nil)); end

  def rewind(); end
end

class Rack::Multipart::Parser::Collector
  def each(&blk); end

  def initialize(tempfile); end

  def on_mime_body(mime_index, content); end

  def on_mime_finish(mime_index); end

  def on_mime_head(mime_index, head, filename, content_type, name); end
end

class Rack::Multipart::Parser::Collector::BufferPart
  def close(); end

  def file?(); end
end

class Rack::Multipart::Parser::Collector::MimePart
  def get_data(); end
end

class Rack::Multipart::Parser::Collector::TempfilePart
  def close(); end

  def file?(); end
end

class Rack::Multipart::Parser::MultipartInfo
  def params(); end

  def params=(_); end

  def tmp_files(); end

  def tmp_files=(_); end
end

class Rack::Multipart::Parser::MultipartInfo
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end
end

class Rack::Multipart::Parser
  def self.parse(io, content_length, content_type, tmpfile, bufsize, qp); end

  def self.parse_boundary(content_type); end
end

class Rack::Multipart::UploadedFile
  def content_type(); end

  def content_type=(content_type); end

  def initialize(filepath=T.unsafe(nil), ct=T.unsafe(nil), bin=T.unsafe(nil), path: T.unsafe(nil), content_type: T.unsafe(nil), binary: T.unsafe(nil), filename: T.unsafe(nil), io: T.unsafe(nil)); end

  def local_path(); end

  def method_missing(method_name, *args, &block); end

  def original_filename(); end

  def path(); end

  def respond_to?(*args); end
end

class Rack::Multipart::UploadedFile
end

module Rack::Multipart
  def self.build_multipart(params, first=T.unsafe(nil)); end

  def self.extract_multipart(req, params=T.unsafe(nil)); end

  def self.parse_multipart(env, params=T.unsafe(nil)); end
end

class Rack::NullLogger
  def <<(msg); end

  def add(severity, message=T.unsafe(nil), progname=T.unsafe(nil), &block); end

  def call(env); end

  def close(); end

  def datetime_format(); end

  def datetime_format=(datetime_format); end

  def debug(progname=T.unsafe(nil), &block); end

  def error(progname=T.unsafe(nil), &block); end

  def error?(); end

  def fatal(progname=T.unsafe(nil), &block); end

  def fatal?(); end

  def formatter(); end

  def formatter=(formatter); end

  def info(progname=T.unsafe(nil), &block); end

  def info?(); end

  def initialize(app); end

  def level(); end

  def level=(level); end

  def progname(); end

  def progname=(progname); end

  def sev_threshold(); end

  def sev_threshold=(sev_threshold); end

  def unknown(progname=T.unsafe(nil), &block); end

  def warn(progname=T.unsafe(nil), &block); end

  def warn?(); end
end

class Rack::QueryParser
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
end

class Rack::Recursive
  def _call(env); end

  def call(env); end

  def include(env, path); end

  def initialize(app); end
end

class Rack::Reloader
  def call(env); end

  def initialize(app, cooldown=T.unsafe(nil), backend=T.unsafe(nil)); end

  def reload!(stderr=T.unsafe(nil)); end

  def safe_load(file, mtime, stderr=T.unsafe(nil)); end
end

module Rack::Reloader::Stat
  def figure_path(file, paths); end

  def rotation(); end

  def safe_stat(file); end
end

class Rack::Request
  ALLOWED_SCHEMES = ::T.let(nil, ::T.untyped)
  SCHEME_WHITELIST = ::T.let(nil, ::T.untyped)
end

module Rack::Request::Helpers
  DEFAULT_PORTS = ::T.let(nil, ::T.untyped)
  FORM_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_FOR = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_HOST = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PORT = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_PROTO = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SCHEME = ::T.let(nil, ::T.untyped)
  HTTP_X_FORWARDED_SSL = ::T.let(nil, ::T.untyped)
  PARSEABLE_DATA_MEDIA_TYPES = ::T.let(nil, ::T.untyped)
end

class Rack::Response
  CHUNKED = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
end

class Rack::RewindableInput
  def close(); end

  def each(&block); end

  def gets(); end

  def initialize(io); end

  def read(*args); end

  def rewind(); end
end

class Rack::Runtime
  FORMAT_STRING = ::T.let(nil, ::T.untyped)
  HEADER_NAME = ::T.let(nil, ::T.untyped)
end

class Rack::Server
  def app(); end

  def default_options(); end

  def initialize(options=T.unsafe(nil)); end

  def middleware(); end

  def options(); end

  def options=(options); end

  def server(); end

  def start(&block); end
end

class Rack::Server::Options
  def handler_opts(options); end

  def parse!(args); end
end

class Rack::Server
  def self.default_middleware_by_environment(); end

  def self.logging_middleware(); end

  def self.middleware(); end

  def self.start(options=T.unsafe(nil)); end
end

class Rack::Session::Abstract::Persisted
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Abstract::SessionHash
  Unspecified = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Cookie::SessionId
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Rack::Session::Dalli
  def data(); end

  def delete_session(_req, sid, options); end

  def find_session(_req, sid); end

  def write_session(_req, sid, session, options); end
  DEFAULT_DALLI_OPTIONS = ::T.let(nil, ::T.untyped)
end

Rack::Session::Memcache = Rack::Session::Dalli

class Rack::Session::Pool
  def delete_session(req, session_id, options); end

  def find_session(req, sid); end

  def generate_sid(); end

  def mutex(); end

  def pool(); end

  def with_lock(req); end

  def write_session(req, session_id, new_session, options); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Rack::Session::SessionId
  ID_VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::ShowExceptions
  def call(env); end

  def dump_exception(exception); end

  def h(obj); end

  def initialize(app); end

  def prefers_plaintext?(env); end

  def pretty(env, exception); end

  def template(); end
  CONTEXT = ::T.let(nil, ::T.untyped)
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::ShowStatus
  def call(env); end

  def h(obj); end

  def initialize(app); end
  TEMPLATE = ::T.let(nil, ::T.untyped)
end

class Rack::Static
  def add_index_root?(path); end

  def applicable_rules(path); end

  def call(env); end

  def can_serve(path); end

  def initialize(app, options=T.unsafe(nil)); end

  def overwrite_file_path(path); end

  def route_file(path); end
end

module Rack::Test
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  END_BOUNDARY = ::T.let(nil, ::T.untyped)
  MULTIPART_BOUNDARY = ::T.let(nil, ::T.untyped)
  START_BOUNDARY = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rack::Test::CookieJar
  DELIMITER = ::T.let(nil, ::T.untyped)
end

class Rack::URLMap
  def call(env); end

  def initialize(map=T.unsafe(nil)); end

  def remap(map); end
end

module Rack::Utils
  COMMON_SEP = ::T.let(nil, ::T.untyped)
  DEFAULT_SEP = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML = ::T.let(nil, ::T.untyped)
  ESCAPE_HTML_PATTERN = ::T.let(nil, ::T.untyped)
  HTTP_STATUS_CODES = ::T.let(nil, ::T.untyped)
  NULL_BYTE = ::T.let(nil, ::T.untyped)
  PATH_SEPS = ::T.let(nil, ::T.untyped)
  RFC2396_PARSER = ::T.let(nil, ::T.untyped)
  RFC2822_DAY_NAME = ::T.let(nil, ::T.untyped)
  RFC2822_MONTH_NAME = ::T.let(nil, ::T.untyped)
  STATUS_WITH_NO_ENTITY_BODY = ::T.let(nil, ::T.untyped)
  SYMBOL_TO_STATUS_CODE = ::T.let(nil, ::T.untyped)
end

Rack::Utils::InvalidParameterError = Rack::QueryParser::InvalidParameterError

Rack::Utils::KeySpaceConstrainedParams = Rack::QueryParser::Params

Rack::Utils::ParameterTypeError = Rack::QueryParser::ParameterTypeError

class Ractor::ClosedError
end

class Ractor::ClosedError
end

class Ractor::Error
end

class Ractor::Error
end

class Ractor::IsolationError
end

class Ractor::IsolationError
end

class Ractor::MovedError
end

class Ractor::MovedError
end

class Ractor::MovedObject
  def !(*arg); end

  def !=(*arg); end

  def ==(*arg); end

  def __id__(*arg); end

  def equal?(*arg); end
end

class Ractor::MovedObject
end

class Ractor::RemoteError
  def ractor(); end
end

class Ractor::RemoteError
end

class Ractor::UnsafeError
end

class Ractor::UnsafeError
end

class Ractor
  def self.[](sym); end

  def self.[]=(sym, val); end

  def self._require(feature); end

  def self.main?(); end

  def self.new(*args, name: T.unsafe(nil), &block); end

  def self.store_if_absent(sym); end
end

module RactorLocalSingleton
  extend ::Singleton::SingletonClassProperties
  def self.module_with_class_methods(); end
end

class Rails::ApplicationController
end

module Rails::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::Turbo::Streams::ActionHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Importmap::ImportmapTagsHelper
  include ::ApplicationHelper
end

module Rails::ApplicationController::HelperMethods
end

class Rails::ApplicationController
end

class Rails::BacktraceCleaner
  APP_DIRS_PATTERN = ::T.let(nil, ::T.untyped)
  RENDER_TEMPLATE_PATTERN = ::T.let(nil, ::T.untyped)
end

module Rails::Command
  VERSION_MAPPINGS = ::T.let(nil, ::T.untyped)
end

module Rails::Command::Actions
  def boot_application!(); end

  def load_environment_config!(); end

  def load_generators(); end

  def load_tasks(); end

  def require_application!(); end

  def set_application_directory!(); end
end

module Rails::Command::Actions
end

class Rails::Command::Base
  include ::Rails::Command::Actions
  def current_subcommand(); end

  def executable(*arg, **arg1, &arg2); end

  def invoke_command(command, *arg); end
end

class Rails::Command::Base::Error
end

class Rails::Command::Base::Error
end

class Rails::Command::Base
  def self.banner(command=T.unsafe(nil), *arg); end

  def self.base_name(); end

  def self.bin(); end

  def self.bin=(value); end

  def self.bin?(); end

  def self.class_usage(); end

  def self.command_name(); end

  def self.default_command_root(); end

  def self.desc(usage=T.unsafe(nil), description=T.unsafe(nil), options=T.unsafe(nil)); end

  def self.engine?(); end

  def self.executable(command_name=T.unsafe(nil)); end

  def self.help(shell, *arg); end

  def self.hide_command!(); end

  def self.inherited(base); end

  def self.perform(command, args, config); end

  def self.printing_commands(); end

  def self.usage_path(); end
end

module Rails::Command::Behavior::ClassMethods
  def no_color!(); end

  def subclasses(); end
end

class Rails::Command::CorrectableNameError
  def initialize(message, name, alternatives); end

  def name(); end
end

class Rails::Command::UnrecognizedCommandError
  def initialize(name); end
end

module Rails::Command
  def self.application_root(); end

  def self.environment(); end

  def self.find_by_namespace(namespace, command_name=T.unsafe(nil)); end

  def self.hidden_commands(); end

  def self.invoke(full_namespace, args=T.unsafe(nil), **config); end

  def self.printing_commands(); end

  def self.root(); end
end

module Rails::Generators
  def namespace(); end

  def namespace=(val); end
  RAILS_DEV_PATH = ::T.let(nil, ::T.untyped)
end

module Rails::Generators::Actions
  def add_source(source, options=T.unsafe(nil), &block); end

  def application(data=T.unsafe(nil), options=T.unsafe(nil)); end

  def environment(data=T.unsafe(nil), options=T.unsafe(nil)); end

  def gem(*args); end

  def gem_group(*names, &block); end

  def generate(what, *args); end

  def git(commands=T.unsafe(nil)); end

  def github(repo, options=T.unsafe(nil), &block); end

  def initialize(*arg); end

  def initializer(filename, data=T.unsafe(nil)); end

  def lib(filename, data=T.unsafe(nil)); end

  def rails_command(command, options=T.unsafe(nil)); end

  def rake(command, options=T.unsafe(nil)); end

  def rakefile(filename, data=T.unsafe(nil)); end

  def readme(path); end

  def route(routing_code, namespace: T.unsafe(nil)); end

  def vendor(filename, data=T.unsafe(nil)); end
end

class Rails::Generators::Actions::CreateMigration
  def existing_migration(); end

  def migration_dir(); end

  def migration_file_name(); end

  def relative_existing_migration(); end
end

class Rails::Generators::Actions::CreateMigration
end

module Rails::Generators::Actions
end

class Rails::Generators::ActiveModel
  def destroy(); end

  def errors(); end

  def initialize(name); end

  def name(); end

  def save(); end

  def update(params=T.unsafe(nil)); end
end

class Rails::Generators::ActiveModel
  def self.all(klass); end

  def self.build(klass, params=T.unsafe(nil)); end

  def self.find(klass, params=T.unsafe(nil)); end
end

class Rails::Generators::Base
  include ::Thor::Actions
  include ::Rails::Generators::Actions
end

class Rails::Generators::Base
  def self.add_shebang_option!(); end

  def self.base_name(); end

  def self.base_root(); end

  def self.default_aliases_for_option(name, options); end

  def self.default_for_option(config, name, options, default); end

  def self.default_generator_root(); end

  def self.default_source_root(); end

  def self.default_value_for_option(name, options); end

  def self.generator_name(); end

  def self.hide!(); end

  def self.hook_for(*names, &block); end

  def self.hooks(); end

  def self.inherited(base); end

  def self.prepare_for_invocation(name, value); end

  def self.remove_hook_for(*names); end

  def self.usage_path(); end
end

class Rails::Generators::Database
  def base_package(); end

  def build_package(); end

  def feature(); end

  def feature_name(); end

  def gem(); end

  def host(); end

  def name(); end

  def port(); end

  def service(); end

  def socket(); end

  def template(); end

  def volume(); end
end

module Rails::Generators::Database::MariaDB
  def name(); end

  def port(); end

  def service(); end
end

module Rails::Generators::Database::MariaDB
end

class Rails::Generators::Database::MariaDBMySQL2
  include ::Rails::Generators::Database::MariaDB
end

class Rails::Generators::Database::MariaDBMySQL2
end

class Rails::Generators::Database::MariaDBTrilogy
  include ::Rails::Generators::Database::MariaDB
end

class Rails::Generators::Database::MariaDBTrilogy
end

module Rails::Generators::Database::MySQL
  def host(); end

  def name(); end

  def port(); end

  def service(); end

  def socket(); end
end

module Rails::Generators::Database::MySQL
end

class Rails::Generators::Database::MySQL2
  include ::Rails::Generators::Database::MySQL
end

class Rails::Generators::Database::MySQL2
end

class Rails::Generators::Database::Null
end

class Rails::Generators::Database::Null
end

class Rails::Generators::Database::PostgreSQL
end

class Rails::Generators::Database::PostgreSQL
end

class Rails::Generators::Database::SQLite3
end

class Rails::Generators::Database::SQLite3
end

class Rails::Generators::Database::Trilogy
  include ::Rails::Generators::Database::MySQL
end

class Rails::Generators::Database::Trilogy
end

class Rails::Generators::Database
  def self.all(); end

  def self.build(database_name); end
end

module Rails::Generators::Migration
  def create_migration(destination, data, config=T.unsafe(nil), &block); end

  def migration_class_name(); end

  def migration_file_name(); end

  def migration_number(); end

  def migration_template(source, destination, config=T.unsafe(nil)); end

  def set_migration_assigns!(destination); end
end

module Rails::Generators::Migration::ClassMethods
  def current_migration_number(dirname); end

  def migration_exists?(dirname, file_name); end

  def migration_lookup_at(dirname); end

  def next_migration_number(dirname); end
end

module Rails::Generators::Migration
  extend ::ActiveSupport::Concern
end

class Rails::Generators::NamedBase
  def file_name(); end

  def initialize(args, *options); end

  def js_template(source, destination); end

  def name(); end

  def name=(name); end
end

class Rails::Generators::NamedBase
  def self.check_class_collision(options=T.unsafe(nil)); end
end

module Rails::Generators::ResourceHelpers
  def initialize(*args); end
end

module Rails::Generators::ResourceHelpers
  def self.included(base); end
end

class Rails::Generators::TestCase
  include ::FileUtils::StreamUtils_
  def current_path(); end

  def current_path=(current_path); end

  def current_path?(); end

  def default_arguments(); end

  def default_arguments=(default_arguments); end

  def default_arguments?(); end

  def destination_root(); end

  def destination_root=(destination_root); end

  def destination_root?(); end

  def generator_class(); end

  def generator_class=(generator_class); end

  def generator_class?(); end
end

class Rails::Generators::TestCase
  def self.current_path(); end

  def self.current_path=(value); end

  def self.current_path?(); end

  def self.default_arguments(); end

  def self.default_arguments=(value); end

  def self.default_arguments?(); end

  def self.destination_root(); end

  def self.destination_root=(value); end

  def self.destination_root?(); end

  def self.generator_class(); end

  def self.generator_class=(value); end

  def self.generator_class?(); end
end

module Rails::Generators::Testing::Assertions
  def assert_class_method(method, content, &block); end

  def assert_directory(relative, *contents); end

  def assert_field_default_value(attribute_type, value); end

  def assert_field_type(attribute_type, field_type); end

  def assert_file(relative, *contents); end

  def assert_initializer(name, *contents, &block); end

  def assert_instance_method(method, content); end

  def assert_method(method, content); end

  def assert_migration(relative, *contents, &block); end

  def assert_no_directory(relative); end

  def assert_no_file(relative); end

  def assert_no_migration(relative); end
end

module Rails::Generators::Testing::Behavior
  def create_generated_attribute(attribute_type, name=T.unsafe(nil), index=T.unsafe(nil)); end

  def generator(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def run_generator(args=T.unsafe(nil), config=T.unsafe(nil)); end
end

module Rails::Generators::Testing::SetupAndTeardown
  def setup(); end

  def teardown(); end
end

module Rails::Generators
  def self.add_generated_file(file); end

  def self.after_generate_callbacks(); end

  def self.aliases(); end

  def self.api_only!(); end

  def self.configure!(config); end

  def self.fallbacks(); end

  def self.find_by_namespace(name, base=T.unsafe(nil), context=T.unsafe(nil)); end

  def self.help(command=T.unsafe(nil)); end

  def self.hidden_namespaces(); end

  def self.hide_namespace(*namespaces); end

  def self.hide_namespaces(*namespaces); end

  def self.invoke(namespace, args=T.unsafe(nil), config=T.unsafe(nil)); end

  def self.namespace(); end

  def self.namespace=(val); end

  def self.options(); end

  def self.print_generators(); end

  def self.public_namespaces(); end

  def self.sorted_groups(); end

  def self.templates_path(); end
end

module Rails::HTML::Concern::Scrubber::SafeList
  DEFAULT_ALLOWED_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  DEFAULT_ALLOWED_TAGS = ::T.let(nil, ::T.untyped)
end

class Rails::HTML::Sanitizer
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rails::HealthController
  def show(); end
end

module Rails::HealthController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::Turbo::Streams::ActionHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Importmap::ImportmapTagsHelper
  include ::ApplicationHelper
end

module Rails::HealthController::HelperMethods
end

class Rails::HealthController
end

module Rails::HTML
end

Rails::Html::FullSanitizer = Rails::HTML4::FullSanitizer

Rails::Html::LinkSanitizer = Rails::HTML4::LinkSanitizer

module Rails::HTML
end

module Rails::Info
  def properties(); end

  def properties=(val); end
end

module Rails::Info
  def self.properties(); end

  def self.properties=(val); end

  def self.property(name, value=T.unsafe(nil)); end

  def self.to_html(); end
end

class Rails::InfoController
  def index(); end

  def notes(); end

  def properties(); end

  def routes(); end
end

class Rails::InfoController
end

class Rails::MailersController
  def download(); end

  def index(); end

  def preview(); end
end

module Rails::MailersController::HelperMethods
  include ::Rails::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::Turbo::Streams::ActionHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Importmap::ImportmapTagsHelper
  include ::ApplicationHelper
  def attachment_url(*arg, **arg1, &arg2); end

  def locale_query(*arg, **arg1, &arg2); end

  def part_query(*arg, **arg1, &arg2); end
end

module Rails::MailersController::HelperMethods
end

class Rails::MailersController
end

class Rails::PwaController
  def manifest(); end

  def service_worker(); end
end

class Rails::PwaController
end

class Rails::Rack::SilenceRequest
  def call(env); end

  def initialize(app, path:); end
end

class Rails::Rack::SilenceRequest
end

class Rails::TestUnit::Runner
  PATH_ARGUMENT_PATTERN = ::T.let(nil, ::T.untyped)
  TEST_FOLDERS = ::T.let(nil, ::T.untyped)
end

class Rails::WelcomeController
  def index(); end
end

class Rails::WelcomeController
end

module Rake
  EARLY = ::T.let(nil, ::T.untyped)
  EMPTY_TASK_ARGS = ::T.let(nil, ::T.untyped)
  LATE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Rake::Application
  DEFAULT_RAKEFILES = ::T.let(nil, ::T.untyped)
end

module Rake::Backtrace
  SUPPRESSED_PATHS = ::T.let(nil, ::T.untyped)
  SUPPRESSED_PATHS_RE = ::T.let(nil, ::T.untyped)
  SUPPRESS_PATTERN = ::T.let(nil, ::T.untyped)
  SYS_KEYS = ::T.let(nil, ::T.untyped)
  SYS_PATHS = ::T.let(nil, ::T.untyped)
end

module Rake::DSL
  include ::FileUtils::StreamUtils_
end

class Rake::FileList
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PATTERNS = ::T.let(nil, ::T.untyped)
  DEFAULT_IGNORE_PROCS = ::T.let(nil, ::T.untyped)
  DELEGATING_METHODS = ::T.let(nil, ::T.untyped)
  GLOB_PATTERN = ::T.let(nil, ::T.untyped)
  MUST_DEFINE = ::T.let(nil, ::T.untyped)
  MUST_NOT_DEFINE = ::T.let(nil, ::T.untyped)
  SPECIAL_RETURN = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  include ::FileUtils::StreamUtils_
  DEFAULT = ::T.let(nil, ::T.untyped)
end

module Rake::FileUtilsExt
  extend ::FileUtils::StreamUtils_
end

class Rake::InvocationChain
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::LinkedList
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::Promise
  NOT_SET = ::T.let(nil, ::T.untyped)
end

Rake::RDocTask = RDoc::Task

class Rake::Scope
  EMPTY = ::T.let(nil, ::T.untyped)
end

class Rake::TaskLib
  include ::FileUtils::StreamUtils_
end

module Rake::Version
  BUILD = ::T.let(nil, ::T.untyped)
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  NUMBERS = ::T.let(nil, ::T.untyped)
  OTHER = ::T.let(nil, ::T.untyped)
end

module Rake
  extend ::FileUtils::StreamUtils_
end

RakeFileUtils = Rake::FileUtilsExt

class Random::Base
  include ::Random::Formatter
  def bytes(arg); end

  def initialize(*arg); end

  def seed(); end
end

class Random::Base
  extend ::Random::Formatter
end

module Random::Formatter
  def uuid_v4(); end

  def uuid_v7(extra_timestamp_bits: T.unsafe(nil)); end
end

class Random
  def self.bytes(arg); end

  def self.seed(); end
end

class Range
  include ::ActiveSupport::RangeWithFormat
  include ::ActiveSupport::CompareWithRange
  include ::ActiveSupport::EachTimeWithZone
  def %(arg); end

  def entries(); end

  def reverse_each(); end

  def to_a(); end
end

module RbConfig
  def self.expand(val, config=T.unsafe(nil)); end

  def self.fire_update!(key, val, mkconf=T.unsafe(nil), conf=T.unsafe(nil)); end
end

class Redis
  BASE_PATH = ::T.let(nil, ::T.untyped)
  SERVER_URL_OPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Redis::Client
  ERROR_MAPPING = ::T.let(nil, ::T.untyped)
end

module Redis::Commands
  Boolify = ::T.let(nil, ::T.untyped)
  BoolifySet = ::T.let(nil, ::T.untyped)
  Floatify = ::T.let(nil, ::T.untyped)
  FloatifyPair = ::T.let(nil, ::T.untyped)
  FloatifyPairs = ::T.let(nil, ::T.untyped)
  Hashify = ::T.let(nil, ::T.untyped)
  HashifyClusterNodeInfo = ::T.let(nil, ::T.untyped)
  HashifyClusterNodes = ::T.let(nil, ::T.untyped)
  HashifyClusterSlaves = ::T.let(nil, ::T.untyped)
  HashifyClusterSlots = ::T.let(nil, ::T.untyped)
  HashifyInfo = ::T.let(nil, ::T.untyped)
  HashifyStreamAutoclaim = ::T.let(nil, ::T.untyped)
  HashifyStreamAutoclaimJustId = ::T.let(nil, ::T.untyped)
  HashifyStreamEntries = ::T.let(nil, ::T.untyped)
  HashifyStreamPendingDetails = ::T.let(nil, ::T.untyped)
  HashifyStreamPendings = ::T.let(nil, ::T.untyped)
  HashifyStreams = ::T.let(nil, ::T.untyped)
  Noop = ::T.let(nil, ::T.untyped)
  Pairify = ::T.let(nil, ::T.untyped)
end

class Redis::Distributed
  def [](key); end

  def []=(key, value); end

  def _bpop(cmd, args); end

  def _eval(cmd, args); end

  def add_node(options); end

  def append(key, value); end

  def bgsave(); end

  def bitcount(key, start=T.unsafe(nil), stop=T.unsafe(nil), scale: T.unsafe(nil)); end

  def bitop(operation, destkey, *keys); end

  def bitpos(key, bit, start=T.unsafe(nil), stop=T.unsafe(nil), scale: T.unsafe(nil)); end

  def blmove(source, destination, where_source, where_destination, timeout: T.unsafe(nil)); end

  def blmpop(timeout, *keys, modifier: T.unsafe(nil), count: T.unsafe(nil)); end

  def blpop(*args); end

  def brpop(*args); end

  def brpoplpush(source, destination, **options); end

  def bzmpop(timeout, *keys, modifier: T.unsafe(nil), count: T.unsafe(nil)); end

  def bzpopmax(*args); end

  def bzpopmin(*args); end

  def close(); end

  def copy(source, destination, **options); end

  def dbsize(); end

  def decr(key); end

  def decrby(key, decrement); end

  def del(*args); end

  def discard(); end

  def dump(key); end

  def echo(value); end

  def ensure_same_node(command, keys); end

  def eval(*args); end

  def evalsha(*args); end

  def exec(); end

  def exists(*args); end

  def exists?(*args); end

  def expire(key, seconds, **kwargs); end

  def expireat(key, unix_time, **kwargs); end

  def expiretime(key); end

  def flushall(); end

  def flushdb(); end

  def get(key); end

  def getbit(key, offset); end

  def getdel(key); end

  def getex(key, **options); end

  def getrange(key, start, stop); end

  def getset(key, value); end

  def hdel(key, *fields); end

  def hexists(key, field); end

  def hget(key, field); end

  def hgetall(key); end

  def hincrby(key, field, increment); end

  def hincrbyfloat(key, field, increment); end

  def hkeys(key); end

  def hlen(key); end

  def hmget(key, *fields); end

  def hmset(key, *attrs); end

  def hrandfield(key, count=T.unsafe(nil), **options); end

  def hset(key, *attrs); end

  def hsetnx(key, field, value); end

  def hvals(key); end

  def incr(key); end

  def incrby(key, increment); end

  def incrbyfloat(key, increment); end

  def info(cmd=T.unsafe(nil)); end

  def initialize(node_configs, options=T.unsafe(nil)); end

  def key_tag(key); end

  def keys(glob=T.unsafe(nil)); end

  def lastsave(); end

  def lindex(key, index); end

  def linsert(key, where, pivot, value); end

  def llen(key); end

  def lmove(source, destination, where_source, where_destination); end

  def lmpop(*keys, modifier: T.unsafe(nil), count: T.unsafe(nil)); end

  def lpop(key, count=T.unsafe(nil)); end

  def lpush(key, value); end

  def lpushx(key, value); end

  def lrange(key, start, stop); end

  def lrem(key, count, value); end

  def lset(key, index, value); end

  def ltrim(key, start, stop); end

  def mapped_hmget(key, *fields); end

  def mapped_hmset(key, hash); end

  def mapped_mget(*keys); end

  def mapped_mset(_hash); end

  def mapped_msetnx(_hash); end

  def mget(*keys); end

  def migrate(_key, _options); end

  def monitor(); end

  def move(key, db); end

  def mset(*arg); end

  def msetnx(*arg); end

  def multi(&block); end

  def node_for(key); end

  def node_index_for(key); end

  def nodes(); end

  def on_each_node(command, *args); end

  def persist(key); end

  def pexpire(key, milliseconds, **kwarg); end

  def pexpireat(key, ms_unix_time, **kwarg); end

  def pexpiretime(key); end

  def pfadd(key, member); end

  def pfcount(*keys); end

  def pfmerge(dest_key, *source_key); end

  def ping(); end

  def pipelined(); end

  def psetex(key, ttl, value); end

  def psubscribe(*channels, &block); end

  def pttl(key); end

  def publish(channel, message); end

  def punsubscribe(*channels); end

  def quit(); end

  def randomkey(); end

  def rename(old_name, new_name); end

  def renamenx(old_name, new_name); end

  def restore(key, ttl, serialized_value, **options); end

  def ring(); end

  def rpop(key, count=T.unsafe(nil)); end

  def rpoplpush(source, destination); end

  def rpush(key, value); end

  def rpushx(key, value); end

  def sadd(key, *members); end

  def sadd?(key, *members); end

  def save(); end

  def scard(key); end

  def script(subcommand, *args); end

  def sdiff(*keys); end

  def sdiffstore(destination, *keys); end

  def select(db); end

  def set(key, value, **options); end

  def setbit(key, offset, value); end

  def setex(key, ttl, value); end

  def setnx(key, value); end

  def setrange(key, offset, value); end

  def sinter(*keys); end

  def sinterstore(destination, *keys); end

  def sismember(key, member); end

  def smembers(key); end

  def smismember(key, *members); end

  def smove(source, destination, member); end

  def sort(key, **options); end

  def spop(key, count=T.unsafe(nil)); end

  def srandmember(key, count=T.unsafe(nil)); end

  def srem(key, *members); end

  def srem?(key, *members); end

  def sscan(key, cursor, **options); end

  def sscan_each(key, **options, &block); end

  def strlen(key); end

  def subscribe(channel, *channels, &block); end

  def subscribed?(); end

  def sunion(*keys); end

  def sunionstore(destination, *keys); end

  def time(); end

  def ttl(key); end

  def type(key); end

  def unlink(*args); end

  def unsubscribe(*channels); end

  def unwatch(); end

  def watch(*keys, &block); end

  def zadd(key, *args, **arg); end

  def zcard(key); end

  def zcount(key, min, max); end

  def zdiff(*keys, **options); end

  def zdiffstore(destination, *keys, **options); end

  def zincrby(key, increment, member); end

  def zinter(*keys, **options); end

  def zinterstore(destination, *keys, **options); end

  def zmpop(*keys, modifier: T.unsafe(nil), count: T.unsafe(nil)); end

  def zmscore(key, *members); end

  def zrandmember(key, count=T.unsafe(nil), **options); end

  def zrange(key, start, stop, **options); end

  def zrangebyscore(key, min, max, **options); end

  def zrangestore(dest_key, src_key, start, stop, **options); end

  def zrank(key, member, **options); end

  def zrem(key, member); end

  def zremrangebyrank(key, start, stop); end

  def zremrangebyscore(key, min, max); end

  def zrevrange(key, start, stop, **options); end

  def zrevrangebyscore(key, max, min, **options); end

  def zrevrank(key, member, **options); end

  def zscore(key, member); end

  def zunion(*keys, **options); end

  def zunionstore(destination, *keys, **options); end
end

class Redis::Distributed::CannotDistribute
  def initialize(command); end
end

class Redis::Distributed::CannotDistribute
end

class Redis::Distributed
end

class Redis::Future
  FutureNotReady = ::T.let(nil, ::T.untyped)
end

class Redis::HashRing
  def add_node(node); end

  def get_node(key); end

  def initialize(nodes=T.unsafe(nil), replicas=T.unsafe(nil)); end

  def iter_nodes(key); end

  def nodes(); end

  def remove_node(node); end

  def replicas(); end

  def ring(); end

  def sorted_keys(); end
  POINTS_PER_SERVER = ::T.let(nil, ::T.untyped)
end

class Redis::HashRing
end

class RedisClient
  VERSION = ::T.let(nil, ::T.untyped)
end

class RedisClient::CommandError
  ERRORS = ::T.let(nil, ::T.untyped)
end

class RedisClient::Config
  DEFAULT_DB = ::T.let(nil, ::T.untyped)
  DEFAULT_HOST = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_TIMEOUT = ::T.let(nil, ::T.untyped)
  DEFAULT_USERNAME = ::T.let(nil, ::T.untyped)
end

class RedisClient::Pooled
  EMPTY_HASH = ::T.let(nil, ::T.untyped)
end

module RedisClient::RESP3
  DUMP_TYPES = ::T.let(nil, ::T.untyped)
  EOL = ::T.let(nil, ::T.untyped)
  EOL_SIZE = ::T.let(nil, ::T.untyped)
  INTEGER_RANGE = ::T.let(nil, ::T.untyped)
  PARSER_TYPES = ::T.let(nil, ::T.untyped)
end

class RedisClient::RubyConnection
  SUPPORTS_RESOLV_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class RedisClient::RubyConnection::BufferedIO
  ENCODING = ::T.let(nil, ::T.untyped)
  EOL = ::T.let(nil, ::T.untyped)
  EOL_SIZE = ::T.let(nil, ::T.untyped)
end

class RedisClient::SentinelConfig
  DEFAULT_RECONNECT_ATTEMPTS = ::T.let(nil, ::T.untyped)
  SENTINEL_DELAY = ::T.let(nil, ::T.untyped)
end

class Refinement
  include ::Zeitwerk::ConstAdded
  def target(); end
end

class Regexp
  def timeout(); end
  ENC_EUC = ::T.let(nil, ::T.untyped)
  ENC_NONE = ::T.let(nil, ::T.untyped)
  ENC_SJIS = ::T.let(nil, ::T.untyped)
  ENC_UTF8 = ::T.let(nil, ::T.untyped)
  ONCE = ::T.let(nil, ::T.untyped)
  TOKEN_KEYS = ::T.let(nil, ::T.untyped)
end

Regexp::Expression::Alternation::OPERAND = Regexp::Expression::Alternative

Regexp::Expression::Anchor::BOL = Regexp::Expression::Anchor::BeginningOfLine

Regexp::Expression::Anchor::BOS = Regexp::Expression::Anchor::BeginningOfString

Regexp::Expression::Anchor::EOL = Regexp::Expression::Anchor::EndOfLine

Regexp::Expression::Anchor::EOS = Regexp::Expression::Anchor::EndOfString

Regexp::Expression::Anchor::EOSobEOL = Regexp::Expression::Anchor::EndOfStringOrBeforeEndOfLine

Regexp::Expression::Backref = Regexp::Expression::Backreference

Regexp::Expression::CharacterSet::Intersection::OPERAND = Regexp::Expression::CharacterSet::IntersectedSequence

Regexp::Expression::Escape = Regexp::Expression::EscapeSequence

Regexp::Expression::MatchLength = Regexp::MatchLength

Regexp::Expression::Nonposixclass = Regexp::Expression::PosixClass

Regexp::Expression::Nonproperty = Regexp::Expression::UnicodeProperty

Regexp::Expression::Posixclass = Regexp::Expression::PosixClass

Regexp::Expression::Property = Regexp::Expression::UnicodeProperty

class Regexp::Expression::Quantifier
  MODES = ::T.let(nil, ::T.untyped)
end

Regexp::Expression::Set = Regexp::Expression::CharacterSet

class Regexp::Lexer
  CLOSING_TOKENS = ::T.let(nil, ::T.untyped)
  CONDITION_TOKENS = ::T.let(nil, ::T.untyped)
  OPENING_TOKENS = ::T.let(nil, ::T.untyped)
end

class Regexp::Parser
  ENC_FLAGS = ::T.let(nil, ::T.untyped)
  MOD_FLAGS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

Regexp::Parser::UP = Regexp::Expression::UnicodeProperty

Regexp::Parser::UPTokens = Regexp::Syntax::Token::UnicodeProperty

module Regexp::Syntax
  VERSION_CONST_REGEXP = ::T.let(nil, ::T.untyped)
  VERSION_FORMAT = ::T.let(nil, ::T.untyped)
  VERSION_REGEXP = ::T.let(nil, ::T.untyped)
end

Regexp::Syntax::CURRENT = Regexp::Syntax::V3_2_0

module Regexp::Syntax::Token
  All = ::T.let(nil, ::T.untyped)
  Map = ::T.let(nil, ::T.untyped)
  Types = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Alternation
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Anchor
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  MatchStart = ::T.let(nil, ::T.untyped)
  String = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Assertion
  All = ::T.let(nil, ::T.untyped)
  Lookahead = ::T.let(nil, ::T.untyped)
  Lookbehind = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

Regexp::Syntax::Token::Backref = Regexp::Syntax::Token::Backreference

module Regexp::Syntax::Token::Backreference
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  NumberRef = ::T.let(nil, ::T.untyped)
  Plain = ::T.let(nil, ::T.untyped)
  RecursionLevel = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  V1_8_6 = ::T.let(nil, ::T.untyped)
  V1_9_1 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterSet
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterType
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Clustered = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Conditional
  All = ::T.let(nil, ::T.untyped)
  Condition = ::T.let(nil, ::T.untyped)
  Delimiters = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Escape
  ASCII = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Control = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Meta = ::T.let(nil, ::T.untyped)
  Octal = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  Unicode = ::T.let(nil, ::T.untyped)
end

Regexp::Syntax::Token::EscapeSequence = Regexp::Syntax::Token::Escape

module Regexp::Syntax::Token::FreeSpace
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Group
  All = ::T.let(nil, ::T.untyped)
  Atomic = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Comment = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Named = ::T.let(nil, ::T.untyped)
  Passive = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  V1_8_6 = ::T.let(nil, ::T.untyped)
  V2_4_1 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Keep
  All = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Literal
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Meta
  All = ::T.let(nil, ::T.untyped)
  Alternation = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::PosixClass
  All = ::T.let(nil, ::T.untyped)
  Extensions = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  Standard = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

Regexp::Syntax::Token::Property = Regexp::Syntax::Token::UnicodeProperty

module Regexp::Syntax::Token::Quantifier
  All = ::T.let(nil, ::T.untyped)
  Greedy = ::T.let(nil, ::T.untyped)
  Interval = ::T.let(nil, ::T.untyped)
  IntervalAll = ::T.let(nil, ::T.untyped)
  IntervalPossessive = ::T.let(nil, ::T.untyped)
  IntervalReluctant = ::T.let(nil, ::T.untyped)
  Possessive = ::T.let(nil, ::T.untyped)
  Reluctant = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  V1_8_6 = ::T.let(nil, ::T.untyped)
end

Regexp::Syntax::Token::Set = Regexp::Syntax::Token::CharacterSet

module Regexp::Syntax::Token::SubexpressionCall
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty
  Age = ::T.let(nil, ::T.untyped)
  Age_V1_9_3 = ::T.let(nil, ::T.untyped)
  Age_V2_0_0 = ::T.let(nil, ::T.untyped)
  Age_V2_2_0 = ::T.let(nil, ::T.untyped)
  Age_V2_3_0 = ::T.let(nil, ::T.untyped)
  Age_V2_4_0 = ::T.let(nil, ::T.untyped)
  Age_V2_5_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_2 = ::T.let(nil, ::T.untyped)
  Age_V2_6_3 = ::T.let(nil, ::T.untyped)
  Age_V3_1_0 = ::T.let(nil, ::T.untyped)
  Age_V3_2_0 = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  CharType_V1_9_0 = ::T.let(nil, ::T.untyped)
  CharType_V2_5_0 = ::T.let(nil, ::T.untyped)
  Derived = ::T.let(nil, ::T.untyped)
  Derived_V1_9_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_0_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_4_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_5_0 = ::T.let(nil, ::T.untyped)
  Emoji = ::T.let(nil, ::T.untyped)
  Emoji_V2_5_0 = ::T.let(nil, ::T.untyped)
  Emoji_V2_6_0 = ::T.let(nil, ::T.untyped)
  Enumerated = ::T.let(nil, ::T.untyped)
  Enumerated_V2_4_0 = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  POSIX = ::T.let(nil, ::T.untyped)
  Script = ::T.let(nil, ::T.untyped)
  Script_V1_9_0 = ::T.let(nil, ::T.untyped)
  Script_V1_9_3 = ::T.let(nil, ::T.untyped)
  Script_V2_0_0 = ::T.let(nil, ::T.untyped)
  Script_V2_2_0 = ::T.let(nil, ::T.untyped)
  Script_V2_3_0 = ::T.let(nil, ::T.untyped)
  Script_V2_4_0 = ::T.let(nil, ::T.untyped)
  Script_V2_5_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_2 = ::T.let(nil, ::T.untyped)
  Script_V3_1_0 = ::T.let(nil, ::T.untyped)
  Script_V3_2_0 = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  UnicodeBlock = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V1_9_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_0_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_2_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_3_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_4_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_5_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_2 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V3_1_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V3_2_0 = ::T.let(nil, ::T.untyped)
  V1_9_0 = ::T.let(nil, ::T.untyped)
  V1_9_3 = ::T.let(nil, ::T.untyped)
  V2_0_0 = ::T.let(nil, ::T.untyped)
  V2_2_0 = ::T.let(nil, ::T.untyped)
  V2_3_0 = ::T.let(nil, ::T.untyped)
  V2_4_0 = ::T.let(nil, ::T.untyped)
  V2_5_0 = ::T.let(nil, ::T.untyped)
  V2_6_0 = ::T.let(nil, ::T.untyped)
  V2_6_2 = ::T.let(nil, ::T.untyped)
  V2_6_3 = ::T.let(nil, ::T.untyped)
  V3_1_0 = ::T.let(nil, ::T.untyped)
  V3_2_0 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty::Category
  All = ::T.let(nil, ::T.untyped)
  Codepoint = ::T.let(nil, ::T.untyped)
  Letter = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  Punctuation = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Symbol = ::T.let(nil, ::T.untyped)
end

class Regexp
  def self.linear_time?(*arg); end
end

module Reline
  DEFAULT_DIALOG_CONTEXT = ::T.let(nil, ::T.untyped)
  DEFAULT_DIALOG_PROC_AUTOCOMPLETE = ::T.let(nil, ::T.untyped)
  FILENAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  HISTORY = ::T.let(nil, ::T.untyped)
  IOGate = ::T.let(nil, ::T.untyped)
  USERNAME_COMPLETION_PROC = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Reline::ANSI
  ANSI_CURSOR_KEY_BINDINGS = ::T.let(nil, ::T.untyped)
  CAPNAME_KEY_BINDINGS = ::T.let(nil, ::T.untyped)
  END_BRACKETED_PASTE = ::T.let(nil, ::T.untyped)
  START_BRACKETED_PASTE = ::T.let(nil, ::T.untyped)
end

class Reline::Config
  KEYSEQ_PATTERN = ::T.let(nil, ::T.untyped)
  VARIABLE_NAMES = ::T.let(nil, ::T.untyped)
  VARIABLE_NAME_SYMBOLS = ::T.let(nil, ::T.untyped)
end

class Reline::Core
  ATTR_READER_NAMES = ::T.let(nil, ::T.untyped)
end

class Reline::Dumb
  RESET_COLOR = ::T.let(nil, ::T.untyped)
end

module Reline::KeyActor
  EMACS_MAPPING = ::T.let(nil, ::T.untyped)
  VI_COMMAND_MAPPING = ::T.let(nil, ::T.untyped)
  VI_INSERT_MAPPING = ::T.let(nil, ::T.untyped)
end

class Reline::KeyStroke
  CSI_INTERMEDIATE_BYTES_RANGE = ::T.let(nil, ::T.untyped)
  CSI_PARAMETER_BYTES_RANGE = ::T.let(nil, ::T.untyped)
  ESC_BYTE = ::T.let(nil, ::T.untyped)
  MATCHED = ::T.let(nil, ::T.untyped)
  MATCHING = ::T.let(nil, ::T.untyped)
  MATCHING_MATCHED = ::T.let(nil, ::T.untyped)
  UNMATCHED = ::T.let(nil, ::T.untyped)
end

module Reline::KillRing::State
  CONTINUED = ::T.let(nil, ::T.untyped)
  FRESH = ::T.let(nil, ::T.untyped)
  PROCESSED = ::T.let(nil, ::T.untyped)
  YANK = ::T.let(nil, ::T.untyped)
end

class Reline::LineEditor
  ARGUMENT_DIGIT_METHODS = ::T.let(nil, ::T.untyped)
  DIALOG_DEFAULT_HEIGHT = ::T.let(nil, ::T.untyped)
  MAX_INPUT_LINES = ::T.let(nil, ::T.untyped)
  MINIMUM_SCROLLBAR_HEIGHT = ::T.let(nil, ::T.untyped)
  NullActionState = ::T.let(nil, ::T.untyped)
  VI_MOTIONS = ::T.let(nil, ::T.untyped)
  VI_WAITING_ACCEPT_METHODS = ::T.let(nil, ::T.untyped)
end

module Reline::LineEditor::CompletionState
  MENU = ::T.let(nil, ::T.untyped)
  MENU_WITH_PERFECT_MATCH = ::T.let(nil, ::T.untyped)
  NORMAL = ::T.let(nil, ::T.untyped)
  PERFECT_MATCH = ::T.let(nil, ::T.untyped)
end

class Reline::Unicode
  CSI_REGEXP = ::T.let(nil, ::T.untyped)
  EscapedChars = ::T.let(nil, ::T.untyped)
  EscapedPairs = ::T.let(nil, ::T.untyped)
  NON_PRINTING_END = ::T.let(nil, ::T.untyped)
  NON_PRINTING_START = ::T.let(nil, ::T.untyped)
  OSC_REGEXP = ::T.let(nil, ::T.untyped)
  WIDTH_SCANNER = ::T.let(nil, ::T.untyped)
end

class Reline::Unicode::EastAsianWidth
  CHUNK_LAST = ::T.let(nil, ::T.untyped)
  CHUNK_WIDTH = ::T.let(nil, ::T.untyped)
end

module ReshimInstaller
  def install(options); end
end

module ReshimInstaller
end

class Resolv
  VERSION = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS
  def extract_resources(msg, name, typeclass); end
  RequestID = ::T.let(nil, ::T.untyped)
  RequestIDMutex = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Config
  def initialize(config_info=T.unsafe(nil)); end

  def use_ipv6?(); end
end

class Resolv::DNS::Label::Str
  def initialize(string); end
end

class Resolv::DNS::Message
  def initialize(id=T.unsafe(nil)); end
end

class Resolv::DNS::Message::MessageDecoder
  def get_list(); end

  def initialize(data); end
end

class Resolv::DNS::Requester::ConnectedUDP
  def initialize(host, port=T.unsafe(nil)); end

  def lazy_initialize(); end
end

class Resolv::DNS::Requester::Sender
  def initialize(msg, data, sock); end
end

class Resolv::DNS::Requester::TCP
  def initialize(host, port=T.unsafe(nil)); end
end

class Resolv::DNS::Requester::UnconnectedUDP
  def initialize(*nameserver_port); end

  def lazy_initialize(); end
end

class Resolv::DNS::Requester::UnconnectedUDP::Sender
  def initialize(msg, data, sock, host, port); end
end

class Resolv::DNS::Resource
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::CAA
  def critical?(); end

  def flags(); end

  def initialize(flags, tag, value); end

  def tag(); end

  def value(); end
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::CAA
end

class Resolv::DNS::Resource::IN::CAA
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::CAA
end

class Resolv::DNS::Resource::IN::HTTPS
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::HTTPS
end

class Resolv::DNS::Resource::IN::SVCB
  ClassValue = ::T.let(nil, ::T.untyped)
  TypeValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::IN::SVCB
end

class Resolv::DNS::Resource::IN::ServiceBinding
  def alias_mode?(); end

  def encode_rdata(msg); end

  def initialize(priority, target, params=T.unsafe(nil)); end

  def params(); end

  def priority(); end

  def service_mode?(); end

  def target(); end
end

class Resolv::DNS::Resource::IN::ServiceBinding
  def self.decode_rdata(msg); end
end

class Resolv::DNS::Resource::LOC
  def initialize(version, ssize, hprecision, vprecision, latitude, longitude, altitude); end
end

class Resolv::DNS::SvcParam
  ClassHash = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::SvcParam::ALPN
  def encode(msg); end

  def initialize(protocol_ids); end

  def protocol_ids(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::SvcParam::ALPN
  def self.decode(msg); end
end

class Resolv::DNS::SvcParam::DoHPath
  def encode(msg); end

  def initialize(template); end

  def template(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::SvcParam::DoHPath
  def self.decode(msg); end
end

class Resolv::DNS::SvcParam::Generic
  def encode(msg); end

  def initialize(value); end

  def value(); end
end

class Resolv::DNS::SvcParam::Generic
  def self.create(key_number); end

  def self.decode(msg); end
end

class Resolv::DNS::SvcParam::IPv4Hint
  def addresses(); end

  def encode(msg); end

  def initialize(addresses); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::SvcParam::IPv4Hint
  def self.decode(msg); end
end

class Resolv::DNS::SvcParam::IPv6Hint
  def addresses(); end

  def encode(msg); end

  def initialize(addresses); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::SvcParam::IPv6Hint
  def self.decode(msg); end
end

class Resolv::DNS::SvcParam::Mandatory
  def encode(msg); end

  def initialize(keys); end

  def keys(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::SvcParam::Mandatory
  def self.decode(msg); end
end

class Resolv::DNS::SvcParam::NoDefaultALPN
  def encode(msg); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::SvcParam::NoDefaultALPN
  def self.decode(msg); end
end

class Resolv::DNS::SvcParam::Port
  def encode(msg); end

  def initialize(port); end

  def port(); end
  KeyName = ::T.let(nil, ::T.untyped)
  KeyNumber = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::SvcParam::Port
  def self.decode(msg); end
end

class Resolv::DNS::SvcParam
  def self.key_name(); end

  def self.key_number(); end
end

class Resolv::DNS::SvcParams
  include ::Enumerable
  def [](key); end

  def add(param); end

  def count(); end

  def delete(key); end

  def each(&block); end

  def empty?(); end

  def encode(msg); end

  def initialize(params=T.unsafe(nil)); end
end

class Resolv::DNS::SvcParams
  def self.decode(msg); end
end

class Resolv::DNS
  def self.allocate_request_id(host, port); end

  def self.bind_random_port(udpsock, bind_host=T.unsafe(nil)); end

  def self.free_request_id(host, port, id); end

  def self.random(arg); end
end

class Resolv::IPv6
  Regex_8HexLinkLocal = ::T.let(nil, ::T.untyped)
  Regex_CompressedHexLinkLocal = ::T.let(nil, ::T.untyped)
end

class Ripper
  def column(); end

  def debug_output(); end

  def debug_output=(debug_output); end

  def encoding(); end

  def end_seen?(); end

  def error?(); end

  def filename(); end

  def initialize(*arg); end

  def lineno(); end

  def parse(); end

  def state(); end

  def token(); end

  def yydebug(); end

  def yydebug=(yydebug); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_VALUE = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Ripper::Filter
  def initialize(src, filename=T.unsafe(nil), lineno=T.unsafe(nil)); end
end

class Ripper::Lexer
  def errors(); end

  def lex(**kw); end

  def parse(raise_errors: T.unsafe(nil)); end

  def scan(**kw); end

  def tokenize(**kw); end
end

class Ripper::Lexer::Elem
  def [](index); end

  def event(); end

  def event=(event); end

  def initialize(pos, event, tok, state, message=T.unsafe(nil)); end

  def message(); end

  def message=(message); end

  def pos(); end

  def pos=(pos); end

  def state(); end

  def state=(state); end

  def to_a(); end

  def tok(); end

  def tok=(tok); end
end

class Ripper::Lexer::Elem
end

class Ripper::Lexer::State
  def &(i); end

  def ==(i); end

  def [](index); end

  def allbits?(i); end

  def anybits?(i); end

  def initialize(i); end

  def nobits?(i); end

  def to_i(); end

  def to_int(); end

  def |(i); end
end

class Ripper::Lexer::State
end

class Ripper::Lexer
end

class Ripper::SexpBuilder
  def on_BEGIN(*args); end

  def on_CHAR(tok); end

  def on_END(*args); end

  def on___end__(tok); end

  def on_alias(*args); end

  def on_alias_error(*args); end

  def on_aref(*args); end

  def on_aref_field(*args); end

  def on_arg_ambiguous(*args); end

  def on_arg_paren(*args); end

  def on_args_add(*args); end

  def on_args_add_block(*args); end

  def on_args_add_star(*args); end

  def on_args_forward(*args); end

  def on_args_new(*args); end

  def on_array(*args); end

  def on_aryptn(*args); end

  def on_assign(*args); end

  def on_assign_error(*args); end

  def on_assoc_new(*args); end

  def on_assoc_splat(*args); end

  def on_assoclist_from_args(*args); end

  def on_backref(tok); end

  def on_backtick(tok); end

  def on_bare_assoc_hash(*args); end

  def on_begin(*args); end

  def on_binary(*args); end

  def on_block_var(*args); end

  def on_blockarg(*args); end

  def on_bodystmt(*args); end

  def on_brace_block(*args); end

  def on_break(*args); end

  def on_call(*args); end

  def on_case(*args); end

  def on_class(*args); end

  def on_class_name_error(*args); end

  def on_comma(tok); end

  def on_command(*args); end

  def on_command_call(*args); end

  def on_comment(tok); end

  def on_const(tok); end

  def on_const_path_field(*args); end

  def on_const_path_ref(*args); end

  def on_const_ref(*args); end

  def on_cvar(tok); end

  def on_def(*args); end

  def on_defined(*args); end

  def on_defs(*args); end

  def on_do_block(*args); end

  def on_dot2(*args); end

  def on_dot3(*args); end

  def on_dyna_symbol(*args); end

  def on_else(*args); end

  def on_elsif(*args); end

  def on_embdoc(tok); end

  def on_embdoc_beg(tok); end

  def on_embdoc_end(tok); end

  def on_embexpr_beg(tok); end

  def on_embexpr_end(tok); end

  def on_embvar(tok); end

  def on_ensure(*args); end

  def on_excessed_comma(*args); end

  def on_fcall(*args); end

  def on_field(*args); end

  def on_float(tok); end

  def on_fndptn(*args); end

  def on_for(*args); end

  def on_gvar(tok); end

  def on_hash(*args); end

  def on_heredoc_beg(tok); end

  def on_heredoc_end(tok); end

  def on_hshptn(*args); end

  def on_ident(tok); end

  def on_if(*args); end

  def on_if_mod(*args); end

  def on_ifop(*args); end

  def on_ignored_nl(tok); end

  def on_ignored_sp(tok); end

  def on_imaginary(tok); end

  def on_in(*args); end

  def on_int(tok); end

  def on_ivar(tok); end

  def on_kw(tok); end

  def on_kwrest_param(*args); end

  def on_label(tok); end

  def on_label_end(tok); end

  def on_lambda(*args); end

  def on_lbrace(tok); end

  def on_lbracket(tok); end

  def on_lparen(tok); end

  def on_magic_comment(*args); end

  def on_massign(*args); end

  def on_method_add_arg(*args); end

  def on_method_add_block(*args); end

  def on_mlhs_add(*args); end

  def on_mlhs_add_post(*args); end

  def on_mlhs_add_star(*args); end

  def on_mlhs_new(*args); end

  def on_mlhs_paren(*args); end

  def on_module(*args); end

  def on_mrhs_add(*args); end

  def on_mrhs_add_star(*args); end

  def on_mrhs_new(*args); end

  def on_mrhs_new_from_args(*args); end

  def on_next(*args); end

  def on_nl(tok); end

  def on_nokw_param(*args); end

  def on_op(tok); end

  def on_opassign(*args); end

  def on_operator_ambiguous(*args); end

  def on_param_error(*args); end

  def on_params(*args); end

  def on_paren(*args); end

  def on_period(tok); end

  def on_program(*args); end

  def on_qsymbols_add(*args); end

  def on_qsymbols_beg(tok); end

  def on_qsymbols_new(*args); end

  def on_qwords_add(*args); end

  def on_qwords_beg(tok); end

  def on_qwords_new(*args); end

  def on_rational(tok); end

  def on_rbrace(tok); end

  def on_rbracket(tok); end

  def on_redo(*args); end

  def on_regexp_add(*args); end

  def on_regexp_beg(tok); end

  def on_regexp_end(tok); end

  def on_regexp_literal(*args); end

  def on_regexp_new(*args); end

  def on_rescue(*args); end

  def on_rescue_mod(*args); end

  def on_rest_param(*args); end

  def on_retry(*args); end

  def on_return(*args); end

  def on_return0(*args); end

  def on_rparen(tok); end

  def on_sclass(*args); end

  def on_semicolon(tok); end

  def on_sp(tok); end

  def on_stmts_add(*args); end

  def on_stmts_new(*args); end

  def on_string_add(*args); end

  def on_string_concat(*args); end

  def on_string_content(*args); end

  def on_string_dvar(*args); end

  def on_string_embexpr(*args); end

  def on_string_literal(*args); end

  def on_super(*args); end

  def on_symbeg(tok); end

  def on_symbol(*args); end

  def on_symbol_literal(*args); end

  def on_symbols_add(*args); end

  def on_symbols_beg(tok); end

  def on_symbols_new(*args); end

  def on_tlambda(tok); end

  def on_tlambeg(tok); end

  def on_top_const_field(*args); end

  def on_top_const_ref(*args); end

  def on_tstring_beg(tok); end

  def on_tstring_content(tok); end

  def on_tstring_end(tok); end

  def on_unary(*args); end

  def on_undef(*args); end

  def on_unless(*args); end

  def on_unless_mod(*args); end

  def on_until(*args); end

  def on_until_mod(*args); end

  def on_var_alias(*args); end

  def on_var_field(*args); end

  def on_var_ref(*args); end

  def on_vcall(*args); end

  def on_void_stmt(*args); end

  def on_when(*args); end

  def on_while(*args); end

  def on_while_mod(*args); end

  def on_word_add(*args); end

  def on_word_new(*args); end

  def on_words_add(*args); end

  def on_words_beg(tok); end

  def on_words_new(*args); end

  def on_words_sep(tok); end

  def on_xstring_add(*args); end

  def on_xstring_literal(*args); end

  def on_xstring_new(*args); end

  def on_yield(*args); end

  def on_yield0(*args); end

  def on_zsuper(*args); end
end

class Ripper::TokenPattern
  def initialize(pattern); end

  def match(str); end

  def match_list(tokens); end
  MAP = ::T.let(nil, ::T.untyped)
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::CompileError
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::Error
end

class Ripper::TokenPattern::MatchData
  def initialize(tokens, match); end

  def string(n=T.unsafe(nil)); end
end

class Ripper::TokenPattern::MatchData
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern::MatchError
end

class Ripper::TokenPattern
  def self.compile(*arg, **arg1); end
end

class Ripper
  def self.dedent_string(arg, arg1); end

  def self.lex_state_name(arg); end

  def self.token_match(src, pattern); end
end

class Ruby20Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby21Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby22Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby23Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby24Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby25Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby26Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby27Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby30Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby31Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby32Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Ruby33Parser
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

RubyLex = IRB::RubyLex

class RubyLexer
  include ::RubyLexer::SSStackish
  BTOKENS = ::T.let(nil, ::T.untyped)
  EOF = ::T.let(nil, ::T.untyped)
  ESC = ::T.let(nil, ::T.untyped)
  ESCAPES = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  FLOAT_BAD = ::T.let(nil, ::T.untyped)
  HAS_ENC = ::T.let(nil, ::T.untyped)
  IDENT_CHAR = ::T.let(nil, ::T.untyped)
  INT_BIN = ::T.let(nil, ::T.untyped)
  INT_DEC = ::T.let(nil, ::T.untyped)
  INT_DEC2 = ::T.let(nil, ::T.untyped)
  INT_HEX = ::T.let(nil, ::T.untyped)
  INT_OCT = ::T.let(nil, ::T.untyped)
  INT_OCT_BAD = ::T.let(nil, ::T.untyped)
  NUM_BAD = ::T.let(nil, ::T.untyped)
  PERCENT_END = ::T.let(nil, ::T.untyped)
  SIMPLE_RE_META = ::T.let(nil, ::T.untyped)
  SIMPLE_STRING = ::T.let(nil, ::T.untyped)
  SSTRING = ::T.let(nil, ::T.untyped)
  TOKENS = ::T.let(nil, ::T.untyped)
end

module RubyLexer::State::Values
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_ARG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_BEG_ANY = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_CMDARG = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_ENDARG = ::T.let(nil, ::T.untyped)
  EXPR_ENDFN = ::T.let(nil, ::T.untyped)
  EXPR_END_ANY = ::T.let(nil, ::T.untyped)
  EXPR_FITEM = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_LAB = ::T.let(nil, ::T.untyped)
  EXPR_LABEL = ::T.let(nil, ::T.untyped)
  EXPR_LABELED = ::T.let(nil, ::T.untyped)
  EXPR_LIT = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  EXPR_NONE = ::T.let(nil, ::T.untyped)
  EXPR_NUM = ::T.let(nil, ::T.untyped)
  EXPR_PAD = ::T.let(nil, ::T.untyped)
  EXPR_PAR = ::T.let(nil, ::T.untyped)
  STR_DQUOTE = ::T.let(nil, ::T.untyped)
  STR_DSYM = ::T.let(nil, ::T.untyped)
  STR_DWORD = ::T.let(nil, ::T.untyped)
  STR_FUNC_BORING = ::T.let(nil, ::T.untyped)
  STR_FUNC_DEDENT = ::T.let(nil, ::T.untyped)
  STR_FUNC_ESCAPE = ::T.let(nil, ::T.untyped)
  STR_FUNC_EXPAND = ::T.let(nil, ::T.untyped)
  STR_FUNC_INDENT = ::T.let(nil, ::T.untyped)
  STR_FUNC_LABEL = ::T.let(nil, ::T.untyped)
  STR_FUNC_LIST = ::T.let(nil, ::T.untyped)
  STR_FUNC_QWORDS = ::T.let(nil, ::T.untyped)
  STR_FUNC_REGEXP = ::T.let(nil, ::T.untyped)
  STR_FUNC_SYMBOL = ::T.let(nil, ::T.untyped)
  STR_FUNC_TERM = ::T.let(nil, ::T.untyped)
  STR_LABEL = ::T.let(nil, ::T.untyped)
  STR_REGEXP = ::T.let(nil, ::T.untyped)
  STR_SQUOTE = ::T.let(nil, ::T.untyped)
  STR_SSYM = ::T.let(nil, ::T.untyped)
  STR_SWORD = ::T.let(nil, ::T.untyped)
  STR_XQUOTE = ::T.let(nil, ::T.untyped)
end

module RubyLsp
  VERSION = ::T.let(nil, ::T.untyped)
end

class RubyParser
  VERSIONS = ::T.let(nil, ::T.untyped)
end

module RubyParserStuff
  ARG_TYPES = ::T.let(nil, ::T.untyped)
  ENCODING_ORDER = ::T.let(nil, ::T.untyped)
  JUMP_TYPE = ::T.let(nil, ::T.untyped)
  KEEP_COMMENT_TOKENS = ::T.let(nil, ::T.untyped)
  TAB_WIDTH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class RubyParserStuff::Keyword
  WORDLIST = ::T.let(nil, ::T.untyped)
end

class RubyVM::AbstractSyntaxTree::Location
  def first_column(); end

  def first_lineno(); end

  def last_column(); end

  def last_lineno(); end
end

class RubyVM::AbstractSyntaxTree::Location
end

class RubyVM::AbstractSyntaxTree::Node
  def all_tokens(); end

  def locations(); end

  def node_id(); end

  def script_lines(); end

  def source(); end

  def tokens(); end
end

module RubyVM::AbstractSyntaxTree
  def self.node_id_for_backtrace_location(backtrace_location); end
end

class RubyVM::InstructionSequence
  def script_lines(); end
end

class RubyVM::InstructionSequence
  extend ::Bootsnap::CompileCache::ISeq::InstructionSequenceMixin
  def self.compile_file_prism(*arg); end

  def self.compile_parsey(*arg); end

  def self.compile_prism(*arg); end
end

module RubyVM::RJIT
end

module RubyVM::RJIT
  def self.enable(); end

  def self.enabled?(); end
end

module RubyVM::YJIT
  def self.disasm(iseq); end

  def self.exit_locations(); end

  def self.insns_compiled(iseq); end

  def self.log_enabled?(); end

  def self.simulate_oom!(); end

  def self.trace_exit_locations_enabled?(); end
end

class RubyVM
  def self.keep_script_lines(); end

  def self.keep_script_lines=(keep_script_lines); end
end

module SQLite3
  SQLITE_LOADED_VERSION = ::T.let(nil, ::T.untyped)
  SQLITE_PACKAGED_LIBRARIES = ::T.let(nil, ::T.untyped)
  SQLITE_PRECOMPILED_LIBRARIES = ::T.let(nil, ::T.untyped)
  SQLITE_VERSION = ::T.let(nil, ::T.untyped)
  SQLITE_VERSION_NUMBER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_INFO = ::T.let(nil, ::T.untyped)
end

class SQLite3::Blob
end

class SQLite3::Blob
end

module SQLite3::Constants::ColumnType
  BLOB = ::T.let(nil, ::T.untyped)
  FLOAT = ::T.let(nil, ::T.untyped)
  INTEGER = ::T.let(nil, ::T.untyped)
  NULL = ::T.let(nil, ::T.untyped)
  TEXT = ::T.let(nil, ::T.untyped)
end

module SQLite3::Constants::ErrorCode
  ABORT = ::T.let(nil, ::T.untyped)
  AUTH = ::T.let(nil, ::T.untyped)
  BUSY = ::T.let(nil, ::T.untyped)
  CANTOPEN = ::T.let(nil, ::T.untyped)
  CONSTRAINT = ::T.let(nil, ::T.untyped)
  CORRUPT = ::T.let(nil, ::T.untyped)
  DONE = ::T.let(nil, ::T.untyped)
  EMPTY = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  FORMAT = ::T.let(nil, ::T.untyped)
  FULL = ::T.let(nil, ::T.untyped)
  INTERNAL = ::T.let(nil, ::T.untyped)
  INTERRUPT = ::T.let(nil, ::T.untyped)
  IOERR = ::T.let(nil, ::T.untyped)
  LOCKED = ::T.let(nil, ::T.untyped)
  MISMATCH = ::T.let(nil, ::T.untyped)
  MISUSE = ::T.let(nil, ::T.untyped)
  NOLFS = ::T.let(nil, ::T.untyped)
  NOMEM = ::T.let(nil, ::T.untyped)
  NOTADB = ::T.let(nil, ::T.untyped)
  NOTFOUND = ::T.let(nil, ::T.untyped)
  NOTICE = ::T.let(nil, ::T.untyped)
  OK = ::T.let(nil, ::T.untyped)
  PERM = ::T.let(nil, ::T.untyped)
  PROTOCOL = ::T.let(nil, ::T.untyped)
  RANGE = ::T.let(nil, ::T.untyped)
  READONLY = ::T.let(nil, ::T.untyped)
  ROW = ::T.let(nil, ::T.untyped)
  SCHEMA = ::T.let(nil, ::T.untyped)
  TOOBIG = ::T.let(nil, ::T.untyped)
  WARNING = ::T.let(nil, ::T.untyped)
end

module SQLite3::Constants::Open
  AUTOPROXY = ::T.let(nil, ::T.untyped)
  CREATE = ::T.let(nil, ::T.untyped)
  DELETEONCLOSE = ::T.let(nil, ::T.untyped)
  EXCLUSIVE = ::T.let(nil, ::T.untyped)
  FULLMUTEX = ::T.let(nil, ::T.untyped)
  MAIN_DB = ::T.let(nil, ::T.untyped)
  MAIN_JOURNAL = ::T.let(nil, ::T.untyped)
  MASTER_JOURNAL = ::T.let(nil, ::T.untyped)
  MEMORY = ::T.let(nil, ::T.untyped)
  NOMUTEX = ::T.let(nil, ::T.untyped)
  PRIVATECACHE = ::T.let(nil, ::T.untyped)
  READONLY = ::T.let(nil, ::T.untyped)
  READWRITE = ::T.let(nil, ::T.untyped)
  SHAREDCACHE = ::T.let(nil, ::T.untyped)
  SUBJOURNAL = ::T.let(nil, ::T.untyped)
  SUPER_JOURNAL = ::T.let(nil, ::T.untyped)
  TEMP_DB = ::T.let(nil, ::T.untyped)
  TEMP_JOURNAL = ::T.let(nil, ::T.untyped)
  TRANSIENT_DB = ::T.let(nil, ::T.untyped)
  URI = ::T.let(nil, ::T.untyped)
  WAL = ::T.let(nil, ::T.untyped)
end

module SQLite3::Constants::Open
end

module SQLite3::Constants::Optimize
  ANALYZE_TABLES = ::T.let(nil, ::T.untyped)
  CHECK_ALL_TABLES = ::T.let(nil, ::T.untyped)
  DEBUG = ::T.let(nil, ::T.untyped)
  DEFAULT = ::T.let(nil, ::T.untyped)
  LIMIT_ANALYZE = ::T.let(nil, ::T.untyped)
end

module SQLite3::Constants::Status
  MALLOC_COUNT = ::T.let(nil, ::T.untyped)
  MALLOC_SIZE = ::T.let(nil, ::T.untyped)
  MEMORY_USED = ::T.let(nil, ::T.untyped)
  PAGECACHE_OVERFLOW = ::T.let(nil, ::T.untyped)
  PAGECACHE_SIZE = ::T.let(nil, ::T.untyped)
  PAGECACHE_USED = ::T.let(nil, ::T.untyped)
  PARSER_STACK = ::T.let(nil, ::T.untyped)
  SCRATCH_OVERFLOW = ::T.let(nil, ::T.untyped)
  SCRATCH_SIZE = ::T.let(nil, ::T.untyped)
  SCRATCH_USED = ::T.let(nil, ::T.untyped)
end

module SQLite3::Constants::TextRep
  ANY = ::T.let(nil, ::T.untyped)
  DETERMINISTIC = ::T.let(nil, ::T.untyped)
  UTF16 = ::T.let(nil, ::T.untyped)
  UTF16BE = ::T.let(nil, ::T.untyped)
  UTF16LE = ::T.let(nil, ::T.untyped)
  UTF8 = ::T.let(nil, ::T.untyped)
end

module SQLite3::Pragmas
  AUTO_VACUUM_MODES = ::T.let(nil, ::T.untyped)
  ENCODINGS = ::T.let(nil, ::T.untyped)
  JOURNAL_MODES = ::T.let(nil, ::T.untyped)
  LOCKING_MODES = ::T.let(nil, ::T.untyped)
  SYNCHRONOUS_MODES = ::T.let(nil, ::T.untyped)
  TEMP_STORE_MODES = ::T.let(nil, ::T.untyped)
  WAL_CHECKPOINTS = ::T.let(nil, ::T.untyped)
end

module Sass
  ROOT_DIR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sass::Engine
  COMMENT_CHAR = ::T.let(nil, ::T.untyped)
  CONTENT_RE = ::T.let(nil, ::T.untyped)
  CSS_COMMENT_CHAR = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  DIRECTIVES = ::T.let(nil, ::T.untyped)
  DIRECTIVE_CHAR = ::T.let(nil, ::T.untyped)
  ESCAPE_CHAR = ::T.let(nil, ::T.untyped)
  FUNCTION_RE = ::T.let(nil, ::T.untyped)
  MIXIN_DEFINITION_CHAR = ::T.let(nil, ::T.untyped)
  MIXIN_DEF_RE = ::T.let(nil, ::T.untyped)
  MIXIN_INCLUDE_CHAR = ::T.let(nil, ::T.untyped)
  MIXIN_INCLUDE_RE = ::T.let(nil, ::T.untyped)
  PROPERTY_CHAR = ::T.let(nil, ::T.untyped)
  PROPERTY_OLD = ::T.let(nil, ::T.untyped)
  SASS_COMMENT_CHAR = ::T.let(nil, ::T.untyped)
  SASS_LOUD_COMMENT_CHAR = ::T.let(nil, ::T.untyped)
end

module Sass::Features
  KNOWN_FEATURES = ::T.let(nil, ::T.untyped)
end

class Sass::Importers::Filesystem
  REDUNDANT_DIRECTORY = ::T.let(nil, ::T.untyped)
end

module Sass::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sass::Rails::SassImporter::Globbing
  GLOB = ::T.let(nil, ::T.untyped)
end

class Sass::SCSS::Parser
  DIRECTIVES = ::T.let(nil, ::T.untyped)
  EXPR_NAMES = ::T.let(nil, ::T.untyped)
  NEWLINE = ::T.let(nil, ::T.untyped)
  PREFIXED_DIRECTIVES = ::T.let(nil, ::T.untyped)
  TOK_NAMES = ::T.let(nil, ::T.untyped)
end

module Sass::SCSS::RX
  ANY = ::T.let(nil, ::T.untyped)
  CDC = ::T.let(nil, ::T.untyped)
  CDO = ::T.let(nil, ::T.untyped)
  COMMENT = ::T.let(nil, ::T.untyped)
  DASHMATCH = ::T.let(nil, ::T.untyped)
  DOMAIN = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  FUNCTION = ::T.let(nil, ::T.untyped)
  GREATER = ::T.let(nil, ::T.untyped)
  H = ::T.let(nil, ::T.untyped)
  HASH = ::T.let(nil, ::T.untyped)
  HEXCOLOR = ::T.let(nil, ::T.untyped)
  IDENT = ::T.let(nil, ::T.untyped)
  IDENT_HYPHEN_INTERP = ::T.let(nil, ::T.untyped)
  IDENT_START = ::T.let(nil, ::T.untyped)
  IMPORTANT = ::T.let(nil, ::T.untyped)
  INCLUDES = ::T.let(nil, ::T.untyped)
  INTERP_START = ::T.let(nil, ::T.untyped)
  NAME = ::T.let(nil, ::T.untyped)
  NL = ::T.let(nil, ::T.untyped)
  NMCHAR = ::T.let(nil, ::T.untyped)
  NMSTART = ::T.let(nil, ::T.untyped)
  NONASCII = ::T.let(nil, ::T.untyped)
  NOT = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  OPTIONAL = ::T.let(nil, ::T.untyped)
  PERCENTAGE = ::T.let(nil, ::T.untyped)
  PLUS = ::T.let(nil, ::T.untyped)
  PREFIXMATCH = ::T.let(nil, ::T.untyped)
  RANGE = ::T.let(nil, ::T.untyped)
  S = ::T.let(nil, ::T.untyped)
  SINGLE_LINE_COMMENT = ::T.let(nil, ::T.untyped)
  STATIC_COMPONENT = ::T.let(nil, ::T.untyped)
  STATIC_SELECTOR = ::T.let(nil, ::T.untyped)
  STATIC_VALUE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  STRING1 = ::T.let(nil, ::T.untyped)
  STRING1_NOINTERP = ::T.let(nil, ::T.untyped)
  STRING2 = ::T.let(nil, ::T.untyped)
  STRING2_NOINTERP = ::T.let(nil, ::T.untyped)
  STRING_NOINTERP = ::T.let(nil, ::T.untyped)
  SUBSTRINGMATCH = ::T.let(nil, ::T.untyped)
  SUFFIXMATCH = ::T.let(nil, ::T.untyped)
  TILDE = ::T.let(nil, ::T.untyped)
  UNICODE = ::T.let(nil, ::T.untyped)
  UNICODERANGE = ::T.let(nil, ::T.untyped)
  UNIT = ::T.let(nil, ::T.untyped)
  UNITLESS_NUMBER = ::T.let(nil, ::T.untyped)
  URI = ::T.let(nil, ::T.untyped)
  URL = ::T.let(nil, ::T.untyped)
  URLCHAR = ::T.let(nil, ::T.untyped)
  URL_PREFIX = ::T.let(nil, ::T.untyped)
  VARIABLE = ::T.let(nil, ::T.untyped)
  W = ::T.let(nil, ::T.untyped)
end

class Sass::SCSS::StaticParser
  PREFIXED_SELECTOR_PSEUDO_CLASSES = ::T.let(nil, ::T.untyped)
  SELECTOR_PSEUDO_CLASSES = ::T.let(nil, ::T.untyped)
  SELECTOR_PSEUDO_ELEMENTS = ::T.let(nil, ::T.untyped)
end

module Sass::Script
  CONST_RENAMES = ::T.let(nil, ::T.untyped)
  MATCH = ::T.let(nil, ::T.untyped)
  VALIDATE = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Functions::EvaluationContext
  TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Lexer
  IDENT_OP_NAMES = ::T.let(nil, ::T.untyped)
  OPERATORS = ::T.let(nil, ::T.untyped)
  OPERATORS_REVERSE = ::T.let(nil, ::T.untyped)
  OP_NAMES = ::T.let(nil, ::T.untyped)
  PARSEABLE_NUMBER = ::T.let(nil, ::T.untyped)
  REGULAR_EXPRESSIONS = ::T.let(nil, ::T.untyped)
  STRING_REGULAR_EXPRESSIONS = ::T.let(nil, ::T.untyped)
  TOKEN_NAMES = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Parser
  ASSOCIATIVE = ::T.let(nil, ::T.untyped)
  EXPR_NAMES = ::T.let(nil, ::T.untyped)
  PRECEDENCE = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Value::Bool
  FALSE = ::T.let(nil, ::T.untyped)
  TRUE = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Value::Color
  ALTERNATE_COLOR_NAMES = ::T.let(nil, ::T.untyped)
  COLOR_NAMES = ::T.let(nil, ::T.untyped)
  COLOR_NAMES_REVERSE = ::T.let(nil, ::T.untyped)
end

module Sass::Script::Value::Helpers
  VALID_UNIT = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Value::Null
  NULL = ::T.let(nil, ::T.untyped)
end

class Sass::Script::Value::Number
  CONVERSION_TABLE = ::T.let(nil, ::T.untyped)
  MUTUALLY_CONVERTIBLE = ::T.let(nil, ::T.untyped)
  NO_UNITS = ::T.let(nil, ::T.untyped)
  OPERATIONS = ::T.let(nil, ::T.untyped)
end

module Sass::Selector
  SPECIFICITY_BASE = ::T.let(nil, ::T.untyped)
end

class Sass::Selector::Pseudo
  ACTUALLY_ELEMENTS = ::T.let(nil, ::T.untyped)
end

class Sass::Tree::RuleNode
  PARENT = ::T.let(nil, ::T.untyped)
end

class Sass::Tree::Visitors::CheckNesting
  CONTROL_NODES = ::T.let(nil, ::T.untyped)
  INVALID_IMPORT_PARENTS = ::T.let(nil, ::T.untyped)
  SCRIPT_NODES = ::T.let(nil, ::T.untyped)
  VALID_EXTEND_PARENTS = ::T.let(nil, ::T.untyped)
  VALID_FUNCTION_CHILDREN = ::T.let(nil, ::T.untyped)
  VALID_PROP_CHILDREN = ::T.let(nil, ::T.untyped)
  VALID_PROP_PARENTS = ::T.let(nil, ::T.untyped)
end

class Sass::Tree::Visitors::ToCss
  NEWLINE = ::T.let(nil, ::T.untyped)
end

module Sass::Util
  ATOMIC_WRITE_MUTEX = ::T.let(nil, ::T.untyped)
  BASE64_DIGITS = ::T.let(nil, ::T.untyped)
  BASE64_DIGIT_MAP = ::T.let(nil, ::T.untyped)
  CHARSET_REGEXP = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_VERSION_COMPONENTS = ::T.let(nil, ::T.untyped)
  UTF_16BE_BOM = ::T.let(nil, ::T.untyped)
  UTF_16LE_BOM = ::T.let(nil, ::T.untyped)
  UTF_8_BOM = ::T.let(nil, ::T.untyped)
  VLQ_BASE = ::T.let(nil, ::T.untyped)
  VLQ_BASE_MASK = ::T.let(nil, ::T.untyped)
  VLQ_BASE_SHIFT = ::T.let(nil, ::T.untyped)
  VLQ_CONTINUATION_BIT = ::T.let(nil, ::T.untyped)
end

module SassC
  VERSION = ::T.let(nil, ::T.untyped)
end

class SassC::Engine
  OUTPUT_STYLES = ::T.let(nil, ::T.untyped)
end

module SassC::Native
  SassInputStyle = ::T.let(nil, ::T.untyped)
  SassOutputStyle = ::T.let(nil, ::T.untyped)
  SassSeparator = ::T.let(nil, ::T.untyped)
  SassTag = ::T.let(nil, ::T.untyped)
end

module SassC::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

class SassC::Rails::Importer
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  GLOB = ::T.let(nil, ::T.untyped)
  PREFIXS = ::T.let(nil, ::T.untyped)
end

class SassC::Script::Value::Bool
  FALSE = ::T.let(nil, ::T.untyped)
  TRUE = ::T.let(nil, ::T.untyped)
end

class SassC::Script::Value::Number
  CONVERSION_TABLE = ::T.let(nil, ::T.untyped)
  MUTUALLY_CONVERTIBLE = ::T.let(nil, ::T.untyped)
  NO_UNITS = ::T.let(nil, ::T.untyped)
  OPERATIONS = ::T.let(nil, ::T.untyped)
end

module SassC::Script::ValueConversion
  SEPARATORS = ::T.let(nil, ::T.untyped)
end

module SassC::Util
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_VERSION_COMPONENTS = ::T.let(nil, ::T.untyped)
end

ScanError = StringScanner::Error

module SecureRandom
  BASE36_ALPHABET = ::T.let(nil, ::T.untyped)
  BASE58_ALPHABET = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver
  VERSION = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::BiDi
  def add_callback(event, &arg); end

  def callbacks(); end

  def close(); end

  def error_message(message); end

  def initialize(url:); end

  def remove_callback(event, id); end

  def send_cmd(method, **params); end

  def session(); end
end

class Selenium::WebDriver::BiDi::BrowsingContext
  def close(context_id: T.unsafe(nil)); end

  def create(type: T.unsafe(nil), context_id: T.unsafe(nil)); end

  def initialize(bridge); end

  def navigate(url, context_id: T.unsafe(nil)); end

  def reload(context_id: T.unsafe(nil), ignore_cache: T.unsafe(nil)); end

  def traverse_history(delta, context_id: T.unsafe(nil)); end
  READINESS_STATE = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::BiDi::BrowsingContext
end

class Selenium::WebDriver::BiDi::LogHandler
  def add_message_handler(type); end

  def initialize(bidi); end

  def remove_message_handler(id); end
end

class Selenium::WebDriver::BiDi::LogHandler::ConsoleLogEntry
  def args(); end

  def args=(_); end

  def initialize(**kwargs); end

  def level(); end

  def level=(_); end

  def method(); end

  def method=(_); end

  def source(); end

  def source=(_); end

  def stack_trace(); end

  def stack_trace=(_); end

  def text(); end

  def text=(_); end

  def timestamp(); end

  def timestamp=(_); end

  def type(); end

  def type=(_); end
end

class Selenium::WebDriver::BiDi::LogHandler::ConsoleLogEntry
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end

  def self.new(*arg); end
end

class Selenium::WebDriver::BiDi::LogHandler::JavaScriptLogEntry
  def initialize(**kwargs); end

  def level(); end

  def level=(_); end

  def source(); end

  def source=(_); end

  def stack_trace(); end

  def stack_trace=(_); end

  def text(); end

  def text=(_); end

  def timestamp(); end

  def timestamp=(_); end

  def type(); end

  def type=(_); end
end

class Selenium::WebDriver::BiDi::LogHandler::JavaScriptLogEntry
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end

  def self.new(*arg); end
end

class Selenium::WebDriver::BiDi::LogHandler
end

class Selenium::WebDriver::BiDi::LogInspector
  def initialize(driver, browsing_context_ids=T.unsafe(nil)); end

  def on_console_entry(filter_by=T.unsafe(nil), &block); end

  def on_javascript_exception(&block); end

  def on_javascript_log(filter_by=T.unsafe(nil), &block); end

  def on_log(filter_by=T.unsafe(nil), &arg); end
  EVENTS = ::T.let(nil, ::T.untyped)
  LOG_LEVEL = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::BiDi::LogInspector
end

class Selenium::WebDriver::BiDi::Network
  def add_intercept(phases: T.unsafe(nil), contexts: T.unsafe(nil), url_patterns: T.unsafe(nil)); end

  def continue_with_auth(request_id, username, password); end

  def continue_with_request(**args); end

  def initialize(bidi); end

  def on(event, &arg); end

  def remove_intercept(intercept); end
  EVENTS = ::T.let(nil, ::T.untyped)
  PHASES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::BiDi::Network
end

class Selenium::WebDriver::BiDi::Session
  def initialize(bidi); end

  def status(); end

  def subscribe(events, browsing_contexts=T.unsafe(nil)); end

  def unsubscribe(events, browsing_contexts=T.unsafe(nil)); end
end

class Selenium::WebDriver::BiDi::Session::Status
  def initialize(**kwargs); end

  def message(); end

  def message=(_); end

  def ready(); end

  def ready=(_); end
end

class Selenium::WebDriver::BiDi::Session::Status
  def self.[](*arg); end

  def self.keyword_init?(); end

  def self.members(); end

  def self.new(*arg); end
end

class Selenium::WebDriver::BiDi::Session
end

class Selenium::WebDriver::BiDi::Struct
end

class Selenium::WebDriver::BiDi::Struct
  def self.camel_to_snake(camel_str); end

  def self.new(*args, &block); end
end

class Selenium::WebDriver::BiDi
end

class Selenium::WebDriver::ChildProcess
  POLL_INTERVAL = ::T.let(nil, ::T.untyped)
  SIGKILL = ::T.let(nil, ::T.untyped)
  SIGTERM = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Chrome::Driver
  include ::Selenium::WebDriver::LocalDriver
  def initialize(options: T.unsafe(nil), service: T.unsafe(nil), url: T.unsafe(nil), **opts); end
end

class Selenium::WebDriver::Chrome::Driver
end

module Selenium::WebDriver::Chrome::Features
  include ::Selenium::WebDriver::Chromium::Features
  def command_list(); end

  def commands(command); end
  CHROME_COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Chrome::Features
end

class Selenium::WebDriver::Chrome::Options
  BROWSER = ::T.let(nil, ::T.untyped)
  KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Chrome::Options
end

class Selenium::WebDriver::Chrome::Profile
end

class Selenium::WebDriver::Chrome::Profile
end

class Selenium::WebDriver::Chrome::Service
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DRIVER_PATH_ENV_KEY = ::T.let(nil, ::T.untyped)
  EXECUTABLE = ::T.let(nil, ::T.untyped)
  SHUTDOWN_SUPPORTED = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Chrome::Service
end

module Selenium::WebDriver::Chrome
  def self.path(); end

  def self.path=(path); end
end

module Selenium::WebDriver::Chromium
end

class Selenium::WebDriver::Chromium::Driver
  def devtools_url(); end

  def devtools_version(); end
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Chromium::Driver
end

module Selenium::WebDriver::Chromium::Features
  def available_log_types(); end

  def cast_issue_message(); end

  def cast_sink_to_use=(name); end

  def cast_sinks(); end

  def delete_network_conditions(); end

  def launch_app(id); end

  def log(type); end

  def network_conditions(); end

  def network_conditions=(conditions); end

  def send_command(command_params); end

  def set_permission(name, value); end

  def start_cast_desktop_mirroring(name); end

  def start_cast_tab_mirroring(name); end

  def stop_casting(name); end
  CHROMIUM_COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Chromium::Features
end

class Selenium::WebDriver::Chromium::Options
  def add_argument(arg); end

  def add_emulation(**opts); end

  def add_encoded_extension(encoded); end

  def add_extension(path); end

  def add_preference(name, value); end

  def binary_path(); end

  def camelize?(key); end

  def enable_android(package: T.unsafe(nil), serial_number: T.unsafe(nil), use_running_app: T.unsafe(nil), activity: T.unsafe(nil)); end

  def encode_extension(path); end

  def extensions(); end

  def extensions=(extensions); end

  def initialize(profile: T.unsafe(nil), **opts); end

  def logging_prefs(); end

  def logging_prefs=(logging_prefs); end

  def process_browser_options(browser_options); end

  def profile(); end

  def profile=(profile); end

  def validate_extension(path); end
  CAPABILITIES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Chromium::Options
end

class Selenium::WebDriver::Chromium::Profile
  include ::Selenium::WebDriver::ProfileHelper
  def [](key); end

  def []=(key, value); end

  def add_encoded_extension(encoded); end

  def add_extension(path); end

  def directory(); end

  def initialize(model=T.unsafe(nil)); end

  def layout_on_disk(); end
end

class Selenium::WebDriver::Chromium::Profile
  extend ::Selenium::WebDriver::ProfileHelper::ClassMethods
end

module Selenium::WebDriver::Chromium
end

class Selenium::WebDriver::DevTools
  def callbacks(); end

  def close(); end

  def initialize(url:); end

  def method_missing(method, *_args); end

  def send_cmd(method, **params); end
end

class Selenium::WebDriver::DevTools::ConsoleEvent
  def args(); end

  def args=(args); end

  def initialize(type:, timestamp:, args:); end

  def timestamp(); end

  def timestamp=(timestamp); end

  def type(); end

  def type=(type); end
end

class Selenium::WebDriver::DevTools::ConsoleEvent
end

class Selenium::WebDriver::DevTools::ExceptionEvent
  def description(); end

  def description=(description); end

  def initialize(description:, timestamp:, stacktrace:); end

  def stacktrace(); end

  def stacktrace=(stacktrace); end

  def timestamp(); end

  def timestamp=(timestamp); end
end

class Selenium::WebDriver::DevTools::ExceptionEvent
end

class Selenium::WebDriver::DevTools::MutationEvent
  def attribute_name(); end

  def attribute_name=(attribute_name); end

  def current_value(); end

  def current_value=(current_value); end

  def element(); end

  def element=(element); end

  def initialize(element:, attribute_name:, current_value:, old_value:); end

  def old_value(); end

  def old_value=(old_value); end
end

class Selenium::WebDriver::DevTools::MutationEvent
end

class Selenium::WebDriver::DevTools::NetworkInterceptor
  def initialize(devtools); end

  def intercept(&block); end
  CANNOT_GET_BODY_ON_REDIRECT_ERROR_CODE = ::T.let(nil, ::T.untyped)
  INVALID_INTERCEPTION_ID_ERROR_CODE = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::DevTools::NetworkInterceptor
end

class Selenium::WebDriver::DevTools::PinnedScript
  def callable(); end

  def devtools_identifier(); end

  def devtools_identifier=(devtools_identifier); end

  def initialize(script); end

  def key(); end

  def key=(key); end

  def remove(); end

  def script(); end

  def script=(script); end

  def to_json(*arg); end
end

class Selenium::WebDriver::DevTools::PinnedScript
end

class Selenium::WebDriver::DevTools::Request
  def ==(other); end

  def headers(); end

  def headers=(headers); end

  def id(); end

  def initialize(id:, url:, method:, headers:, post_data:); end

  def method(); end

  def method=(method); end

  def post_data(); end

  def post_data=(post_data); end

  def url(); end

  def url=(url); end
end

class Selenium::WebDriver::DevTools::Request
  def self.from(id, params); end
end

class Selenium::WebDriver::DevTools::Response
  def ==(other); end

  def body(); end

  def body=(body); end

  def code(); end

  def code=(code); end

  def headers(); end

  def headers=(headers); end

  def id(); end

  def initialize(id:, code:, body:, headers:); end
end

class Selenium::WebDriver::DevTools::Response
  def self.from(id, encoded_body, params); end
end

class Selenium::WebDriver::DevTools
end

module Selenium::WebDriver::DriverExtensions::HasLogEvents
  KINDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Edge
end

class Selenium::WebDriver::Edge::Driver
  include ::Selenium::WebDriver::LocalDriver
  def initialize(options: T.unsafe(nil), service: T.unsafe(nil), url: T.unsafe(nil), **opts); end
end

class Selenium::WebDriver::Edge::Driver
end

module Selenium::WebDriver::Edge::Features
  include ::Selenium::WebDriver::Chromium::Features
  def command_list(); end

  def commands(command); end
  EDGE_COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Edge::Features
end

class Selenium::WebDriver::Edge::Options
  def webview2!(); end
  BROWSER = ::T.let(nil, ::T.untyped)
  KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Edge::Options
end

class Selenium::WebDriver::Edge::Profile
end

class Selenium::WebDriver::Edge::Profile
end

class Selenium::WebDriver::Edge::Service
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DRIVER_PATH_ENV_KEY = ::T.let(nil, ::T.untyped)
  EXECUTABLE = ::T.let(nil, ::T.untyped)
  SHUTDOWN_SUPPORTED = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Edge::Service
end

module Selenium::WebDriver::Edge
  def self.path(); end

  def self.path=(path); end
end

class Selenium::WebDriver::Element
  ELEMENT_KEY = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Error
  ERROR_URL = ::T.let(nil, ::T.untyped)
  SUPPORT_MSG = ::T.let(nil, ::T.untyped)
  URLS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Error::ServerError
  def initialize(response); end
end

class Selenium::WebDriver::Error::ServerError
end

class Selenium::WebDriver::FedCM::Account
  LOGIN_STATE_SIGNIN = ::T.let(nil, ::T.untyped)
  LOGIN_STATE_SIGNUP = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::FedCM::Dialog
  DIALOG_TYPE_ACCOUNT_LIST = ::T.let(nil, ::T.untyped)
  DIALOG_TYPE_AUTO_REAUTH = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Firefox
  DEFAULT_ASSUME_UNTRUSTED_ISSUER = ::T.let(nil, ::T.untyped)
  DEFAULT_LOAD_NO_FOCUS_LIB = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DEFAULT_SECURE_SSL = ::T.let(nil, ::T.untyped)
  DEVTOOLS_VERSION = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Driver
  include ::Selenium::WebDriver::LocalDriver
  def initialize(options: T.unsafe(nil), service: T.unsafe(nil), url: T.unsafe(nil), **opts); end
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Driver
end

class Selenium::WebDriver::Firefox::Extension
  def initialize(path); end

  def write_to(extensions_dir); end
  NAMESPACE = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Extension
end

module Selenium::WebDriver::Firefox::Features
  def command_list(); end

  def commands(command); end

  def context(); end

  def context=(context); end

  def full_screenshot(); end

  def install_addon(path, temporary); end

  def uninstall_addon(id); end
  FIREFOX_COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Firefox::Features
end

class Selenium::WebDriver::Firefox::Options
  def add_argument(arg); end

  def add_preference(name, value); end

  def debugger_address(); end

  def debugger_address=(debugger_address); end

  def enable_android(package: T.unsafe(nil), serial_number: T.unsafe(nil), activity: T.unsafe(nil), intent_arguments: T.unsafe(nil)); end

  def initialize(log_level: T.unsafe(nil), **opts); end

  def log_level(); end

  def log_level=(level); end

  def profile(); end

  def profile=(profile); end
  BROWSER = ::T.let(nil, ::T.untyped)
  CAPABILITIES = ::T.let(nil, ::T.untyped)
  KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Options
end

class Selenium::WebDriver::Firefox::Profile
  include ::Selenium::WebDriver::ProfileHelper
  def []=(key, value); end

  def add_extension(path, name=T.unsafe(nil)); end

  def as_json(); end

  def initialize(model=T.unsafe(nil)); end

  def layout_on_disk(); end

  def load_no_focus_lib=(load_no_focus_lib); end

  def log_file(); end

  def log_file=(file); end

  def name(); end

  def port=(port); end

  def proxy=(proxy); end

  def secure_ssl=(secure_ssl); end
  DEFAULT_PREFERENCES = ::T.let(nil, ::T.untyped)
  LOCK_FILES = ::T.let(nil, ::T.untyped)
  VALID_PREFERENCE_TYPES = ::T.let(nil, ::T.untyped)
  WEBDRIVER_PREFS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Profile
  extend ::Selenium::WebDriver::ProfileHelper::ClassMethods
  def self.decoded(json); end

  def self.from_name(name); end

  def self.ini(); end
end

class Selenium::WebDriver::Firefox::ProfilesIni
  def [](name); end

  def refresh(); end
end

class Selenium::WebDriver::Firefox::ProfilesIni
end

class Selenium::WebDriver::Firefox::Service
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DRIVER_PATH_ENV_KEY = ::T.let(nil, ::T.untyped)
  EXECUTABLE = ::T.let(nil, ::T.untyped)
  SHUTDOWN_SUPPORTED = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Firefox::Service
end

module Selenium::WebDriver::Firefox::Util
end

module Selenium::WebDriver::Firefox::Util
  def self.app_data_path(); end

  def self.stringified?(str); end
end

module Selenium::WebDriver::Firefox
  def self.path(); end

  def self.path=(path); end
end

module Selenium::WebDriver::IE
end

class Selenium::WebDriver::IE::Driver
  include ::Selenium::WebDriver::LocalDriver
  def initialize(options: T.unsafe(nil), service: T.unsafe(nil), url: T.unsafe(nil), **opts); end
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::IE::Driver
end

module Selenium::WebDriver::IE::Features
  def command_list(); end

  def commands(command); end
end

module Selenium::WebDriver::IE::Features
end

class Selenium::WebDriver::IE::Options
  def add_argument(arg); end

  def args(); end
  BROWSER = ::T.let(nil, ::T.untyped)
  CAPABILITIES = ::T.let(nil, ::T.untyped)
  KEY = ::T.let(nil, ::T.untyped)
  SCROLL_BOTTOM = ::T.let(nil, ::T.untyped)
  SCROLL_TOP = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::IE::Options
end

class Selenium::WebDriver::IE::Service
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DRIVER_PATH_ENV_KEY = ::T.let(nil, ::T.untyped)
  EXECUTABLE = ::T.let(nil, ::T.untyped)
  SHUTDOWN_SUPPORTED = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::IE::Service
end

module Selenium::WebDriver::IE
end

module Selenium::WebDriver::Interactions
  KEY = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  WHEEL = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::KeyInput
  SUBTYPES = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Interactions::PointerEventProperties
  VALID = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerInput
  KIND = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerMove
  ORIGINS = ::T.let(nil, ::T.untyped)
  POINTER = ::T.let(nil, ::T.untyped)
  VIEWPORT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Interactions::PointerPress
  BUTTONS = ::T.let(nil, ::T.untyped)
  DIRECTIONS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Keys
  KEYS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Manager
  SECONDS_PER_DAY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Options
  GRID_OPTIONS = ::T.let(nil, ::T.untyped)
  W3C_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::PortProber
  IGNORED_ERRORS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Proxy
  ALLOWED = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Remote
end

class Selenium::WebDriver::Remote::BiDiBridge
end

class Selenium::WebDriver::Remote::BiDiBridge
end

class Selenium::WebDriver::Remote::Bridge
  include ::Selenium::WebDriver::Atoms
  def accept_alert(); end

  def action(async: T.unsafe(nil), devices: T.unsafe(nil), duration: T.unsafe(nil)); end

  def actions(async: T.unsafe(nil), devices: T.unsafe(nil), duration: T.unsafe(nil)); end

  def active_element(); end

  def add_cookie(cookie); end

  def add_credential(credential, id); end

  def add_virtual_authenticator(options); end

  def alert=(keys); end

  def alert_text(); end

  def bidi(); end

  def browser(); end

  def cancel_fedcm_dialog(); end

  def capabilities(); end

  def clear_element(element); end

  def clear_local_storage(); end

  def clear_session_storage(); end

  def click_element(element); end

  def click_fedcm_dialog_button(); end

  def close(); end

  def command_list(); end

  def cookie(name); end

  def cookies(); end

  def create_session(capabilities); end

  def credentials(authenticator_id); end

  def delete_all_cookies(); end

  def delete_cookie(name); end

  def dismiss_alert(); end

  def element_aria_label(element); end

  def element_aria_role(element); end

  def element_attribute(element, name); end

  def element_displayed?(element); end

  def element_dom_attribute(element, name); end

  def element_enabled?(element); end

  def element_location(element); end

  def element_location_once_scrolled_into_view(element); end

  def element_property(element, name); end

  def element_rect(element); end

  def element_screenshot(element); end

  def element_selected?(element); end

  def element_size(element); end

  def element_tag_name(element); end

  def element_text(element); end

  def element_value(element); end

  def element_value_of_css_property(element, prop); end

  def execute_async_script(script, *args); end

  def execute_script(script, *args); end

  def fedcm_account_list(); end

  def fedcm_delay(enabled); end

  def fedcm_dialog_type(); end

  def fedcm_subtitle(); end

  def fedcm_title(); end

  def file_detector(); end

  def file_detector=(file_detector); end

  def find_element_by(how, what, parent_ref=T.unsafe(nil)); end

  def find_elements_by(how, what, parent_ref=T.unsafe(nil)); end

  def full_screen_window(); end

  def get(url); end

  def go_back(); end

  def go_forward(); end

  def http(); end

  def http=(http); end

  def initialize(url:, http_client: T.unsafe(nil)); end

  def local_storage_item(key, value=T.unsafe(nil)); end

  def local_storage_keys(); end

  def local_storage_size(); end

  def manage(); end

  def maximize_window(handle=T.unsafe(nil)); end

  def minimize_window(); end

  def new_window(type); end

  def page_source(); end

  def print_page(options=T.unsafe(nil)); end

  def quit(); end

  def refresh(); end

  def release_actions(); end

  def remove_all_credentials(authenticator_id); end

  def remove_credential(credential_id, authenticator_id); end

  def remove_local_storage_item(key); end

  def remove_session_storage_item(key); end

  def remove_virtual_authenticator(id); end

  def reposition_window(x, y); end

  def reset_fedcm_cooldown(); end

  def resize_window(width, height, handle=T.unsafe(nil)); end

  def screenshot(); end

  def select_fedcm_account(index); end

  def send_actions(data); end

  def send_keys_to_element(element, keys); end

  def session_id(); end

  def session_storage_item(key, value=T.unsafe(nil)); end

  def session_storage_keys(); end

  def session_storage_size(); end

  def set_window_rect(x: T.unsafe(nil), y: T.unsafe(nil), width: T.unsafe(nil), height: T.unsafe(nil)); end

  def shadow_root(element); end

  def status(); end

  def submit_element(element); end

  def switch_to_active_element(); end

  def switch_to_default_content(); end

  def switch_to_frame(id); end

  def switch_to_parent_frame(); end

  def switch_to_window(name); end

  def timeouts(); end

  def timeouts=(timeouts); end

  def title(); end

  def url(); end

  def user_verified(verified, authenticator_id); end

  def window_handle(); end

  def window_handles(); end

  def window_position(); end

  def window_rect(); end

  def window_size(handle=T.unsafe(nil)); end
  COMMANDS = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUIT_ERRORS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Bridge::LocatorConverter
  def convert(how, what); end
  ESCAPE_CSS_REGEXP = ::T.let(nil, ::T.untyped)
  UNICODE_CODE_POINT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Bridge::LocatorConverter
end

class Selenium::WebDriver::Remote::Bridge
  def self.add_command(name, verb, url, &arg); end

  def self.element_class(); end

  def self.element_class=(element_class); end

  def self.extra_commands(); end

  def self.locator_converter(); end

  def self.locator_converter=(locator_converter); end
end

class Selenium::WebDriver::Remote::Capabilities
  def ==(other); end

  def [](key); end

  def []=(key, value); end

  def accept_insecure_certs(); end

  def accept_insecure_certs=(value); end

  def as_json(*arg); end

  def browser_name(); end

  def browser_name=(value); end

  def browser_version(); end

  def browser_version=(value); end

  def capabilities(); end

  def eql?(other); end

  def implicit_timeout(); end

  def implicit_timeout=(timeout); end

  def initialize(opts=T.unsafe(nil)); end

  def merge!(other); end

  def page_load_strategy(); end

  def page_load_strategy=(value); end

  def page_load_timeout(); end

  def page_load_timeout=(timeout); end

  def platform_name(); end

  def platform_name=(value); end

  def proxy(); end

  def proxy=(proxy); end

  def remote_session_id(); end

  def remote_session_id=(value); end

  def script_timeout(); end

  def script_timeout=(timeout); end

  def set_window_rect(); end

  def set_window_rect=(value); end

  def strict_file_interactability(); end

  def strict_file_interactability=(value); end

  def timeouts(); end

  def timeouts=(timeouts); end

  def to_json(*arg); end

  def unhandled_prompt_behavior(); end

  def unhandled_prompt_behavior=(value); end

  def web_socket_url(); end

  def web_socket_url=(value); end
  KNOWN = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Capabilities
  def self.always_match(capabilities); end

  def self.camel_case(str_or_sym); end

  def self.first_match(*capabilities); end

  def self.json_create(data); end
end

class Selenium::WebDriver::Remote::Driver
  include ::Selenium::WebDriver::DriverExtensions::UploadsFiles
  include ::Selenium::WebDriver::DriverExtensions::HasSessionId
  include ::Selenium::WebDriver::DriverExtensions::HasFileDownloads
  def initialize(capabilities: T.unsafe(nil), options: T.unsafe(nil), service: T.unsafe(nil), url: T.unsafe(nil), **opts); end
end

class Selenium::WebDriver::Remote::Driver
end

module Selenium::WebDriver::Remote::Features
  def add_commands(commands); end

  def command_list(); end

  def commands(command); end

  def delete_downloadable_files(); end

  def download_file(name); end

  def downloadable_files(); end

  def upload(local_file); end

  def upload_if_necessary(keys); end
  REMOTE_COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Remote::Features
end

module Selenium::WebDriver::Remote::Http
end

class Selenium::WebDriver::Remote::Http::Common
  def call(verb, url, command_hash); end

  def close(); end

  def quit_errors(); end

  def server_url=(server_url); end
  CONTENT_TYPE = ::T.let(nil, ::T.untyped)
  DEFAULT_HEADERS = ::T.let(nil, ::T.untyped)
  MAX_REDIRECTS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Http::Common
  def self.extra_headers(); end

  def self.extra_headers=(extra_headers); end

  def self.user_agent(); end

  def self.user_agent=(user_agent); end
end

class Selenium::WebDriver::Remote::Http::Default
  def initialize(open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil)); end

  def open_timeout(); end

  def open_timeout=(open_timeout); end

  def proxy=(proxy); end

  def read_timeout(); end

  def read_timeout=(read_timeout); end
  MAX_RETRIES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Remote::Http::Default
end

module Selenium::WebDriver::Remote::Http
end

class Selenium::WebDriver::Remote::Response
  def [](key); end

  def code(); end

  def error(); end

  def initialize(code, payload=T.unsafe(nil)); end

  def payload(); end
end

class Selenium::WebDriver::Remote::Response
end

module Selenium::WebDriver::Remote
end

module Selenium::WebDriver::Safari
end

class Selenium::WebDriver::Safari::Driver
  include ::Selenium::WebDriver::LocalDriver
  def initialize(options: T.unsafe(nil), service: T.unsafe(nil), url: T.unsafe(nil), **opts); end
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Safari::Driver
end

module Selenium::WebDriver::Safari::Features
  def attach_debugger(); end

  def command_list(); end

  def commands(command); end

  def permissions(); end

  def permissions=(permissions); end
  SAFARI_COMMANDS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Safari::Features
end

class Selenium::WebDriver::Safari::Options
  BROWSER = ::T.let(nil, ::T.untyped)
  CAPABILITIES = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Safari::Options
end

class Selenium::WebDriver::Safari::Service
  def log=(*arg); end
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  DRIVER_PATH_ENV_KEY = ::T.let(nil, ::T.untyped)
  EXECUTABLE = ::T.let(nil, ::T.untyped)
  SHUTDOWN_SUPPORTED = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Safari::Service
end

module Selenium::WebDriver::Safari
  def self.path(); end

  def self.path=(path); end

  def self.technology_preview(); end

  def self.technology_preview!(); end

  def self.technology_preview?(); end

  def self.use_technology_preview(); end

  def self.use_technology_preview=(use_technology_preview); end
end

module Selenium::WebDriver::SearchContext
  FINDERS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::ServiceManager
  SOCKET_LOCK_TIMEOUT = ::T.let(nil, ::T.untyped)
  START_TIMEOUT = ::T.let(nil, ::T.untyped)
  STOP_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::ShadowRoot
  ROOT_KEY = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::SocketPoller
  CONNECTED_ERRORS = ::T.let(nil, ::T.untyped)
  CONNECT_TIMEOUT = ::T.let(nil, ::T.untyped)
  NOT_CONNECTED_ERRORS = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Support
end

class Selenium::WebDriver::Support::AbstractEventListener
  def after_change_value_of(element, driver); end

  def after_click(element, driver); end

  def after_close(driver); end

  def after_execute_script(script, driver); end

  def after_find(by, what, driver); end

  def after_navigate_back(driver); end

  def after_navigate_forward(driver); end

  def after_navigate_to(url, driver); end

  def after_quit(driver); end

  def before_change_value_of(element, driver); end

  def before_click(element, driver); end

  def before_close(driver); end

  def before_execute_script(script, driver); end

  def before_find(by, what, driver); end

  def before_navigate_back(driver); end

  def before_navigate_forward(driver); end

  def before_navigate_to(url, driver); end

  def before_quit(driver); end
end

class Selenium::WebDriver::Support::AbstractEventListener
end

class Selenium::WebDriver::Support::BlockEventListener
  def initialize(callback); end

  def method_missing(meth, *args); end
end

class Selenium::WebDriver::Support::BlockEventListener
end

class Selenium::WebDriver::Support::Color
  def ==(other); end

  def alpha(); end

  def blue(); end

  def eql?(other); end

  def green(); end

  def hex(); end

  def initialize(red, green, blue, alpha=T.unsafe(nil)); end

  def red(); end

  def rgb(); end

  def rgba(); end
  HEX3_PATTERN = ::T.let(nil, ::T.untyped)
  HEX_PATTERN = ::T.let(nil, ::T.untyped)
  HSLA_PATTERN = ::T.let(nil, ::T.untyped)
  HSL_PATTERN = ::T.let(nil, ::T.untyped)
  RGBA_PATTERN = ::T.let(nil, ::T.untyped)
  RGBA_PCT_PATTERN = ::T.let(nil, ::T.untyped)
  RGB_PATTERN = ::T.let(nil, ::T.untyped)
  RGB_PCT_PATTERN = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Support::Color
  def self.from_hsl(h, s, l, a); end

  def self.from_string(str); end

  def self.hue_to_rgb(lum1, lum2, hue); end
end

module Selenium::WebDriver::Support::Escaper
end

module Selenium::WebDriver::Support::Escaper
  def self.escape(str); end
end

class Selenium::WebDriver::Support::EventFiringBridge
  def clear_element(ref); end

  def click_element(ref); end

  def close(); end

  def execute_script(script, *args); end

  def find_element_by(how, what, parent=T.unsafe(nil)); end

  def find_elements_by(how, what, parent=T.unsafe(nil)); end

  def get(url); end

  def go_back(); end

  def go_forward(); end

  def initialize(delegate, listener); end

  def quit(); end

  def send_keys_to_element(ref, keys); end
end

class Selenium::WebDriver::Support::EventFiringBridge
end

class Selenium::WebDriver::Support::RelativeLocator
  def as_json(); end

  def initialize(locator); end
  KEYS = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Support::RelativeLocator
end

class Selenium::WebDriver::Support::Select
  def deselect_all(); end

  def deselect_by(how, what); end

  def first_selected_option(); end

  def initialize(element); end

  def multiple?(); end

  def options(); end

  def select_all(); end

  def select_by(how, what); end

  def selected_options(); end
end

class Selenium::WebDriver::Support::Select
end

module Selenium::WebDriver::Support
end

class Selenium::WebDriver::VirtualAuthenticatorOptions
  PROTOCOL = ::T.let(nil, ::T.untyped)
  TRANSPORT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::Wait
  DEFAULT_INTERVAL = ::T.let(nil, ::T.untyped)
  DEFAULT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Selenium::WebDriver::WebSocketConnection
  CONNECTION_ERRORS = ::T.let(nil, ::T.untyped)
  MAX_LOG_MESSAGE_SIZE = ::T.let(nil, ::T.untyped)
  RESPONSE_WAIT_INTERVAL = ::T.let(nil, ::T.untyped)
  RESPONSE_WAIT_TIMEOUT = ::T.let(nil, ::T.untyped)
end

module Selenium::WebDriver::Zipper
  EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class Set
  def ==(other); end

  def ===(o); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end

  def reset(); end
  InspectKey = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sexp
  UNASSIGNED = ::T.let(nil, ::T.untyped)
end

class Sexp::Matcher::Parser
  ALLOWED = ::T.let(nil, ::T.untyped)
end

class SexpProcessor
  def assert_empty(meth, exp, exp_orig); end

  def assert_type(list, typ); end

  def auto_shift_type(); end

  def auto_shift_type=(auto_shift_type); end

  def context(); end

  def debug(); end

  def debug=(debug); end

  def default_method(); end

  def default_method=(default_method); end

  def env(); end

  def error_handler(type, exp=T.unsafe(nil)); end

  def expected(); end

  def expected=(expected); end

  def in_context(type); end

  def on_error_in(node_type, &block); end

  def process(exp); end

  def process_dummy(exp); end

  def require_empty(); end

  def require_empty=(require_empty); end

  def rewrite(exp); end

  def scope(&block); end

  def strict(); end

  def strict=(strict); end

  def unsupported(); end

  def unsupported=(unsupported); end

  def warn_on_default(); end

  def warn_on_default=(warn_on_default); end
  VERSION = ::T.let(nil, ::T.untyped)
end

class SexpProcessor::Environment
  def [](name); end

  def []=(name, val); end

  def all(); end

  def current(); end

  def depth(); end

  def scope(); end
end

class SexpProcessor
  def self.expand_dirs_to_files(*dirs); end

  def self.processors(); end

  def self.rewriters(); end
end

module Shellwords
  VERSION = ::T.let(nil, ::T.untyped)
end

class SimpleDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Singleton
  VERSION = ::T.let(nil, ::T.untyped)
end

module Singleton::SingletonClassMethods
  def _load(str); end

  def clone(); end
end

module Singleton::SingletonClassProperties
  def __init__(klass); end
end

module Singleton::SingletonClassProperties
  def self.extended(c); end

  def self.included(c); end
end

module Singleton::SingletonInstanceMethods
  def _dump(depth=T.unsafe(nil)); end

  def clone(); end

  def dup(); end
end

module Singleton
  extend ::Singleton::SingletonClassProperties
  def self.module_with_class_methods(); end
end

module Skiptrace
  VERSION = ::T.let(nil, ::T.untyped)
end

class Socket
  AF_CCITT = ::T.let(nil, ::T.untyped)
  AF_CHAOS = ::T.let(nil, ::T.untyped)
  AF_CNT = ::T.let(nil, ::T.untyped)
  AF_COIP = ::T.let(nil, ::T.untyped)
  AF_DATAKIT = ::T.let(nil, ::T.untyped)
  AF_DECnet = ::T.let(nil, ::T.untyped)
  AF_DLI = ::T.let(nil, ::T.untyped)
  AF_E164 = ::T.let(nil, ::T.untyped)
  AF_ECMA = ::T.let(nil, ::T.untyped)
  AF_HYLINK = ::T.let(nil, ::T.untyped)
  AF_IMPLINK = ::T.let(nil, ::T.untyped)
  AF_ISO = ::T.let(nil, ::T.untyped)
  AF_LAT = ::T.let(nil, ::T.untyped)
  AF_LINK = ::T.let(nil, ::T.untyped)
  AF_NATM = ::T.let(nil, ::T.untyped)
  AF_NDRV = ::T.let(nil, ::T.untyped)
  AF_NETBIOS = ::T.let(nil, ::T.untyped)
  AF_NS = ::T.let(nil, ::T.untyped)
  AF_OSI = ::T.let(nil, ::T.untyped)
  AF_PPP = ::T.let(nil, ::T.untyped)
  AF_PUP = ::T.let(nil, ::T.untyped)
  AF_SIP = ::T.let(nil, ::T.untyped)
  AF_SYSTEM = ::T.let(nil, ::T.untyped)
  AF_VSOCK = ::T.let(nil, ::T.untyped)
  AI_DEFAULT = ::T.let(nil, ::T.untyped)
  AI_MASK = ::T.let(nil, ::T.untyped)
  AI_V4MAPPED_CFG = ::T.let(nil, ::T.untyped)
  EAI_BADHINTS = ::T.let(nil, ::T.untyped)
  EAI_MAX = ::T.let(nil, ::T.untyped)
  EAI_PROTOCOL = ::T.let(nil, ::T.untyped)
  IFF_ALTPHYS = ::T.let(nil, ::T.untyped)
  IFF_LINK0 = ::T.let(nil, ::T.untyped)
  IFF_LINK1 = ::T.let(nil, ::T.untyped)
  IFF_LINK2 = ::T.let(nil, ::T.untyped)
  IFF_OACTIVE = ::T.let(nil, ::T.untyped)
  IFF_SIMPLEX = ::T.let(nil, ::T.untyped)
  IPPROTO_EON = ::T.let(nil, ::T.untyped)
  IPPROTO_GGP = ::T.let(nil, ::T.untyped)
  IPPROTO_HELLO = ::T.let(nil, ::T.untyped)
  IPPROTO_MAX = ::T.let(nil, ::T.untyped)
  IPPROTO_ND = ::T.let(nil, ::T.untyped)
  IPPROTO_XTP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_USE_MIN_MTU = ::T.let(nil, ::T.untyped)
  IP_DONTFRAG = ::T.let(nil, ::T.untyped)
  IP_PORTRANGE = ::T.let(nil, ::T.untyped)
  IP_RECVDSTADDR = ::T.let(nil, ::T.untyped)
  IP_RECVIF = ::T.let(nil, ::T.untyped)
  LOCAL_PEERCRED = ::T.let(nil, ::T.untyped)
  MSG_FLUSH = ::T.let(nil, ::T.untyped)
  MSG_HAVEMORE = ::T.let(nil, ::T.untyped)
  MSG_HOLD = ::T.let(nil, ::T.untyped)
  MSG_RCVMORE = ::T.let(nil, ::T.untyped)
  MSG_SEND = ::T.let(nil, ::T.untyped)
  PF_CCITT = ::T.let(nil, ::T.untyped)
  PF_CHAOS = ::T.let(nil, ::T.untyped)
  PF_CNT = ::T.let(nil, ::T.untyped)
  PF_COIP = ::T.let(nil, ::T.untyped)
  PF_DATAKIT = ::T.let(nil, ::T.untyped)
  PF_DECnet = ::T.let(nil, ::T.untyped)
  PF_DLI = ::T.let(nil, ::T.untyped)
  PF_ECMA = ::T.let(nil, ::T.untyped)
  PF_HYLINK = ::T.let(nil, ::T.untyped)
  PF_IMPLINK = ::T.let(nil, ::T.untyped)
  PF_ISO = ::T.let(nil, ::T.untyped)
  PF_LAT = ::T.let(nil, ::T.untyped)
  PF_LINK = ::T.let(nil, ::T.untyped)
  PF_NATM = ::T.let(nil, ::T.untyped)
  PF_NDRV = ::T.let(nil, ::T.untyped)
  PF_NETBIOS = ::T.let(nil, ::T.untyped)
  PF_NS = ::T.let(nil, ::T.untyped)
  PF_OSI = ::T.let(nil, ::T.untyped)
  PF_PIP = ::T.let(nil, ::T.untyped)
  PF_PPP = ::T.let(nil, ::T.untyped)
  PF_PUP = ::T.let(nil, ::T.untyped)
  PF_RTIP = ::T.let(nil, ::T.untyped)
  PF_SIP = ::T.let(nil, ::T.untyped)
  PF_SYSTEM = ::T.let(nil, ::T.untyped)
  PF_VSOCK = ::T.let(nil, ::T.untyped)
  PF_XTP = ::T.let(nil, ::T.untyped)
  SCM_CREDS = ::T.let(nil, ::T.untyped)
  SO_DONTTRUNC = ::T.let(nil, ::T.untyped)
  SO_NKE = ::T.let(nil, ::T.untyped)
  SO_NOSIGPIPE = ::T.let(nil, ::T.untyped)
  SO_NREAD = ::T.let(nil, ::T.untyped)
  SO_USELOOPBACK = ::T.let(nil, ::T.untyped)
  SO_WANTMORE = ::T.let(nil, ::T.untyped)
  SO_WANTOOBFLAG = ::T.let(nil, ::T.untyped)
  TCP_CONNECTION_INFO = ::T.let(nil, ::T.untyped)
  TCP_KEEPALIVE = ::T.let(nil, ::T.untyped)
  TCP_NOOPT = ::T.let(nil, ::T.untyped)
  TCP_NOPUSH = ::T.let(nil, ::T.untyped)
end

module Socket::Constants
  AF_CCITT = ::T.let(nil, ::T.untyped)
  AF_CHAOS = ::T.let(nil, ::T.untyped)
  AF_CNT = ::T.let(nil, ::T.untyped)
  AF_COIP = ::T.let(nil, ::T.untyped)
  AF_DATAKIT = ::T.let(nil, ::T.untyped)
  AF_DECnet = ::T.let(nil, ::T.untyped)
  AF_DLI = ::T.let(nil, ::T.untyped)
  AF_E164 = ::T.let(nil, ::T.untyped)
  AF_ECMA = ::T.let(nil, ::T.untyped)
  AF_HYLINK = ::T.let(nil, ::T.untyped)
  AF_IMPLINK = ::T.let(nil, ::T.untyped)
  AF_ISO = ::T.let(nil, ::T.untyped)
  AF_LAT = ::T.let(nil, ::T.untyped)
  AF_LINK = ::T.let(nil, ::T.untyped)
  AF_NATM = ::T.let(nil, ::T.untyped)
  AF_NDRV = ::T.let(nil, ::T.untyped)
  AF_NETBIOS = ::T.let(nil, ::T.untyped)
  AF_NS = ::T.let(nil, ::T.untyped)
  AF_OSI = ::T.let(nil, ::T.untyped)
  AF_PPP = ::T.let(nil, ::T.untyped)
  AF_PUP = ::T.let(nil, ::T.untyped)
  AF_SIP = ::T.let(nil, ::T.untyped)
  AF_SYSTEM = ::T.let(nil, ::T.untyped)
  AF_VSOCK = ::T.let(nil, ::T.untyped)
  AI_DEFAULT = ::T.let(nil, ::T.untyped)
  AI_MASK = ::T.let(nil, ::T.untyped)
  AI_V4MAPPED_CFG = ::T.let(nil, ::T.untyped)
  EAI_BADHINTS = ::T.let(nil, ::T.untyped)
  EAI_MAX = ::T.let(nil, ::T.untyped)
  EAI_PROTOCOL = ::T.let(nil, ::T.untyped)
  IFF_ALTPHYS = ::T.let(nil, ::T.untyped)
  IFF_LINK0 = ::T.let(nil, ::T.untyped)
  IFF_LINK1 = ::T.let(nil, ::T.untyped)
  IFF_LINK2 = ::T.let(nil, ::T.untyped)
  IFF_OACTIVE = ::T.let(nil, ::T.untyped)
  IFF_SIMPLEX = ::T.let(nil, ::T.untyped)
  IPPROTO_EON = ::T.let(nil, ::T.untyped)
  IPPROTO_GGP = ::T.let(nil, ::T.untyped)
  IPPROTO_HELLO = ::T.let(nil, ::T.untyped)
  IPPROTO_MAX = ::T.let(nil, ::T.untyped)
  IPPROTO_ND = ::T.let(nil, ::T.untyped)
  IPPROTO_XTP = ::T.let(nil, ::T.untyped)
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_USE_MIN_MTU = ::T.let(nil, ::T.untyped)
  IP_DONTFRAG = ::T.let(nil, ::T.untyped)
  IP_PORTRANGE = ::T.let(nil, ::T.untyped)
  IP_RECVDSTADDR = ::T.let(nil, ::T.untyped)
  IP_RECVIF = ::T.let(nil, ::T.untyped)
  LOCAL_PEERCRED = ::T.let(nil, ::T.untyped)
  MSG_EOF = ::T.let(nil, ::T.untyped)
  MSG_FLUSH = ::T.let(nil, ::T.untyped)
  MSG_HAVEMORE = ::T.let(nil, ::T.untyped)
  MSG_HOLD = ::T.let(nil, ::T.untyped)
  MSG_RCVMORE = ::T.let(nil, ::T.untyped)
  MSG_SEND = ::T.let(nil, ::T.untyped)
  PF_CCITT = ::T.let(nil, ::T.untyped)
  PF_CHAOS = ::T.let(nil, ::T.untyped)
  PF_CNT = ::T.let(nil, ::T.untyped)
  PF_COIP = ::T.let(nil, ::T.untyped)
  PF_DATAKIT = ::T.let(nil, ::T.untyped)
  PF_DECnet = ::T.let(nil, ::T.untyped)
  PF_DLI = ::T.let(nil, ::T.untyped)
  PF_ECMA = ::T.let(nil, ::T.untyped)
  PF_HYLINK = ::T.let(nil, ::T.untyped)
  PF_IMPLINK = ::T.let(nil, ::T.untyped)
  PF_ISO = ::T.let(nil, ::T.untyped)
  PF_LAT = ::T.let(nil, ::T.untyped)
  PF_LINK = ::T.let(nil, ::T.untyped)
  PF_NATM = ::T.let(nil, ::T.untyped)
  PF_NDRV = ::T.let(nil, ::T.untyped)
  PF_NETBIOS = ::T.let(nil, ::T.untyped)
  PF_NS = ::T.let(nil, ::T.untyped)
  PF_OSI = ::T.let(nil, ::T.untyped)
  PF_PIP = ::T.let(nil, ::T.untyped)
  PF_PPP = ::T.let(nil, ::T.untyped)
  PF_PUP = ::T.let(nil, ::T.untyped)
  PF_RTIP = ::T.let(nil, ::T.untyped)
  PF_SIP = ::T.let(nil, ::T.untyped)
  PF_SYSTEM = ::T.let(nil, ::T.untyped)
  PF_VSOCK = ::T.let(nil, ::T.untyped)
  PF_XTP = ::T.let(nil, ::T.untyped)
  SCM_CREDS = ::T.let(nil, ::T.untyped)
  SO_DONTTRUNC = ::T.let(nil, ::T.untyped)
  SO_NKE = ::T.let(nil, ::T.untyped)
  SO_NOSIGPIPE = ::T.let(nil, ::T.untyped)
  SO_NREAD = ::T.let(nil, ::T.untyped)
  SO_USELOOPBACK = ::T.let(nil, ::T.untyped)
  SO_WANTMORE = ::T.let(nil, ::T.untyped)
  SO_WANTOOBFLAG = ::T.let(nil, ::T.untyped)
  TCP_CONNECTION_INFO = ::T.let(nil, ::T.untyped)
  TCP_KEEPALIVE = ::T.let(nil, ::T.untyped)
  TCP_NOOPT = ::T.let(nil, ::T.untyped)
  TCP_NOPUSH = ::T.let(nil, ::T.untyped)
end

class Socket::ResolutionError
  def error_code(); end
end

class Socket
  def self.tcp_fast_fallback(); end

  def self.tcp_fast_fallback=(tcp_fast_fallback); end

  def self.tcp_with_fast_fallback(host, port, local_host=T.unsafe(nil), local_port=T.unsafe(nil), connect_timeout: T.unsafe(nil), resolv_timeout: T.unsafe(nil)); end
end

module SolidCable
  VERSION = ::T.let(nil, ::T.untyped)
end

module SolidCache
  VERSION = ::T.let(nil, ::T.untyped)
end

class SolidCache::Entry
  include ::SolidCache::Entry::Size
  include ::SolidCache::Entry::Expiration
  ESTIMATED_ENCRYPTION_OVERHEAD = ::T.let(nil, ::T.untyped)
  ESTIMATED_ROW_OVERHEAD = ::T.let(nil, ::T.untyped)
  KEY_HASH_ID_RANGE = ::T.let(nil, ::T.untyped)
  MULTI_BATCH_SIZE = ::T.let(nil, ::T.untyped)
end

class SolidCache::Entry::Size::MovingAverageEstimate
  ESTIMATES_KEY = ::T.let(nil, ::T.untyped)
  MAX_RETAINED_ESTIMATES = ::T.let(nil, ::T.untyped)
  TARGET_SAMPLED_FRACTION = ::T.let(nil, ::T.untyped)
end

class SolidCache::MaglevHash
  TABLE_SIZE = ::T.let(nil, ::T.untyped)
end

class SolidCache::Record
  NULL_INSTRUMENTER = ::T.let(nil, ::T.untyped)
end

class SolidCache::Store
  include ::SolidCache::Store::Stats
  include ::SolidCache::Store::Failsafe
  include ::SolidCache::Store::Expiry
  include ::SolidCache::Store::Execution
  include ::SolidCache::Store::Entries
  include ::SolidCache::Store::Connections
  include ::ActiveSupport::Cache::Strategy::LocalCache
end

module SolidCache::Store::Api
  DEFAULT_MAX_KEY_BYTESIZE = ::T.let(nil, ::T.untyped)
  SQL_WILDCARD_CHARS = ::T.let(nil, ::T.untyped)
end

module SolidCache::Store::Expiry
  EXPIRY_MULTIPLIER = ::T.let(nil, ::T.untyped)
end

module SolidCache::Store::Failsafe
  DEFAULT_ERROR_HANDLER = ::T.let(nil, ::T.untyped)
  TRANSIENT_ACTIVE_RECORD_ERRORS = ::T.let(nil, ::T.untyped)
end

module SolidQueue
  DEFAULT_LOGGER = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class SolidQueue::Cli
  def start(); end
end

class SolidQueue::Cli
end

class SolidQueue::Configuration
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::API
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::Model
  include ::ActiveModel::Access
  def __callbacks(); end

  def _run_validate_callbacks(&block); end

  def _validate_callbacks(); end

  def _validators(); end

  def _validators?(); end

  def configured_processes(); end

  def error_messages(); end

  def initialize(**options); end

  def model_name(&arg); end

  def param_delimiter=(param_delimiter); end
  DEFAULT_CONFIG_FILE_PATH = ::T.let(nil, ::T.untyped)
  DEFAULT_RECURRING_SCHEDULE_FILE_PATH = ::T.let(nil, ::T.untyped)
  DISPATCHER_DEFAULTS = ::T.let(nil, ::T.untyped)
  WORKER_DEFAULTS = ::T.let(nil, ::T.untyped)
end

class SolidQueue::Configuration::Process
  def instantiate(); end
end

class SolidQueue::Configuration::Process
end

class SolidQueue::Configuration
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Validations::HelperMethods
  def self.__callbacks(); end

  def self.__callbacks=(value); end

  def self._validate_callbacks(); end

  def self._validate_callbacks=(value); end

  def self._validators(); end

  def self._validators=(value); end

  def self._validators?(); end

  def self.param_delimiter(); end

  def self.param_delimiter=(value); end

  def self.param_delimiter?(); end
end

class SolidQueue::Dispatcher
  include ::SolidQueue::LifecycleHooks
  def batch_size(); end

  def batch_size=(batch_size); end

  def concurrency_maintenance(); end

  def concurrency_maintenance=(concurrency_maintenance); end

  def initialize(**options); end

  def lifecycle_hooks(); end
end

class SolidQueue::Dispatcher::ConcurrencyMaintenance
  include ::SolidQueue::AppExecutor
  def batch_size(); end

  def initialize(interval, batch_size); end

  def interval(); end

  def start(); end

  def stop(); end
end

class SolidQueue::Dispatcher::ConcurrencyMaintenance
end

class SolidQueue::Dispatcher
  extend ::SolidQueue::LifecycleHooks::ClassMethods
  def self.lifecycle_hooks(); end
end

class SolidQueue::FailedExecution
  JSON_OVERHEAD = ::T.let(nil, ::T.untyped)
end

class SolidQueue::Job
  include ::SolidQueue::Job::Recurrable
  include ::SolidQueue::Job::Clearable
  include ::SolidQueue::Job::Retryable
  include ::SolidQueue::Job::Schedulable
end

class SolidQueue::Pool
  include ::SolidQueue::AppExecutor
  def idle?(); end

  def idle_threads(); end

  def initialize(size, on_idle: T.unsafe(nil)); end

  def post(execution); end

  def shutdown(*arg, **arg1, &arg2); end

  def shutdown?(*arg, **arg1, &arg2); end

  def size(); end

  def wait_for_termination(*arg, **arg1, &arg2); end
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class SolidQueue::Pool
end

class SolidQueue::Process
  include ::SolidQueue::Process::Prunable
end

class SolidQueue::Processes::Base
  include ::SolidQueue::Processes::Procline
  include ::SolidQueue::Processes::Registrable
  include ::SolidQueue::Processes::Interruptible
end

module SolidQueue::Processes::OgInterruptible
  def wake_up(); end
  SELF_PIPE_BLOCK_SIZE = ::T.let(nil, ::T.untyped)
end

module SolidQueue::Processes::OgInterruptible
end

class SolidQueue::Processes::Poller
  include ::SolidQueue::Processes::Runnable
  include ::SolidQueue::Processes::Supervised
  def initialize(polling_interval:, **options); end

  def polling_interval(); end

  def polling_interval=(polling_interval); end
end

class SolidQueue::Processes::Poller
end

class SolidQueue::Processes::ProcessExitError
  def initialize(status); end
end

class SolidQueue::Processes::ProcessExitError
end

class SolidQueue::Processes::ProcessMissingError
  def initialize(); end
end

class SolidQueue::Processes::ProcessMissingError
end

class SolidQueue::Processes::ProcessPrunedError
  def initialize(last_heartbeat_at); end
end

class SolidQueue::Processes::ProcessPrunedError
end

module SolidQueue::Processes::Runnable
  include ::SolidQueue::Processes::Supervised
  def mode=(mode); end

  def start(); end

  def stop(); end

  def supervisor(); end
  DEFAULT_MODE = ::T.let(nil, ::T.untyped)
end

module SolidQueue::Processes::Runnable
end

module SolidQueue::Processes::Supervised
  def supervised_by(process); end
end

module SolidQueue::Processes::Supervised
  extend ::ActiveSupport::Concern
end

class SolidQueue::Scheduler
  include ::SolidQueue::Processes::Runnable
  include ::SolidQueue::Processes::Supervised
  include ::SolidQueue::LifecycleHooks
  def initialize(recurring_tasks:, **options); end

  def lifecycle_hooks(); end

  def recurring_schedule(); end

  def recurring_schedule=(recurring_schedule); end
  SLEEP_INTERVAL = ::T.let(nil, ::T.untyped)
end

class SolidQueue::Scheduler::RecurringSchedule
  include ::SolidQueue::AppExecutor
  def configured_tasks(); end

  def empty?(); end

  def initialize(tasks); end

  def schedule_task(task); end

  def schedule_tasks(); end

  def scheduled_tasks(); end

  def task_keys(); end

  def unschedule_tasks(); end
end

class SolidQueue::Scheduler::RecurringSchedule
end

class SolidQueue::Scheduler
  extend ::SolidQueue::LifecycleHooks::ClassMethods
  def self.lifecycle_hooks(); end
end

class SolidQueue::Supervisor
  include ::SolidQueue::Supervisor::Pidfiled
  include ::SolidQueue::Supervisor::Signals
end

class SolidQueue::Supervisor::Pidfile
  def delete(); end

  def initialize(path); end

  def setup(); end
end

class SolidQueue::Supervisor::Pidfile
end

module SolidQueue::Supervisor::Signals
  SIGNALS = ::T.let(nil, ::T.untyped)
end

module SolidQueue::Timer
  def wait_until(timeout, condition, &block); end
end

module SolidQueue::Timer
  extend ::SolidQueue::Timer
end

class SolidQueue::Worker
  include ::SolidQueue::LifecycleHooks
  def initialize(**options); end

  def lifecycle_hooks(); end

  def pool(); end

  def pool=(pool); end

  def queues(); end

  def queues=(queues); end
end

class SolidQueue::Worker
  extend ::SolidQueue::LifecycleHooks::ClassMethods
  def self.lifecycle_hooks(); end
end

module Sprockets
  VERSION = ::T.let(nil, ::T.untyped)
end

Sprockets::Autoload::Sass = Sass

class Sprockets::Base
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Loader
  include ::Sprockets::DigestUtils
  include ::Sprockets::Transformers
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::Engines
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
end

module Sprockets::Bower
  POSSIBLE_BOWER_JSONS = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache
  PEEK_SIZE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::FileStore
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::MemoryStore
  DEFAULT_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class Sprockets::Cache::NullStore
  def get(key); end

  def set(key, value); end
end

class Sprockets::Cache::NullStore
end

class Sprockets::ClosureCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::CoffeeScriptTemplate
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::Configuration
  include ::Sprockets::Dependencies
  include ::Sprockets::Compressing
  include ::Sprockets::Processing
  include ::Sprockets::Transformers
  include ::Sprockets::Engines
  include ::Sprockets::Mime
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
  include ::Sprockets::DigestUtils
end

module Sprockets::Dependencies
  include ::Sprockets::URIUtils
  include ::Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
end

module Sprockets::DigestUtils
  DIGEST_SIZES = ::T.let(nil, ::T.untyped)
  HASH_ALGORITHMS = ::T.let(nil, ::T.untyped)
end

class Sprockets::DirectiveProcessor
  DIRECTIVE_PATTERN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::ERBTemplate
  def call(*args); end
end

class Sprockets::ERBTemplate
end

module Sprockets::EcoProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EcoTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EcoTemplate
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::EjsProcessor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EjsTemplate
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::EjsTemplate
  def self.cache_key(); end

  def self.call(*args); end
end

module Sprockets::EncodingUtils
  BOM = ::T.let(nil, ::T.untyped)
  CHARSET_DETECT = ::T.let(nil, ::T.untyped)
  CHARSET_SIZE = ::T.let(nil, ::T.untyped)
  CHARSET_START = ::T.let(nil, ::T.untyped)
end

Sprockets::Index = Sprockets::CachedEnvironment

class Sprockets::LegacyProcProcessor
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Sprockets::LegacyTiltProcessor
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

module Sprockets::Loader
  include ::Sprockets::Transformers
  include ::Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::Processing
  include ::Sprockets::Mime
  include ::Sprockets::URIUtils
  include ::Sprockets::ProcessorUtils
  include ::Sprockets::HTTPUtils
end

module Sprockets::ManifestUtils
  LEGACY_MANIFEST_RE = ::T.let(nil, ::T.untyped)
  MANIFEST_RE = ::T.let(nil, ::T.untyped)
end

module Sprockets::Mime
  include ::Sprockets::Utils
end

module Sprockets::PathDigestUtils
  include ::Sprockets::PathUtils
end

module Sprockets::PathUtils
  SEPARATOR_PATTERN = ::T.let(nil, ::T.untyped)
end

module Sprockets::Paths
  include ::Sprockets::Utils
end

module Sprockets::Processing
  include ::Sprockets::Utils
  include ::Sprockets::URIUtils
end

module Sprockets::ProcessorUtils
  VALID_METADATA_COMPOUND_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_COMPOUND_TYPES_HASH = ::T.let(nil, ::T.untyped)
  VALID_METADATA_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES = ::T.let(nil, ::T.untyped)
  VALID_METADATA_VALUE_TYPES_HASH = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails
  VERSION = ::T.let(nil, ::T.untyped)
end

class Sprockets::Rails::AssetUrlProcessor
  REGEX = ::T.let(nil, ::T.untyped)
end

module Sprockets::Rails::Helper
  VIEW_ACCESSORS = ::T.let(nil, ::T.untyped)
end

class Sprockets::Rails::SourcemappingUrlProcessor
  REGEX = ::T.let(nil, ::T.untyped)
end

class Sprockets::Railtie
  LOOSE_APP_ASSETS = ::T.let(nil, ::T.untyped)
end

module Sprockets::Resolve
  include ::Sprockets::PathDependencyUtils
  include ::Sprockets::PathUtils
  include ::Sprockets::URIUtils
end

class Sprockets::SassCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

class Sprockets::SassTemplate
end

class Sprockets::SassTemplate
  def self.call(*args); end
end

class Sprockets::ScssTemplate
end

class Sprockets::ScssTemplate
  def self.call(*args); end
end

module Sprockets::Transformers
  include ::Sprockets::Utils
  include ::Sprockets::ProcessorUtils
end

module Sprockets::URIUtils
  URI_PARSER = ::T.let(nil, ::T.untyped)
end

class Sprockets::UglifierCompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets::Utils
  UNBOUND_METHODS_BIND_TO_ANY_OBJECT = ::T.let(nil, ::T.untyped)
end

class Sprockets::Utils::Gzip
  COMPRESSABLE_MIME_TYPES = ::T.let(nil, ::T.untyped)
end

class Sprockets::YUICompressor
  VERSION = ::T.let(nil, ::T.untyped)
end

module Sprockets
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Processing
  extend ::Sprockets::Transformers
  extend ::Sprockets::Engines
  extend ::Sprockets::Mime
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::DigestUtils
end

module Stimulus
  VERSION = ::T.let(nil, ::T.untyped)
end

class Stimulus::Engine
  PRECOMPILE_ASSETS = ::T.let(nil, ::T.untyped)
end

class String
  def append_as_bytes(*arg); end

  def dedup(); end
  BLANK_RE = ::T.let(nil, ::T.untyped)
  ENCODED_BLANKS = ::T.let(nil, ::T.untyped)
end

class String
  def self.new(*arg); end
end

class StringIO
  def pread(*arg); end

  def set_encoding_by_bom(); end
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class StringIO
  def self.new(*arg); end
end

class StringScanner
  def bol?(); end

  def fixed_anchor?(); end

  def initialize(*arg); end

  def named_captures(); end

  def peek_byte(); end

  def scan_byte(); end

  def scan_integer(base: T.unsafe(nil)); end
  Id = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Struct
  def deconstruct(); end

  def deconstruct_keys(arg); end

  def filter(*arg); end
end

class Struct
  def self.new(*arg); end
end

class Symbol
  def self.from_msgpack_ext(data); end
end

class SyntaxError
  def path(); end
end

module SyntaxSuggest
end

module SyntaxSuggest
  def self.module_for_detailed_message(); end
end

module TSort
  VERSION = ::T.let(nil, ::T.untyped)
end

module TZInfo
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tempfile
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Thor::Argument
  def enum_to_s(); end

  def print_default(); end
end

class Thor::Command
  def method_at_least_one_option_names(); end

  def method_exclusive_option_names(); end
end

class Thor::CoreExt::HashWithIndifferentAccess
  def except(*keys); end

  def slice(*keys); end
end

class Thor::Group
  def self.command_exists?(command_name); end
end

class Thor::Option
  def aliases_for_usage(); end
end

class Thor::Options
  def check_at_least_one!(); end

  def check_exclusive!(); end

  def names_to_switch_names(names=T.unsafe(nil)); end

  def unshift(arg, is_value: T.unsafe(nil)); end
end

module Thor::RakeCompat
  include ::Rake::DSL
  include ::Rake::FileUtilsExt
end

module Thor::Shell
  def say_error(*args, &block); end
end

class Thor::UndefinedCommandError
  include ::Thor::Correctable
end

class Thor::UnknownArgumentError
  include ::Thor::Correctable
end

class Thor
  def self.at_least_one(*args, &block); end

  def self.command_exists?(command_name); end

  def self.exclusive(*args, &block); end

  def self.method_at_least_one(*args, &block); end

  def self.method_at_least_one_option_names(); end

  def self.method_exclusive(*args, &block); end

  def self.method_exclusive_option_names(); end

  def self.print_at_least_one_required_options(shell, command=T.unsafe(nil)); end

  def self.print_exclusive_options(shell, command=T.unsafe(nil)); end

  def self.sort_commands!(list); end
end

class Thread
  def puma_server(); end

  def puma_server=(puma_server); end
end

class Thread::Backtrace
  def self.limit(); end
end

class Thread
  def self.ignore_deadlock(); end

  def self.ignore_deadlock=(ignore_deadlock); end

  def self.new(*arg); end
end

module Tilt
  LOCK = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Tilt::BuilderTemplate
  def precompiled_postamble(locals); end

  def precompiled_template(locals); end
end

class Tilt::BuilderTemplate
end

class Tilt::ERBTemplate
  def precompiled(locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  SUPPORTS_KVARGS = ::T.let(nil, ::T.untyped)
end

class Tilt::ERBTemplate
end

class Tilt::ErubiTemplate
  def precompiled_template(locals); end
end

class Tilt::ErubiTemplate
end

class Tilt::EtanniTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::EtanniTemplate
end

class Tilt::Mapping
  LOCK = ::T.let(nil, ::T.untyped)
end

class Tilt::NokogiriTemplate
  def evaluate(scope, locals); end

  def precompiled_postamble(locals); end

  def precompiled_preamble(locals); end

  def precompiled_template(locals); end
  DOCUMENT_HEADER = ::T.let(nil, ::T.untyped)
end

class Tilt::NokogiriTemplate
end

class Tilt::PlainTemplate
end

class Tilt::PlainTemplate
end

class Tilt::RDocTemplate
end

class Tilt::RDocTemplate
end

class Tilt::SassTemplate
end

Tilt::SassTemplate::Engine = SassC::Engine

class Tilt::SassTemplate
end

class Tilt::ScssTemplate
end

class Tilt::ScssTemplate
end

class Tilt::StringTemplate
  def precompiled(locals); end

  def precompiled_template(locals); end
end

class Tilt::StringTemplate
end

Tilt::TOPOBJECT = Tilt::CompiledTemplates

class Tilt::Template
  CLASS_METHOD = ::T.let(nil, ::T.untyped)
  USE_BIND_CALL = ::T.let(nil, ::T.untyped)
end

class Time
  def deconstruct_keys(arg); end
  COMMON_YEAR_DAYS_IN_MONTH = ::T.let(nil, ::T.untyped)
  DATE_FORMATS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Timeout
  VERSION = ::T.let(nil, ::T.untyped)
end

class TracePoint
  def eval_script(); end

  def instruction_sequence(); end

  def parameters(); end
end

class TracePoint
  def self.allow_reentry(); end

  def self.new(*events); end
end

class Track
  include ::Track::GeneratedAttributeMethods
  include ::Track::GeneratedAssociationMethods
end

module Track::GeneratedAssociationMethods
end

module Track::GeneratedAssociationMethods
end

module Track::GeneratedAttributeMethods
end

module Track::GeneratedAttributeMethods
end

class TrackListen
  include ::TrackListen::GeneratedAttributeMethods
  include ::TrackListen::GeneratedAssociationMethods
  def autosave_associated_records_for_import(*args); end
end

module TrackListen::GeneratedAssociationMethods
  def build_import(*args, &block); end

  def create_import(*args, &block); end

  def create_import!(*args, &block); end

  def import(); end

  def import=(value); end

  def import_changed?(); end

  def import_previously_changed?(); end

  def reload_import(); end

  def reset_import(); end
end

module TrackListen::GeneratedAssociationMethods
end

module TrackListen::GeneratedAttributeMethods
end

module TrackListen::GeneratedAttributeMethods
end

class Turbo::Debouncer
  DEFAULT_DELAY = ::T.let(nil, ::T.untyped)
end

class Turbo::Engine
  PRECOMPILE_ASSETS = ::T.let(nil, ::T.untyped)
end

class Turbo::StreamsChannel
  extend ::Turbo::Streams::StreamName
end

module Turbo::SystemTestHelper
  def assert_no_turbo_cable_stream_source(*arg, **arg1, &arg2); end

  def assert_turbo_cable_stream_source(*arg, **arg1, &arg2); end

  def connect_turbo_cable_stream_sources(**options, &block); end
end

module Turbo::SystemTestHelper
end

module Turbo::TestAssertions::IntegrationTestAssertions
  def assert_no_turbo_stream(status: T.unsafe(nil), **attributes); end

  def assert_turbo_stream(status: T.unsafe(nil), **attributes, &block); end
end

module Turbo::TestAssertions::IntegrationTestAssertions
end

class TypeError
  include ::ErrorHighlight::CoreExt
end

module URI
  TBLENCURICOMP_ = ::T.let(nil, ::T.untyped)
end

class URI::FTP
  def buffer_open(buf, proxy, options); end
end

class URI::File
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class URI::GID
  COMPONENT = ::T.let(nil, ::T.untyped)
  COMPOSITE_MODEL_ID_DELIMITER = ::T.let(nil, ::T.untyped)
  COMPOSITE_MODEL_ID_MAX_SIZE = ::T.let(nil, ::T.untyped)
end

class URI::HTTP
  def buffer_open(buf, proxy, options); end
end

class URI::RFC3986_Parser
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  SEG = ::T.let(nil, ::T.untyped)
  SEG_NC = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
end

class URI::WSS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

module URI
  def self.open(name, *rest, **arg, &block); end
end

module UnicodeNormalize
end

module UnicodeNormalize
end

module Vips
  ARGUMENT_CONSTRUCT = ::T.let(nil, ::T.untyped)
  ARGUMENT_DEPRECATED = ::T.let(nil, ::T.untyped)
  ARGUMENT_FLAGS = ::T.let(nil, ::T.untyped)
  ARGUMENT_INPUT = ::T.let(nil, ::T.untyped)
  ARGUMENT_MODIFY = ::T.let(nil, ::T.untyped)
  ARGUMENT_OUTPUT = ::T.let(nil, ::T.untyped)
  ARGUMENT_REQUIRED = ::T.let(nil, ::T.untyped)
  ARGUMENT_SET_ALWAYS = ::T.let(nil, ::T.untyped)
  ARGUMENT_SET_ONCE = ::T.let(nil, ::T.untyped)
  ARRAY_DOUBLE_TYPE = ::T.let(nil, ::T.untyped)
  ARRAY_IMAGE_TYPE = ::T.let(nil, ::T.untyped)
  ARRAY_INT_TYPE = ::T.let(nil, ::T.untyped)
  BAND_FORMAT_TYPE = ::T.let(nil, ::T.untyped)
  BLEND_MODE_TYPE = ::T.let(nil, ::T.untyped)
  BLOB_TYPE = ::T.let(nil, ::T.untyped)
  CODING_TYPE = ::T.let(nil, ::T.untyped)
  DEFAULT_CONCURRENCY = ::T.let(nil, ::T.untyped)
  IMAGE_TYPE = ::T.let(nil, ::T.untyped)
  INTERPRETATION_TYPE = ::T.let(nil, ::T.untyped)
  LIBRARY_VERSION = ::T.let(nil, ::T.untyped)
  LOG_DOMAIN = ::T.let(nil, ::T.untyped)
  MARSHAL_ALL = ::T.let(nil, ::T.untyped)
  MARSHAL_FINISH = ::T.let(nil, ::T.untyped)
  MARSHAL_PROGRESS = ::T.let(nil, ::T.untyped)
  MARSHAL_READ = ::T.let(nil, ::T.untyped)
  MARSHAL_SEEK = ::T.let(nil, ::T.untyped)
  MARSHAL_WRITE = ::T.let(nil, ::T.untyped)
  MAX_COORD = ::T.let(nil, ::T.untyped)
  OPERATION_DEPRECATED = ::T.let(nil, ::T.untyped)
  OPERATION_FLAGS = ::T.let(nil, ::T.untyped)
  OPERATION_NOCACHE = ::T.let(nil, ::T.untyped)
  OPERATION_SEQUENTIAL = ::T.let(nil, ::T.untyped)
  REFSTR_TYPE = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Vips::Yard
  ALIAS = ::T.let(nil, ::T.untyped)
  MAP_GO_TO_RUBY = ::T.let(nil, ::T.untyped)
  NO_GENERATE = ::T.let(nil, ::T.untyped)
end

module Warning
  extend ::Warning
end

class WeakRef
  def initialize(orig); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebConsole::Context
  def extract(input=T.unsafe(nil)); end

  def initialize(binding); end
  GLOBAL_OBJECTS = ::T.let(nil, ::T.untyped)
end

class WebConsole::Context
end

class WebConsole::DoubleRenderError
end

class WebConsole::DoubleRenderError
end

class WebConsole::Error
end

class WebConsole::Error
end

class WebConsole::Evaluator
  def cleaner(); end

  def eval(input); end

  def initialize(binding=T.unsafe(nil)); end
end

class WebConsole::Evaluator
  def self.cleaner(); end
end

class WebConsole::ExceptionMapper
  def [](index); end

  def exc(); end

  def first(); end

  def initialize(exception); end
end

class WebConsole::ExceptionMapper
  def self.find_binding(mappers, exception_object_id); end

  def self.follow(exc); end
end

class WebConsole::Injector
  def initialize(body, headers); end

  def inject(content); end
end

class WebConsole::Injector
end

class WebConsole::Middleware
  TEMPLATES_PATH = ::T.let(nil, ::T.untyped)
end

class WebConsole::Permissions
  ALWAYS_PERMITTED_NETWORKS = ::T.let(nil, ::T.untyped)
end

class WebConsole::Session
  def context(objpath); end

  def eval(input); end

  def id(); end

  def initialize(exception_mappers); end

  def inmemory_storage(); end

  def switch_binding_to(index, exception_object_id); end
end

class WebConsole::Session
  def self.find(id); end

  def self.from(storage); end

  def self.inmemory_storage(); end
end

class WebConsole::SourceLocation
  def initialize(binding); end

  def lineno(); end

  def path(); end
end

class WebConsole::SourceLocation
end

class WebConsole::Template
  def initialize(env, session); end

  def render(template); end

  def template_paths(); end

  def template_paths=(val); end
end

class WebConsole::Template
  def self.template_paths(); end

  def self.template_paths=(val); end
end

class WebConsole::View
  def only_on_error_page(*args); end

  def only_on_regular_page(*args); end

  def render(*arg); end

  def render_inlined_string(template); end

  def render_javascript(template); end

  def t(key, options=T.unsafe(nil)); end
end

class WebConsole::View
end

class WebConsole::WhinyRequest
  def permitted?(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class WebConsole::WhinyRequest
end

class WebRobots::RobotsTxt
  DISALLOW_ALL = ::T.let(nil, ::T.untyped)
end

class WebRobots::RobotsTxt::Parser
  KNOWN_TOKENS = ::T.let(nil, ::T.untyped)
  RE_KNOWN_TOKENS = ::T.let(nil, ::T.untyped)
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

module WebSocket
  DEFAULT_VERSION = ::T.let(nil, ::T.untyped)
  ROOT = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver
  MAX_LENGTH = ::T.let(nil, ::T.untyped)
  PORTS = ::T.let(nil, ::T.untyped)
  STATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def headers(); end

  def proxy(origin, options=T.unsafe(nil)); end

  def status(); end
  VALID_SCHEMES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Client
  def self.generate_key(); end
end

class WebSocket::Driver::Draft75
  def frame(buffer, type=T.unsafe(nil), error_type=T.unsafe(nil)); end

  def parse(chunk); end

  def version(); end
end

class WebSocket::Driver::Draft75
end

class WebSocket::Driver::Draft76
  BODY_SIZE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Draft76
end

class WebSocket::Driver::Headers
  def [](name); end

  def []=(name, value); end

  def clear(); end

  def initialize(received=T.unsafe(nil)); end

  def to_h(); end
  ALLOWED_DUPLICATES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Headers
end

class WebSocket::Driver::Hybi
  def frame(buffer, type=T.unsafe(nil), code=T.unsafe(nil)); end

  def parse(chunk); end

  def ping(message=T.unsafe(nil), &callback); end

  def pong(message=T.unsafe(nil)); end

  def version(); end
  BYTE = ::T.let(nil, ::T.untyped)
  DEFAULT_ERROR_CODE = ::T.let(nil, ::T.untyped)
  ERRORS = ::T.let(nil, ::T.untyped)
  ERROR_CODES = ::T.let(nil, ::T.untyped)
  FIN = ::T.let(nil, ::T.untyped)
  GUID = ::T.let(nil, ::T.untyped)
  LENGTH = ::T.let(nil, ::T.untyped)
  MASK = ::T.let(nil, ::T.untyped)
  MAX_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
  MIN_RESERVED_ERROR = ::T.let(nil, ::T.untyped)
  OPCODE = ::T.let(nil, ::T.untyped)
  OPCODES = ::T.let(nil, ::T.untyped)
  OPCODE_CODES = ::T.let(nil, ::T.untyped)
  OPENING_OPCODES = ::T.let(nil, ::T.untyped)
  PACK_FORMATS = ::T.let(nil, ::T.untyped)
  RSV1 = ::T.let(nil, ::T.untyped)
  RSV2 = ::T.let(nil, ::T.untyped)
  RSV3 = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Hybi::Frame
  def final(); end

  def final=(final); end

  def length(); end

  def length=(length); end

  def length_bytes(); end

  def length_bytes=(length_bytes); end

  def masked(); end

  def masked=(masked); end

  def masking_key(); end

  def masking_key=(masking_key); end

  def opcode(); end

  def opcode=(opcode); end

  def payload(); end

  def payload=(payload); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Frame
end

class WebSocket::Driver::Hybi::Message
  def <<(frame); end

  def data(); end

  def data=(data); end

  def opcode(); end

  def opcode=(opcode); end

  def rsv1(); end

  def rsv1=(rsv1); end

  def rsv2(); end

  def rsv2=(rsv2); end

  def rsv3(); end

  def rsv3=(rsv3); end
end

class WebSocket::Driver::Hybi::Message
end

class WebSocket::Driver::Hybi
  def self.generate_accept(key); end
end

class WebSocket::Driver::Proxy
  include ::WebSocket::Driver::EventEmitter
  def headers(); end

  def initialize(client, origin, options); end

  def parse(chunk); end

  def set_header(name, value); end

  def start(); end

  def status(); end
end

class WebSocket::Driver::Proxy
end

class WebSocket::Driver::Server
  def add_extension(*args, &block); end

  def binary(*args, &block); end

  def close(*args, &block); end

  def env(); end

  def frame(*args, &block); end

  def parse(chunk); end

  def ping(*args, &block); end

  def set_header(*args, &block); end

  def start(*args, &block); end

  def text(*args, &block); end

  def url(); end

  def version(); end

  def write(buffer); end
  EVENTS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::Server
end

class WebSocket::Driver::StreamReader
  def each_byte(); end

  def put(chunk); end

  def read(length); end
  MINIMUM_AUTOMATIC_PRUNE_OFFSET = ::T.let(nil, ::T.untyped)
end

class WebSocket::Driver::StreamReader
end

class WebSocket::Error
end

class WebSocket::Error::Frame
end

class WebSocket::Error::Frame::ControlFramePayloadTooLong
end

class WebSocket::Error::Frame::ControlFramePayloadTooLong
end

class WebSocket::Error::Frame::DataFrameInsteadContinuation
end

class WebSocket::Error::Frame::DataFrameInsteadContinuation
end

class WebSocket::Error::Frame::FragmentedControlFrame
end

class WebSocket::Error::Frame::FragmentedControlFrame
end

class WebSocket::Error::Frame::Invalid
end

class WebSocket::Error::Frame::Invalid
end

class WebSocket::Error::Frame::InvalidPayloadEncoding
end

class WebSocket::Error::Frame::InvalidPayloadEncoding
end

class WebSocket::Error::Frame::MaskTooShort
end

class WebSocket::Error::Frame::MaskTooShort
end

class WebSocket::Error::Frame::ReservedBitUsed
end

class WebSocket::Error::Frame::ReservedBitUsed
end

class WebSocket::Error::Frame::TooLong
end

class WebSocket::Error::Frame::TooLong
end

class WebSocket::Error::Frame::UnexpectedContinuationFrame
end

class WebSocket::Error::Frame::UnexpectedContinuationFrame
end

class WebSocket::Error::Frame::UnknownCloseCode
end

class WebSocket::Error::Frame::UnknownCloseCode
end

class WebSocket::Error::Frame::UnknownFrameType
end

class WebSocket::Error::Frame::UnknownFrameType
end

class WebSocket::Error::Frame::UnknownOpcode
end

class WebSocket::Error::Frame::UnknownOpcode
end

class WebSocket::Error::Frame::UnknownVersion
end

class WebSocket::Error::Frame::UnknownVersion
end

class WebSocket::Error::Frame
end

class WebSocket::Error::Handshake
end

class WebSocket::Error::Handshake::GetRequestRequired
end

class WebSocket::Error::Handshake::GetRequestRequired
end

class WebSocket::Error::Handshake::InvalidAuthentication
end

class WebSocket::Error::Handshake::InvalidAuthentication
end

class WebSocket::Error::Handshake::InvalidHeader
end

class WebSocket::Error::Handshake::InvalidHeader
end

class WebSocket::Error::Handshake::InvalidStatusCode
end

class WebSocket::Error::Handshake::InvalidStatusCode
end

class WebSocket::Error::Handshake::NoHostProvided
end

class WebSocket::Error::Handshake::NoHostProvided
end

class WebSocket::Error::Handshake::UnknownVersion
end

class WebSocket::Error::Handshake::UnknownVersion
end

class WebSocket::Error::Handshake::UnsupportedProtocol
end

class WebSocket::Error::Handshake::UnsupportedProtocol
end

class WebSocket::Error::Handshake
end

class WebSocket::Error
end

module WebSocket::ExceptionHandler
  def error(); end

  def error=(error); end
end

module WebSocket::ExceptionHandler::ClassMethods
  def rescue_method(method_name, options=T.unsafe(nil)); end
end

module WebSocket::ExceptionHandler::ClassMethods
end

module WebSocket::ExceptionHandler
  def self.included(base); end
end

class WebSocket::Extensions
  MESSAGE_OPCODES = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser
  EXT = ::T.let(nil, ::T.untyped)
  EXT_LIST = ::T.let(nil, ::T.untyped)
  NOTOKEN = ::T.let(nil, ::T.untyped)
  NUMBER = ::T.let(nil, ::T.untyped)
  PARAM = ::T.let(nil, ::T.untyped)
  QUOTED = ::T.let(nil, ::T.untyped)
  TOKEN = ::T.let(nil, ::T.untyped)
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser::ParseError
end

class WebSocket::Extensions::Parser
  def self.parse_header(header); end

  def self.serialize_params(name, params); end
end

module WebSocket::Frame
end

class WebSocket::Frame::Base
  include ::WebSocket::ExceptionHandler
  include ::WebSocket::NiceInspect
  def code(); end

  def code=(code); end

  def data(); end

  def data=(data); end

  def error?(); end

  def initialize(*args); end

  def initialize_with_rescue(*args); end

  def support_type?(); end

  def supported_frames(); end

  def type(); end

  def version(); end
end

class WebSocket::Frame::Base
  extend ::WebSocket::ExceptionHandler::ClassMethods
end

class WebSocket::Frame::Data
  def <<(*args); end

  def convert_args(args); end

  def getbytes(start_index, count); end

  def initialize(*args); end

  def mask(payload, mask); end

  def set_mask(); end

  def unset_mask(); end
end

class WebSocket::Frame::Data
end

module WebSocket::Frame::Handler
end

class WebSocket::Frame::Handler::Base
  def decode_frame(); end

  def encode_frame(); end

  def initialize(frame); end
end

class WebSocket::Frame::Handler::Base
end

class WebSocket::Frame::Handler::Handler03
  def masking?(); end

  def supported_frames(); end
  FRAME_TYPES = ::T.let(nil, ::T.untyped)
  FRAME_TYPES_INVERSE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Frame::Handler::Handler03
end

class WebSocket::Frame::Handler::Handler04
end

class WebSocket::Frame::Handler::Handler04
end

class WebSocket::Frame::Handler::Handler05
end

class WebSocket::Frame::Handler::Handler05
end

class WebSocket::Frame::Handler::Handler07
  FRAME_TYPES = ::T.let(nil, ::T.untyped)
  FRAME_TYPES_INVERSE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Frame::Handler::Handler07
end

class WebSocket::Frame::Handler::Handler75
  def supported_frames(); end
end

class WebSocket::Frame::Handler::Handler75
end

module WebSocket::Frame::Handler
end

class WebSocket::Frame::Incoming
  def <<(data); end

  def decoded?(); end

  def initialize(args=T.unsafe(nil)); end

  def next(*args); end

  def next_with_rescue(*args); end

  def next_without_rescue(); end
end

class WebSocket::Frame::Incoming::Client
  def incoming_masking?(); end

  def outgoing_masking?(); end
end

class WebSocket::Frame::Incoming::Client
end

class WebSocket::Frame::Incoming::Server
  def incoming_masking?(); end

  def outgoing_masking?(); end
end

class WebSocket::Frame::Incoming::Server
end

class WebSocket::Frame::Incoming
end

class WebSocket::Frame::Outgoing
  def require_sending?(); end

  def supported?(); end

  def to_s(*args); end

  def to_s_with_rescue(*args); end

  def to_s_without_rescue(); end
end

class WebSocket::Frame::Outgoing::Client
  def incoming_masking?(); end

  def outgoing_masking?(); end
end

class WebSocket::Frame::Outgoing::Client
end

class WebSocket::Frame::Outgoing::Server
  def incoming_masking?(); end

  def outgoing_masking?(); end
end

class WebSocket::Frame::Outgoing::Server
end

class WebSocket::Frame::Outgoing
end

module WebSocket::Frame
end

module WebSocket::HTTP
end

module WebSocket::HTTP::Headers
  def complete?(); end

  def error?(); end

  def headers(); end

  def initialize(); end

  def parse(chunk); end
  CR = ::T.let(nil, ::T.untyped)
  HEADER_LINE = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
  MAX_LINE_LENGTH = ::T.let(nil, ::T.untyped)
end

module WebSocket::HTTP::Headers
end

class WebSocket::HTTP::Request
  include ::WebSocket::HTTP::Headers
  def env(); end
  REQUEST_LINE = ::T.let(nil, ::T.untyped)
  REQUEST_TARGET = ::T.let(nil, ::T.untyped)
  RESERVED_HEADERS = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Request
end

class WebSocket::HTTP::Response
  include ::WebSocket::HTTP::Headers
  def [](name); end

  def body(); end

  def code(); end
  STATUS_LINE = ::T.let(nil, ::T.untyped)
end

class WebSocket::HTTP::Response
end

module WebSocket::HTTP
  def self.normalize_header(name); end
end

module WebSocket::Handshake
end

class WebSocket::Handshake::Base
  include ::WebSocket::ExceptionHandler
  include ::WebSocket::NiceInspect
  def <<(data); end

  def default_port(); end

  def default_port?(); end

  def finished?(); end

  def headers(); end

  def host(); end

  def initialize(args=T.unsafe(nil)); end

  def leftovers(); end

  def path(); end

  def port(); end

  def protocols(); end

  def query(); end

  def secure(); end

  def should_respond?(); end

  def state(); end

  def to_s(*args); end

  def to_s_with_rescue(*args); end

  def to_s_without_rescue(); end

  def uri(); end

  def valid?(*args); end

  def version(); end
  HEADER = ::T.let(nil, ::T.untyped)
end

class WebSocket::Handshake::Base
  extend ::WebSocket::ExceptionHandler::ClassMethods
end

class WebSocket::Handshake::Client
  def <<(*args); end

  def initialize(*args); end

  def initialize_with_rescue(*args); end

  def origin(); end
  FIRST_LINE = ::T.let(nil, ::T.untyped)
end

class WebSocket::Handshake::Client
end

module WebSocket::Handshake::Handler
end

class WebSocket::Handshake::Handler::Base
  def initialize(handshake); end

  def valid?(); end
end

class WebSocket::Handshake::Handler::Base
end

class WebSocket::Handshake::Handler::Client
end

class WebSocket::Handshake::Handler::Client
end

class WebSocket::Handshake::Handler::Client01
end

class WebSocket::Handshake::Handler::Client01
end

class WebSocket::Handshake::Handler::Client04
end

class WebSocket::Handshake::Handler::Client04
end

class WebSocket::Handshake::Handler::Client11
end

class WebSocket::Handshake::Handler::Client11
end

class WebSocket::Handshake::Handler::Client75
end

class WebSocket::Handshake::Handler::Client75
end

class WebSocket::Handshake::Handler::Client76
  NOISE_CHARS = ::T.let(nil, ::T.untyped)
end

class WebSocket::Handshake::Handler::Client76
end

class WebSocket::Handshake::Handler::Server
end

class WebSocket::Handshake::Handler::Server
end

class WebSocket::Handshake::Handler::Server04
end

class WebSocket::Handshake::Handler::Server04
end

class WebSocket::Handshake::Handler::Server75
end

class WebSocket::Handshake::Handler::Server75
end

class WebSocket::Handshake::Handler::Server76
end

class WebSocket::Handshake::Handler::Server76
end

module WebSocket::Handshake::Handler
end

class WebSocket::Handshake::Server
  def <<(*args); end

  def from_hash(hash); end

  def from_rack(env); end
  PATH = ::T.let(nil, ::T.untyped)
end

class WebSocket::Handshake::Server
end

module WebSocket::Handshake
end

module WebSocket::NiceInspect
  def inspect(); end
end

module WebSocket::NiceInspect
end

module Webrobots
  VERSION = ::T.let(nil, ::T.untyped)
end

module XPath::DSL
  AXES = ::T.let(nil, ::T.untyped)
  LOWERCASE_LETTERS = ::T.let(nil, ::T.untyped)
  METHODS = ::T.let(nil, ::T.untyped)
  OPERATORS = ::T.let(nil, ::T.untyped)
  UPPERCASE_LETTERS = ::T.let(nil, ::T.untyped)
end

module YARD
  CONFIG_DIR = ::T.let(nil, ::T.untyped)
  ROOT = ::T.let(nil, ::T.untyped)
  TEMPLATE_ROOT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class YARD::CLI::CommandParser
  def run(*args); end
end

class YARD::CLI::CommandParser
  def self.commands(); end

  def self.commands=(commands); end

  def self.default_command(); end

  def self.default_command=(default_command); end

  def self.run(*args); end
end

class YARD::CLI::Config
  def append(); end

  def append=(append); end

  def as_list(); end

  def as_list=(as_list); end

  def gem_install_cmd(); end

  def gem_install_cmd=(gem_install_cmd); end

  def key(); end

  def key=(key); end

  def reset(); end

  def reset=(reset); end

  def run(*args); end

  def values(); end

  def values=(values); end
end

class YARD::CLI::Config
end

class YARD::CLI::Diff
  def run(*args); end
end

class YARD::CLI::Diff
end

class YARD::CLI::Display
  def format_objects(); end

  def initialize(*args); end

  def wrap_layout(contents); end
end

class YARD::CLI::Display
end

class YARD::CLI::Gems
  def run(*args); end
end

class YARD::CLI::Gems
end

class YARD::CLI::Graph
  def objects(); end

  def options(); end

  def run(*args); end
end

class YARD::CLI::Graph
end

class YARD::CLI::Help
  def run(*args); end
end

class YARD::CLI::Help
end

class YARD::CLI::I18n
end

class YARD::CLI::I18n
end

class YARD::CLI::List
  def run(*args); end
end

class YARD::CLI::List
end

class YARD::CLI::MarkupTypes
  def run(*args); end
end

class YARD::CLI::MarkupTypes
end

class YARD::CLI::Server
  def adapter(); end

  def adapter=(adapter); end

  def libraries(); end

  def libraries=(libraries); end

  def options(); end

  def options=(options); end

  def run(*args); end

  def scripts(); end

  def scripts=(scripts); end

  def server_options(); end

  def server_options=(server_options); end

  def template_paths(); end

  def template_paths=(template_paths); end
end

class YARD::CLI::Server
end

class YARD::CLI::Stats
  include ::YARD::Templates::Helpers::BaseHelper
  def initialize(parse=T.unsafe(nil)); end

  def output(name, data, undoc=T.unsafe(nil)); end

  def parse(); end

  def parse=(parse); end

  def print_statistics(); end

  def print_undocumented_objects(); end

  def stats_for_attributes(); end

  def stats_for_classes(); end

  def stats_for_constants(); end

  def stats_for_files(); end

  def stats_for_methods(); end

  def stats_for_modules(); end
  STATS_ORDER = ::T.let(nil, ::T.untyped)
end

class YARD::CLI::Stats
end

class YARD::CLI::YRI
  def cache_object(name, path); end

  def find_object(name); end

  def print_object(object); end

  def print_usage(); end

  def run(*args); end
  CACHE_FILE = ::T.let(nil, ::T.untyped)
  DEFAULT_SEARCH_PATHS = ::T.let(nil, ::T.untyped)
  SEARCH_PATHS_FILE = ::T.let(nil, ::T.untyped)
end

class YARD::CLI::YRI
end

class YARD::CLI::YardoptsCommand
  DEFAULT_YARDOPTS_FILE = ::T.let(nil, ::T.untyped)
end

module YARD::CodeObjects
  BUILTIN_ALL = ::T.let(nil, ::T.untyped)
  BUILTIN_CLASSES = ::T.let(nil, ::T.untyped)
  BUILTIN_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  BUILTIN_EXCEPTIONS_HASH = ::T.let(nil, ::T.untyped)
  BUILTIN_MODULES = ::T.let(nil, ::T.untyped)
  CONSTANTMATCH = ::T.let(nil, ::T.untyped)
  CONSTANTSTART = ::T.let(nil, ::T.untyped)
  CSEP = ::T.let(nil, ::T.untyped)
  CSEPQ = ::T.let(nil, ::T.untyped)
  ISEP = ::T.let(nil, ::T.untyped)
  ISEPQ = ::T.let(nil, ::T.untyped)
  METHODMATCH = ::T.let(nil, ::T.untyped)
  METHODNAMEMATCH = ::T.let(nil, ::T.untyped)
  NAMESPACEMATCH = ::T.let(nil, ::T.untyped)
  NSEP = ::T.let(nil, ::T.untyped)
  NSEPQ = ::T.let(nil, ::T.untyped)
  PROXY_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::CodeObjects::Base
  def ==(other); end

  def [](key); end

  def []=(key, value); end

  def add_file(file, line=T.unsafe(nil), has_comments=T.unsafe(nil)); end

  def add_tag(*tags); end

  def base_docstring(); end

  def copy_to(other); end

  def copyable_attributes(); end

  def docstring(locale=T.unsafe(nil)); end

  def docstring=(comments); end

  def dynamic(); end

  def dynamic=(dynamic); end

  def dynamic?(); end

  def eql?(other); end

  def equal?(other); end

  def file(); end

  def files(); end

  def format(options=T.unsafe(nil)); end

  def group(); end

  def group=(group); end

  def has_tag?(name); end

  def line(); end

  def method_missing(meth, *args, &block); end

  def name(prefix=T.unsafe(nil)); end

  def namespace(); end

  def namespace=(obj); end

  def parent(); end

  def parent=(obj); end

  def path(); end

  def relative_path(other); end

  def root?(); end

  def sep(); end

  def signature(); end

  def signature=(signature); end

  def source(); end

  def source=(statement); end

  def source_type(); end

  def source_type=(source_type); end

  def tag(name); end

  def tags(name=T.unsafe(nil)); end

  def title(); end

  def to_ary(); end

  def type(); end

  def visibility(); end

  def visibility=(v); end
end

class YARD::CodeObjects::Base
  def self.===(other); end

  def self.new(namespace, name, *args, &block); end
end

class YARD::CodeObjects::ClassObject
  def inheritance_tree(include_mods=T.unsafe(nil)); end

  def inherited_constants(); end

  def inherited_meths(opts=T.unsafe(nil)); end

  def is_exception?(); end

  def superclass(); end

  def superclass=(object); end
end

class YARD::CodeObjects::ClassVariableObject
  def value(); end

  def value=(value); end
end

class YARD::CodeObjects::ClassVariableObject
end

class YARD::CodeObjects::CodeObjectList
  def <<(value); end

  def initialize(owner=T.unsafe(nil)); end

  def push(value); end
end

class YARD::CodeObjects::ConstantObject
  def value(); end

  def value=(value); end
end

class YARD::CodeObjects::ExtendedMethodObject
  def initialize(obj); end

  def method_missing(sym, *args, &block); end

  def scope(); end
end

class YARD::CodeObjects::ExtendedMethodObject
end

class YARD::CodeObjects::ExtraFileObject
  def ==(other); end

  def attributes(); end

  def attributes=(attributes); end

  def contents(); end

  def contents=(contents); end

  def eql?(other); end

  def equal?(other); end

  def filename(); end

  def filename=(filename); end

  def initialize(filename, contents=T.unsafe(nil)); end

  def locale(); end

  def locale=(locale); end

  def name(); end

  def name=(name); end

  def path(); end

  def title(); end

  def type(); end
end

class YARD::CodeObjects::ExtraFileObject
end

class YARD::CodeObjects::MacroObject
  def attached?(); end

  def expand(call_params=T.unsafe(nil), full_source=T.unsafe(nil), block_source=T.unsafe(nil)); end

  def macro_data(); end

  def macro_data=(macro_data); end

  def method_object(); end

  def method_object=(method_object); end
  MACRO_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::CodeObjects::MacroObject
  def self.apply(docstring, call_params=T.unsafe(nil), full_source=T.unsafe(nil), block_source=T.unsafe(nil), _method_object=T.unsafe(nil)); end

  def self.apply_macro(macro, docstring, call_params=T.unsafe(nil), full_source=T.unsafe(nil), block_source=T.unsafe(nil)); end

  def self.create(macro_name, data, method_object=T.unsafe(nil)); end

  def self.create_docstring(macro_name, data, method_object=T.unsafe(nil)); end

  def self.expand(macro_data, call_params=T.unsafe(nil), full_source=T.unsafe(nil), block_source=T.unsafe(nil)); end

  def self.find(macro_name); end

  def self.find_or_create(macro_name, data, method_object=T.unsafe(nil)); end
end

class YARD::CodeObjects::MethodObject
  def aliases(); end

  def attr_info(); end

  def constructor?(); end

  def explicit(); end

  def explicit=(explicit); end

  def initialize(namespace, name, scope=T.unsafe(nil), &block); end

  def is_alias?(); end

  def is_attribute?(); end

  def is_explicit?(); end

  def module_function?(); end

  def overridden_method(); end

  def parameters(); end

  def parameters=(parameters); end

  def reader?(); end

  def scope(); end

  def scope=(v); end

  def writer?(); end
end

class YARD::CodeObjects::ModuleObject
  def inheritance_tree(include_mods=T.unsafe(nil)); end
end

class YARD::CodeObjects::ModuleObject
end

module YARD::CodeObjects::NamespaceMapper
  def clear_separators(); end

  def default_separator(value=T.unsafe(nil)); end

  def register_separator(sep, *valid_types); end

  def separators(); end

  def separators_for_type(type); end

  def separators_match(); end

  def types_for_separator(sep); end

  def unregister_separator_by_type(type); end
end

module YARD::CodeObjects::NamespaceMapper
  def self.default_separator(); end

  def self.default_separator=(default_separator); end

  def self.invalidate(); end

  def self.map(); end

  def self.map_match(); end

  def self.on_invalidate(&block); end

  def self.rev_map(); end
end

class YARD::CodeObjects::NamespaceObject
  def aliases(); end

  def attributes(); end

  def child(opts=T.unsafe(nil)); end

  def children(); end

  def class_attributes(); end

  def class_mixins(); end

  def constants(opts=T.unsafe(nil)); end

  def cvars(); end

  def groups(); end

  def groups=(groups); end

  def included_constants(); end

  def included_meths(opts=T.unsafe(nil)); end

  def initialize(namespace, name, *args, &block); end

  def instance_attributes(); end

  def instance_mixins(); end

  def meths(opts=T.unsafe(nil)); end
end

class YARD::CodeObjects::Proxy
  def ==(other); end

  def ===(other); end

  def equal?(other); end

  def instance_of?(klass); end

  def is_a?(klass); end

  def kind_of?(klass); end

  def method_missing(meth, *args, &block); end

  def name(prefix=T.unsafe(nil)); end

  def namespace(); end

  def parent(); end

  def path(); end

  def respond_to?(meth, include_private=T.unsafe(nil)); end

  def root?(); end

  def title(); end

  def to_str(); end

  def type(); end

  def type=(type); end
end

class YARD::CodeObjects::Proxy
  def self.===(other); end
end

class YARD::CodeObjects::ProxyMethodError
end

class YARD::CodeObjects::ProxyMethodError
end

class YARD::CodeObjects::RootObject
end

class YARD::CodeObjects::RootObject
end

class YARD::Config
  CONFIG_DIR = ::T.let(nil, ::T.untyped)
  CONFIG_FILE = ::T.let(nil, ::T.untyped)
  DEFAULT_CONFIG_OPTIONS = ::T.let(nil, ::T.untyped)
  IGNORED_PLUGINS = ::T.let(nil, ::T.untyped)
  YARD_PLUGIN_PREFIX = ::T.let(nil, ::T.untyped)
end

class YARD::Docstring
  def +(other); end

  def add_tag(*tags); end

  def all(); end

  def all=(content, parse=T.unsafe(nil)); end

  def blank?(only_visible_tags=T.unsafe(nil)); end

  def delete_tag_if(&block); end

  def delete_tags(name); end

  def has_tag?(name); end

  def hash_flag(); end

  def hash_flag=(v); end

  def initialize(content=T.unsafe(nil), object=T.unsafe(nil)); end

  def line(); end

  def line_range(); end

  def line_range=(line_range); end

  def object(); end

  def object=(object); end

  def ref_tags(); end

  def replace(content, parse=T.unsafe(nil)); end

  def resolve_reference(); end

  def summary(); end

  def tag(name); end

  def tags(name=T.unsafe(nil)); end

  def to_raw(); end
  META_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Docstring
  def self.default_parser(); end

  def self.default_parser=(default_parser); end

  def self.new!(text, tags=T.unsafe(nil), object=T.unsafe(nil), raw_data=T.unsafe(nil), ref_object=T.unsafe(nil)); end

  def self.parser(*args); end
end

class YARD::DocstringParser
  def create_directive(tag_name, tag_buf); end

  def create_ref_tag(tag_name, name, object_name); end

  def create_tag(tag_name, tag_buf=T.unsafe(nil)); end

  def directives(); end

  def directives=(directives); end

  def handler(); end

  def handler=(handler); end

  def initialize(library=T.unsafe(nil)); end

  def library(); end

  def library=(library); end

  def object(); end

  def object=(object); end

  def parse(content, object=T.unsafe(nil), handler=T.unsafe(nil)); end

  def parse_content(content); end

  def post_process(); end

  def raw_text(); end

  def raw_text=(raw_text); end

  def reference(); end

  def reference=(reference); end

  def state(); end

  def state=(state); end

  def tag_is_directive?(tag_name); end

  def tags(); end

  def tags=(tags); end

  def text(); end

  def text=(text); end

  def to_docstring(); end
  META_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::DocstringParser
  def self.after_parse(&block); end

  def self.after_parse_callbacks(); end
end

module YARD::GemIndex
end

module YARD::GemIndex
  def self.all(); end

  def self.each(&block); end

  def self.find_all_by_name(*args); end
end

class YARD::Handlers::Base
  def abort!(); end

  def call_params(); end

  def caller_method(); end

  def ensure_loaded!(object, max_retries=T.unsafe(nil)); end

  def extra_state(); end

  def globals(); end

  def initialize(source_parser, stmt); end

  def namespace(); end

  def namespace=(v); end

  def owner(); end

  def owner=(v); end

  def parse_block(*arg); end

  def parser(); end

  def process(); end

  def push_state(opts=T.unsafe(nil)); end

  def register(*objects); end

  def register_docstring(object, docstring=T.unsafe(nil), stmt=T.unsafe(nil)); end

  def register_dynamic(object); end

  def register_ensure_loaded(object); end

  def register_file_info(object, file=T.unsafe(nil), line=T.unsafe(nil), comments=T.unsafe(nil)); end

  def register_group(object, group=T.unsafe(nil)); end

  def register_module_function(object); end

  def register_source(object, source=T.unsafe(nil), type=T.unsafe(nil)); end

  def register_transitive_tags(object); end

  def register_visibility(object, visibility=T.unsafe(nil)); end

  def scope(); end

  def scope=(v); end

  def statement(); end

  def visibility(); end

  def visibility=(v); end
end

class YARD::Handlers::Base
  def self.clear_subclasses(); end

  def self.handles(*matches); end

  def self.handles?(statement); end

  def self.in_file(filename); end

  def self.inherited(subclass); end

  def self.matches_file?(filename); end

  def self.namespace_only(); end

  def self.namespace_only?(); end

  def self.process(&block); end
end

class YARD::Handlers::C::AliasHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::AliasHandler
end

class YARD::Handlers::C::AttributeHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::AttributeHandler
end

class YARD::Handlers::C::Base
  include ::YARD::Handlers::C::HandlerMethods
  include ::YARD::Parser::C
  include ::YARD::Handlers::Common::MethodHandler
  def ensure_variable_defined!(var, max_retries=T.unsafe(nil)); end

  def namespace_for_variable(var); end

  def namespaces(); end

  def override_comments(); end

  def parse_block(opts=T.unsafe(nil)); end

  def process_file(file, object); end

  def processed_files(); end

  def symbols(); end
  ERROR_CLASS_NAMES = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::Base
  def self.handles?(statement, processor); end

  def self.statement_class(type=T.unsafe(nil)); end
end

class YARD::Handlers::C::ClassHandler
  MATCH1 = ::T.let(nil, ::T.untyped)
  MATCH2 = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::ClassHandler
end

class YARD::Handlers::C::ConstantHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::ConstantHandler
end

module YARD::Handlers::C::HandlerMethods
  include ::YARD::Parser::C
  include ::YARD::CodeObjects
  include ::YARD::Handlers::Common::MethodHandler
  def handle_alias(var_name, new_name, old_name); end

  def handle_attribute(var_name, name, read, write); end

  def handle_class(var_name, class_name, parent, in_module=T.unsafe(nil)); end

  def handle_constants(type, var_name, const_name, value); end

  def handle_method(scope, var_name, name, func_name, _source_file=T.unsafe(nil)); end

  def handle_module(var_name, module_name, in_module=T.unsafe(nil)); end
end

module YARD::Handlers::C::HandlerMethods
end

class YARD::Handlers::C::InitHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::InitHandler
end

class YARD::Handlers::C::MethodHandler
  MATCH1 = ::T.let(nil, ::T.untyped)
  MATCH2 = ::T.let(nil, ::T.untyped)
  MATCH3 = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::MethodHandler
end

class YARD::Handlers::C::MixinHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::MixinHandler
end

class YARD::Handlers::C::ModuleHandler
  MATCH1 = ::T.let(nil, ::T.untyped)
  MATCH2 = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::ModuleHandler
end

class YARD::Handlers::C::OverrideCommentHandler
end

class YARD::Handlers::C::OverrideCommentHandler
end

class YARD::Handlers::C::PathHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::PathHandler
end

class YARD::Handlers::C::StructHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::StructHandler
end

class YARD::Handlers::C::SymbolHandler
  MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::C::SymbolHandler
end

module YARD::Handlers::Common::MethodHandler
  def add_predicate_return_tag(obj); end
end

module YARD::Handlers::Common::MethodHandler
end

class YARD::Handlers::NamespaceMissingError
  def initialize(object); end

  def object(); end

  def object=(object); end
end

class YARD::Handlers::Processor
  def extra_state(); end

  def extra_state=(extra_state); end

  def file(); end

  def file=(file); end

  def find_handlers(statement); end

  def globals(); end

  def globals=(globals); end

  def initialize(parser); end

  def namespace(); end

  def namespace=(namespace); end

  def owner(); end

  def owner=(owner); end

  def parse_remaining_files(); end

  def parser_type(); end

  def parser_type=(parser_type); end

  def process(statements); end

  def scope(); end

  def scope=(scope); end

  def visibility(); end

  def visibility=(visibility); end
end

class YARD::Handlers::Processor
  def self.namespace_for_handler(); end

  def self.register_handler_namespace(type, ns); end
end

class YARD::Handlers::Ruby::AliasHandler
end

class YARD::Handlers::Ruby::AliasHandler
end

class YARD::Handlers::Ruby::AttributeHandler
  def validated_attribute_names(params); end
end

class YARD::Handlers::Ruby::Base
  def parse_block(inner_node, opts=T.unsafe(nil)); end
end

class YARD::Handlers::Ruby::Base
  extend ::YARD::Parser::Ruby
  def self.handles?(node); end

  def self.meta_type(type); end

  def self.method_call(name=T.unsafe(nil)); end
end

class YARD::Handlers::Ruby::ClassConditionHandler
  def parse_condition(); end

  def parse_else_block(); end

  def parse_then_block(); end
end

class YARD::Handlers::Ruby::ClassConditionHandler
end

class YARD::Handlers::Ruby::ClassHandler
  include ::YARD::Handlers::Ruby::StructHandlerMethods
end

class YARD::Handlers::Ruby::ClassHandler
end

class YARD::Handlers::Ruby::ClassVariableHandler
end

class YARD::Handlers::Ruby::ClassVariableHandler
end

class YARD::Handlers::Ruby::CommentHandler
end

class YARD::Handlers::Ruby::CommentHandler
end

class YARD::Handlers::Ruby::ConstantHandler
  include ::YARD::Handlers::Ruby::StructHandlerMethods
end

class YARD::Handlers::Ruby::ConstantHandler
end

class YARD::Handlers::Ruby::DSLHandler
  include ::YARD::Handlers::Ruby::DSLHandlerMethods
end

class YARD::Handlers::Ruby::DSLHandler
end

module YARD::Handlers::Ruby::DSLHandlerMethods
  include ::YARD::CodeObjects
  include ::YARD::Parser
  def handle_comments(); end

  def register_docstring(object, docstring=T.unsafe(nil), stmt=T.unsafe(nil)); end
  IGNORE_METHODS = ::T.let(nil, ::T.untyped)
end

module YARD::Handlers::Ruby::DSLHandlerMethods
end

module YARD::Handlers::Ruby::DecoratorHandlerMethods
  def process_decorator(*nodes, &block); end
end

module YARD::Handlers::Ruby::DecoratorHandlerMethods
end

class YARD::Handlers::Ruby::ExceptionHandler
end

class YARD::Handlers::Ruby::ExceptionHandler
end

class YARD::Handlers::Ruby::ExtendHandler
end

class YARD::Handlers::Ruby::ExtendHandler
end

class YARD::Handlers::Ruby::HandlesExtension
  def initialize(name); end

  def matches?(node); end

  def name(); end
end

class YARD::Handlers::Ruby::Legacy::AliasHandler
end

class YARD::Handlers::Ruby::Legacy::AliasHandler
end

class YARD::Handlers::Ruby::Legacy::AttributeHandler
end

class YARD::Handlers::Ruby::Legacy::AttributeHandler
end

class YARD::Handlers::Ruby::Legacy::Base
  include ::YARD::Parser::Ruby::Legacy::RubyToken
  def parse_block(opts=T.unsafe(nil)); end
end

class YARD::Handlers::Ruby::Legacy::Base
  def self.handles?(stmt); end
end

class YARD::Handlers::Ruby::Legacy::ClassConditionHandler
  def parse_condition(); end

  def parse_else_block(); end

  def parse_then_block(); end
end

class YARD::Handlers::Ruby::Legacy::ClassConditionHandler
end

class YARD::Handlers::Ruby::Legacy::ClassHandler
  include ::YARD::Handlers::Ruby::StructHandlerMethods
end

class YARD::Handlers::Ruby::Legacy::ClassHandler
end

class YARD::Handlers::Ruby::Legacy::ClassVariableHandler
  HANDLER_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::Ruby::Legacy::ClassVariableHandler
end

class YARD::Handlers::Ruby::Legacy::CommentHandler
end

class YARD::Handlers::Ruby::Legacy::CommentHandler
end

class YARD::Handlers::Ruby::Legacy::ConstantHandler
  include ::YARD::Handlers::Ruby::StructHandlerMethods
  HANDLER_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Handlers::Ruby::Legacy::ConstantHandler
end

class YARD::Handlers::Ruby::Legacy::DSLHandler
  include ::YARD::Handlers::Ruby::DSLHandlerMethods
end

class YARD::Handlers::Ruby::Legacy::DSLHandler
end

class YARD::Handlers::Ruby::Legacy::ExceptionHandler
end

class YARD::Handlers::Ruby::Legacy::ExceptionHandler
end

class YARD::Handlers::Ruby::Legacy::ExtendHandler
end

class YARD::Handlers::Ruby::Legacy::ExtendHandler
end

class YARD::Handlers::Ruby::Legacy::MethodHandler
end

class YARD::Handlers::Ruby::Legacy::MethodHandler
end

class YARD::Handlers::Ruby::Legacy::MixinHandler
end

class YARD::Handlers::Ruby::Legacy::MixinHandler
end

class YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler
end

class YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler
end

class YARD::Handlers::Ruby::Legacy::ModuleHandler
end

class YARD::Handlers::Ruby::Legacy::ModuleHandler
end

class YARD::Handlers::Ruby::Legacy::PrivateClassMethodHandler
end

class YARD::Handlers::Ruby::Legacy::PrivateClassMethodHandler
end

class YARD::Handlers::Ruby::Legacy::PrivateConstantHandler
end

class YARD::Handlers::Ruby::Legacy::PrivateConstantHandler
end

class YARD::Handlers::Ruby::Legacy::VisibilityHandler
end

class YARD::Handlers::Ruby::Legacy::VisibilityHandler
end

class YARD::Handlers::Ruby::Legacy::YieldHandler
end

class YARD::Handlers::Ruby::Legacy::YieldHandler
end

class YARD::Handlers::Ruby::MethodConditionHandler
end

class YARD::Handlers::Ruby::MethodConditionHandler
end

class YARD::Handlers::Ruby::MethodHandler
  include ::YARD::Handlers::Common::MethodHandler
  def format_args(); end
end

class YARD::Handlers::Ruby::MixinHandler
  def process_mixin(mixin); end

  def recipient(mixin); end
end

class YARD::Handlers::Ruby::MixinHandler
end

class YARD::Handlers::Ruby::ModuleFunctionHandler
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
  def make_module_function(instance_method, namespace); end
end

class YARD::Handlers::Ruby::ModuleFunctionHandler
end

class YARD::Handlers::Ruby::ModuleHandler
end

class YARD::Handlers::Ruby::ModuleHandler
end

class YARD::Handlers::Ruby::PrivateClassMethodHandler
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
end

class YARD::Handlers::Ruby::PrivateClassMethodHandler
end

class YARD::Handlers::Ruby::PrivateConstantHandler
end

class YARD::Handlers::Ruby::PrivateConstantHandler
end

class YARD::Handlers::Ruby::PublicClassMethodHandler
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
end

class YARD::Handlers::Ruby::PublicClassMethodHandler
end

module YARD::Handlers::Ruby::StructHandlerMethods
  include ::YARD::CodeObjects
  def add_reader_tags(klass, new_method, member); end

  def add_writer_tags(klass, new_method, member); end

  def create_attributes(klass, members); end

  def create_class(classname, superclass); end

  def create_member_method?(klass, member, type=T.unsafe(nil)); end

  def create_reader(klass, member); end

  def create_writer(klass, member); end

  def member_tag_for_member(klass, member, type=T.unsafe(nil)); end

  def members_from_tags(klass); end

  def return_type_from_tag(member_tag); end
end

module YARD::Handlers::Ruby::StructHandlerMethods
end

class YARD::Handlers::Ruby::VisibilityHandler
  include ::YARD::Handlers::Ruby::DecoratorHandlerMethods
  def is_attribute_method?(node); end
end

class YARD::Handlers::Ruby::VisibilityHandler
end

class YARD::Handlers::Ruby::YieldHandler
end

class YARD::Handlers::Ruby::YieldHandler
end

class YARD::I18n::Locale
  def initialize(name); end

  def load(locale_directory); end

  def name(); end

  def translate(message); end
end

class YARD::I18n::Locale
  def self.default(); end

  def self.default=(locale); end
end

class YARD::I18n::Message
  def ==(other); end

  def add_comment(comment); end

  def add_location(path, line); end

  def comments(); end

  def id(); end

  def initialize(id); end

  def locations(); end
end

class YARD::I18n::Message
end

class YARD::I18n::Messages
  include ::Enumerable
  def ==(other); end

  def [](id); end

  def each(&block); end

  def messages(); end

  def register(id); end
end

class YARD::I18n::Messages
end

class YARD::I18n::PotGenerator
  def generate(); end

  def initialize(relative_base_path); end

  def messages(); end

  def parse_files(files); end

  def parse_objects(objects); end
end

class YARD::I18n::PotGenerator
end

class YARD::I18n::Text
  def extract_messages(); end

  def initialize(input, options=T.unsafe(nil)); end

  def translate(locale); end
end

class YARD::I18n::Text
end

class YARD::Logger
  include ::YARD::Logger::Severity
  def <<(msg=T.unsafe(nil)); end

  def backtrace(exc, level_meth=T.unsafe(nil)); end

  def capture(msg, nontty_log=T.unsafe(nil)); end

  def clear_progress(); end

  def debug(message); end

  def enter_level(new_level=T.unsafe(nil)); end

  def error(message); end

  def fatal(message); end

  def info(message); end

  def initialize(pipe, *args); end

  def io(); end

  def io=(io); end

  def level(); end

  def level=(level); end

  def log(severity, message); end

  def print(msg=T.unsafe(nil)); end

  def progress(msg, nontty_log=T.unsafe(nil)); end

  def puts(msg=T.unsafe(nil)); end

  def show_backtraces(); end

  def show_backtraces=(show_backtraces); end

  def show_progress(); end

  def show_progress=(show_progress); end

  def unknown(message); end

  def warn(message); end

  def warn_no_continuations(); end

  def warned(); end

  def warned=(warned); end
  PROGRESS_INDICATORS = ::T.let(nil, ::T.untyped)
end

module YARD::Logger::Severity
  DEBUG = ::T.let(nil, ::T.untyped)
  ERROR = ::T.let(nil, ::T.untyped)
  FATAL = ::T.let(nil, ::T.untyped)
  INFO = ::T.let(nil, ::T.untyped)
  SEVERITIES = ::T.let(nil, ::T.untyped)
  UNKNOWN = ::T.let(nil, ::T.untyped)
  WARN = ::T.let(nil, ::T.untyped)
end

module YARD::Logger::Severity
end

class YARD::Logger
  def self.create_log_method(name); end

  def self.instance(pipe=T.unsafe(nil)); end
end

class YARD::OpenStruct
  def ==(other); end

  def [](key); end

  def []=(key, value); end

  def dig(*keys); end

  def each_pair(&block); end

  def initialize(hash=T.unsafe(nil)); end

  def marshal_dump(); end

  def marshal_load(data); end

  def method_missing(name, *args); end

  def to_h(); end
end

class YARD::OpenStruct
end

class YARD::Parser::Base
  def enumerator(); end

  def initialize(source, filename); end

  def parse(); end

  def tokenize(); end
end

class YARD::Parser::Base
  def self.parse(source, filename=T.unsafe(nil)); end
end

class YARD::Parser::OrderedParser
  def files(); end

  def files=(files); end

  def initialize(global_state, files); end

  def parse(); end
end

module YARD::Parser::Ruby
  def s(*args); end
end

module YARD::Parser::Ruby::Legacy::RubyToken
  def Token(token, value=T.unsafe(nil)); end

  def set_token_position(line, char); end
  EXPR_ARG = ::T.let(nil, ::T.untyped)
  EXPR_BEG = ::T.let(nil, ::T.untyped)
  EXPR_CLASS = ::T.let(nil, ::T.untyped)
  EXPR_DOT = ::T.let(nil, ::T.untyped)
  EXPR_END = ::T.let(nil, ::T.untyped)
  EXPR_FNAME = ::T.let(nil, ::T.untyped)
  EXPR_MID = ::T.let(nil, ::T.untyped)
  NEWLINE_TOKEN = ::T.let(nil, ::T.untyped)
  TkReading2Token = ::T.let(nil, ::T.untyped)
  TkSymbol2Token = ::T.let(nil, ::T.untyped)
  TokenDefinitions = ::T.let(nil, ::T.untyped)
end

module YARD::Parser::Ruby::Legacy::RubyToken
  def self.def_token(token_n, super_token=T.unsafe(nil), reading=T.unsafe(nil), *opts); end
end

class YARD::Parser::SourceParser
  def contents(); end

  def file(); end

  def file=(file); end

  def globals(); end

  def initialize(parser_type=T.unsafe(nil), globals1=T.unsafe(nil), globals2=T.unsafe(nil)); end

  def parse(content=T.unsafe(nil)); end

  def parser_type(); end

  def tokenize(content); end
  DEFAULT_PATH_GLOB = ::T.let(nil, ::T.untyped)
  ENCODING_BYTE_ORDER_MARKS = ::T.let(nil, ::T.untyped)
  ENCODING_LINE = ::T.let(nil, ::T.untyped)
  FROZEN_STRING_LINE = ::T.let(nil, ::T.untyped)
  SHEBANG_LINE = ::T.let(nil, ::T.untyped)
end

class YARD::Parser::SourceParser
  def self.after_parse_file(&block); end

  def self.after_parse_file_callbacks(); end

  def self.after_parse_list(&block); end

  def self.after_parse_list_callbacks(); end

  def self.before_parse_file(&block); end

  def self.before_parse_file_callbacks(); end

  def self.before_parse_list(&block); end

  def self.before_parse_list_callbacks(); end

  def self.parse(paths=T.unsafe(nil), excluded=T.unsafe(nil), level=T.unsafe(nil)); end

  def self.parse_string(content, ptype=T.unsafe(nil)); end

  def self.parser_type(); end

  def self.parser_type=(value); end

  def self.parser_type_extensions(); end

  def self.parser_type_extensions=(value); end

  def self.parser_type_for_extension(extension); end

  def self.parser_types(); end

  def self.parser_types=(value); end

  def self.register_parser_type(type, parser_klass, extensions=T.unsafe(nil)); end

  def self.tokenize(content, ptype=T.unsafe(nil)); end

  def self.validated_parser_type(type); end
end

class YARD::Rake::YardocTask
  def after(); end

  def after=(after); end

  def before(); end

  def before=(before); end

  def define(); end

  def files(); end

  def files=(files); end

  def initialize(name=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def options(); end

  def options=(options); end

  def stats_options(); end

  def stats_options=(stats_options); end

  def verifier(); end

  def verifier=(verifier); end
end

class YARD::Rake::YardocTask
end

module YARD::Registry
  DEFAULT_PO_DIR = ::T.let(nil, ::T.untyped)
  DEFAULT_YARDOC_FILE = ::T.let(nil, ::T.untyped)
  LOCAL_YARDOC_INDEX = ::T.let(nil, ::T.untyped)
end

module YARD::Registry
  def self.[](path); end

  def self.all(*types); end

  def self.at(path); end

  def self.checksum_for(data); end

  def self.checksums(); end

  def self.clear(); end

  def self.delete(object); end

  def self.delete_from_disk(); end

  def self.each(&block); end

  def self.instance(); end

  def self.load(files=T.unsafe(nil), reparse=T.unsafe(nil)); end

  def self.load!(file=T.unsafe(nil)); end

  def self.load_all(); end

  def self.load_yardoc(file=T.unsafe(nil)); end

  def self.locale(name); end

  def self.lock_for_writing(file=T.unsafe(nil), &block); end

  def self.locked_for_writing?(file=T.unsafe(nil)); end

  def self.paths(reload=T.unsafe(nil)); end

  def self.po_dir(); end

  def self.po_dir=(dir); end

  def self.proxy_types(); end

  def self.register(object); end

  def self.resolve(namespace, name, inheritance=T.unsafe(nil), proxy_fallback=T.unsafe(nil), type=T.unsafe(nil)); end

  def self.root(); end

  def self.save(merge=T.unsafe(nil), file=T.unsafe(nil)); end

  def self.single_object_db(); end

  def self.single_object_db=(v); end

  def self.yardoc_file(); end

  def self.yardoc_file=(v); end

  def self.yardoc_file_for_gem(gem, ver_require=T.unsafe(nil), for_writing=T.unsafe(nil)); end
end

class YARD::RegistryResolver
  include ::YARD::CodeObjects::NamespaceMapper
  def initialize(registry=T.unsafe(nil)); end

  def lookup_by_path(path, opts=T.unsafe(nil)); end
end

class YARD::RegistryResolver
end

class YARD::RegistryStore
  def [](key); end

  def []=(key, value); end

  def checksums(); end

  def checksums_path(); end

  def delete(key); end

  def destroy(force=T.unsafe(nil)); end

  def file(); end

  def get(key); end

  def keys(reload=T.unsafe(nil)); end

  def load(file=T.unsafe(nil)); end

  def load!(file=T.unsafe(nil)); end

  def load_all(); end

  def load_yardoc(); end

  def locale(name); end

  def lock_for_writing(file=T.unsafe(nil), &block); end

  def locked_for_writing?(file=T.unsafe(nil)); end

  def object_types_path(); end

  def objects_path(); end

  def paths_for_type(type, reload=T.unsafe(nil)); end

  def proxy_types(); end

  def proxy_types_path(); end

  def put(key, value); end

  def root(); end

  def save(merge=T.unsafe(nil), file=T.unsafe(nil)); end

  def values(reload=T.unsafe(nil)); end

  def values_for_type(type, reload=T.unsafe(nil)); end
end

class YARD::RegistryStore
end

class YARD::Serializers::Base
  def after_serialize(data); end

  def before_serialize(); end

  def exists?(object); end

  def initialize(opts=T.unsafe(nil)); end

  def options(); end

  def serialize(object, data); end

  def serialized_path(object); end
end

class YARD::Serializers::Base
end

class YARD::Serializers::FileSystemSerializer
  def basepath(); end

  def basepath=(value); end

  def extension(); end

  def extension=(value); end
end

class YARD::Serializers::FileSystemSerializer
end

class YARD::Serializers::ProcessSerializer
  def initialize(cmd); end

  def serialize(_object, data); end
end

class YARD::Serializers::ProcessSerializer
end

class YARD::Serializers::StdoutSerializer
  def initialize(wrap=T.unsafe(nil)); end

  def serialize(_object, data); end
end

class YARD::Serializers::StdoutSerializer
end

class YARD::Serializers::YardocSerializer
  def checksums_path(); end

  def complete?(); end

  def complete_lock_path(); end

  def deserialize(path, is_path=T.unsafe(nil)); end

  def initialize(yfile); end

  def lock_for_writing(); end

  def locked_for_writing?(); end

  def object_types_path(); end

  def objects_path(); end

  def processing_path(); end

  def proxy_types_path(); end

  def serialize(object); end
end

class YARD::Serializers::YardocSerializer
end

module YARD::Server
  CR = ::T.let(nil, ::T.untyped)
  CRLF = ::T.let(nil, ::T.untyped)
  LF = ::T.let(nil, ::T.untyped)
end

class YARD::Server::Adapter
  def add_library(library); end

  def document_root(); end

  def document_root=(document_root); end

  def initialize(libs, opts=T.unsafe(nil), server_opts=T.unsafe(nil)); end

  def libraries(); end

  def libraries=(libraries); end

  def options(); end

  def options=(options); end

  def router(); end

  def router=(router); end

  def server_options(); end

  def server_options=(server_options); end

  def start(); end
end

class YARD::Server::Adapter
  def self.setup(); end

  def self.shutdown(); end
end

class YARD::Server::Commands::Base
  def adapter(); end

  def adapter=(adapter); end

  def body(); end

  def body=(body); end

  def cache(data); end

  def caching(); end

  def caching=(caching); end

  def call(request); end

  def command_options(); end

  def command_options=(command_options); end

  def headers(); end

  def headers=(headers); end

  def initialize(opts=T.unsafe(nil)); end

  def not_found(); end

  def path(); end

  def path=(path); end

  def redirect(url); end

  def render(object=T.unsafe(nil)); end

  def request(); end

  def request=(request); end

  def run(); end

  def status(); end

  def status=(status); end
end

class YARD::Server::Commands::Base
end

class YARD::Server::Commands::DisplayFileCommand
  def index(); end

  def index=(index); end
end

class YARD::Server::Commands::DisplayFileCommand
end

class YARD::Server::Commands::DisplayObjectCommand
  include ::YARD::Server::DocServerHelper
  def index(); end
end

class YARD::Server::Commands::DisplayObjectCommand
end

class YARD::Server::Commands::FramesCommand
end

class YARD::Server::Commands::FramesCommand
end

class YARD::Server::Commands::LibraryCommand
  def incremental(); end

  def incremental=(incremental); end

  def library(); end

  def library=(library); end

  def options(); end

  def options=(options); end

  def serializer(); end

  def serializer=(serializer); end

  def single_library(); end

  def single_library=(single_library); end

  def use_fork(); end

  def use_fork=(use_fork); end
  CAN_FORK = ::T.let(nil, ::T.untyped)
end

class YARD::Server::Commands::LibraryCommand
end

class YARD::Server::Commands::LibraryIndexCommand
  def options(); end

  def options=(options); end
end

class YARD::Server::Commands::LibraryIndexCommand
end

class YARD::Server::Commands::ListCommand
  include ::YARD::Templates::Helpers::BaseHelper
end

class YARD::Server::Commands::ListCommand
end

class YARD::Server::Commands::RootRequestCommand
  include ::YARD::Server::Commands::StaticFileHelpers
  include ::YARD::Server::HTTPUtils
end

class YARD::Server::Commands::RootRequestCommand
end

class YARD::Server::Commands::SearchCommand
  include ::YARD::Templates::Helpers::BaseHelper
  include ::YARD::Templates::Helpers::ModuleHelper
  include ::YARD::Server::DocServerHelper
  def query(); end

  def query=(query); end

  def results(); end

  def results=(results); end

  def visible_results(); end
end

class YARD::Server::Commands::SearchCommand
end

class YARD::Server::Commands::StaticFileCommand
  include ::YARD::Server::Commands::StaticFileHelpers
  include ::YARD::Server::HTTPUtils
  STATIC_PATHS = ::T.let(nil, ::T.untyped)
end

class YARD::Server::Commands::StaticFileCommand
end

module YARD::Server::Commands::StaticFileHelpers
  include ::YARD::Server::HTTPUtils
  def favicon?(); end

  def static_template_file?(); end
end

module YARD::Server::Commands::StaticFileHelpers
  def self.find_file(adapter, url); end
end

module YARD::Server::DocServerHelper
  def abs_url(*path_components); end

  def base_path(path); end

  def mtime(file); end

  def mtime_url(file); end

  def router(); end

  def url_for(obj, anchor=T.unsafe(nil), relative=T.unsafe(nil)); end

  def url_for_file(filename, anchor=T.unsafe(nil)); end

  def url_for_frameset(); end

  def url_for_index(); end

  def url_for_list(type); end

  def url_for_main(); end
end

module YARD::Server::DocServerHelper
end

class YARD::Server::DocServerSerializer
  def initialize(_command=T.unsafe(nil)); end
end

class YARD::Server::DocServerSerializer
end

class YARD::Server::FinishRequest
end

class YARD::Server::FinishRequest
end

module YARD::Server::HTTPUtils
  DefaultMimeTypes = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  NONASCII = ::T.let(nil, ::T.untyped)
  UNESCAPED = ::T.let(nil, ::T.untyped)
  UNESCAPED_FORM = ::T.let(nil, ::T.untyped)
  UNESCAPED_PCHAR = ::T.let(nil, ::T.untyped)
end

class YARD::Server::HTTPUtils::FormData
  def <<(str); end

  def [](*key); end

  def append_data(data); end

  def each_data(); end

  def filename(); end

  def filename=(filename); end

  def initialize(*args); end

  def list(); end

  def name(); end

  def name=(name); end

  def next_data(); end

  def next_data=(next_data); end

  def to_ary(); end
  EmptyHeader = ::T.let(nil, ::T.untyped)
  EmptyRawHeader = ::T.let(nil, ::T.untyped)
end

class YARD::Server::HTTPUtils::FormData
end

module YARD::Server::HTTPUtils
  def self._escape(str, regex); end

  def self._make_regex(str); end

  def self._make_regex!(str); end

  def self._unescape(str, regex); end

  def self.dequote(str); end

  def self.escape(str); end

  def self.escape8bit(str); end

  def self.escape_form(str); end

  def self.escape_path(str); end

  def self.load_mime_types(file); end

  def self.mime_type(filename, mime_tab); end

  def self.normalize_path(path); end

  def self.parse_form_data(io, boundary); end

  def self.parse_header(raw); end

  def self.parse_query(str); end

  def self.parse_qvalues(value); end

  def self.parse_range_header(ranges_specifier); end

  def self.quote(str); end

  def self.split_header_value(str); end

  def self.unescape(str); end

  def self.unescape_form(str); end
end

class YARD::Server::LibraryVersion
  def ==(other); end

  def eql?(other); end

  def equal?(other); end

  def gemspec(); end

  def initialize(name, version=T.unsafe(nil), yardoc=T.unsafe(nil), source=T.unsafe(nil)); end

  def load_yardoc_from_disk(); end

  def load_yardoc_from_gem(); end

  def name(); end

  def name=(name); end

  def prepare!(); end

  def ready?(); end

  def source(); end

  def source=(source); end

  def source_path(); end

  def source_path=(source_path); end

  def source_path_for_disk(); end

  def source_path_for_gem(); end

  def to_s(url_format=T.unsafe(nil)); end

  def version(); end

  def version=(version); end

  def yardoc_file(); end

  def yardoc_file=(yardoc_file); end

  def yardoc_file_for_gem(); end
end

class YARD::Server::LibraryVersion
end

class YARD::Server::NotFoundError
end

class YARD::Server::NotFoundError
end

class YARD::Server::Router
  include ::YARD::Server::StaticCaching
  include ::YARD::Server::Commands
  def adapter(); end

  def adapter=(adapter); end

  def call(request); end

  def docs_prefix(); end

  def final_options(library, paths); end

  def initialize(adapter); end

  def list_prefix(); end

  def parse_library_from_path(paths); end

  def request(); end

  def request=(request); end

  def route(path=T.unsafe(nil)); end

  def route_docs(library, paths); end

  def route_index(); end

  def route_list(library, paths); end

  def route_search(library, paths); end

  def route_static(library, paths); end

  def search_prefix(); end

  def static_prefix(); end
end

class YARD::Server::Router
end

module YARD::Server::StaticCaching
  def check_static_cache(); end
end

module YARD::Server::StaticCaching
end

class YARD::Server::WebrickAdapter
end

class YARD::Server::WebrickAdapter
end

class YARD::Server::WebrickServlet
  def adapter(); end

  def adapter=(adapter); end

  def do_GET(request, response); end

  def initialize(server, adapter); end
end

class YARD::Server::WebrickServlet
end

class YARD::StubProxy
  def _dump(_depth); end

  def initialize(path, transient=T.unsafe(nil)); end

  def method_missing(meth, *args, &block); end
  FILELEN = ::T.let(nil, ::T.untyped)
end

class YARD::StubProxy
  def self._load(str); end
end

class YARD::Tags::DefaultFactory
  def parse_tag(tag_name, text); end

  def parse_tag_with_name(tag_name, text); end

  def parse_tag_with_options(tag_name, text); end

  def parse_tag_with_title_and_text(tag_name, text); end

  def parse_tag_with_types(tag_name, text); end

  def parse_tag_with_types_and_name(tag_name, text); end

  def parse_tag_with_types_and_title(tag_name, text); end

  def parse_tag_with_types_name_and_default(tag_name, text); end
  TYPELIST_CLOSING_CHARS = ::T.let(nil, ::T.untyped)
  TYPELIST_OPENING_CHARS = ::T.let(nil, ::T.untyped)
end

class YARD::Tags::DefaultFactory
end

class YARD::Tags::DefaultTag
  def defaults(); end

  def initialize(tag_name, text, types=T.unsafe(nil), name=T.unsafe(nil), defaults=T.unsafe(nil)); end
end

class YARD::Tags::DefaultTag
end

class YARD::Tags::Directive
  def after_parse(); end

  def call(); end

  def expanded_text(); end

  def expanded_text=(expanded_text); end

  def handler(); end

  def initialize(tag, parser); end

  def inside_directive?(); end

  def object(); end

  def parser(); end

  def parser=(parser); end

  def tag(); end

  def tag=(tag); end
end

class YARD::Tags::Library
  def abstract_tag(text); end

  def api_tag(text); end

  def attr_reader_tag(text); end

  def attr_tag(text); end

  def attr_writer_tag(text); end

  def attribute_directive(tag, parser); end

  def author_tag(text); end

  def deprecated_tag(text); end

  def directive_create(tag_name, tag_buf, parser); end

  def endgroup_directive(tag, parser); end

  def example_tag(text); end

  def factory(); end

  def factory=(factory); end

  def group_directive(tag, parser); end

  def has_directive?(tag_name); end

  def has_tag?(tag_name); end

  def initialize(factory=T.unsafe(nil)); end

  def macro_directive(tag, parser); end

  def method_directive(tag, parser); end

  def note_tag(text); end

  def option_tag(text); end

  def overload_tag(text); end

  def param_tag(text); end

  def parse_directive(tag, parser); end

  def private_tag(text); end

  def raise_tag(text); end

  def return_tag(text); end

  def scope_directive(tag, parser); end

  def see_tag(text); end

  def since_tag(text); end

  def tag_create(tag_name, tag_buf); end

  def todo_tag(text); end

  def version_tag(text); end

  def visibility_directive(tag, parser); end

  def yield_tag(text); end

  def yieldparam_tag(text); end

  def yieldreturn_tag(text); end
end

class YARD::Tags::Library
  def self.default_factory(); end

  def self.default_factory=(factory); end

  def self.define_directive(tag, tag_meth=T.unsafe(nil), directive_class=T.unsafe(nil)); end

  def self.define_tag(label, tag, meth=T.unsafe(nil)); end

  def self.directive_method_name(tag_name); end

  def self.factory_method_for(tag); end

  def self.factory_method_for_directive(directive); end

  def self.instance(); end

  def self.labels(); end

  def self.sorted_labels(); end

  def self.tag_method_name(tag_name); end

  def self.transitive_tags(); end

  def self.transitive_tags=(transitive_tags); end

  def self.visible_tags(); end

  def self.visible_tags=(visible_tags); end
end

class YARD::Tags::MethodDirective
  def create_object(); end

  def method_name(); end

  def method_signature(); end

  def sanitized_tag_signature(); end

  def use_indented_text(); end
  SCOPE_MATCH = ::T.let(nil, ::T.untyped)
end

class YARD::Tags::OptionTag
  def initialize(tag_name, name, pair); end

  def pair(); end

  def pair=(pair); end
end

class YARD::Tags::OptionTag
end

class YARD::Tags::OverloadTag
  def docstring(); end

  def has_tag?(name); end

  def initialize(tag_name, text); end

  def is_a?(other); end

  def kind_of?(other); end

  def method_missing(*args, &block); end

  def name(prefix=T.unsafe(nil)); end

  def object=(value); end

  def parameters(); end

  def signature(); end

  def tag(name); end

  def tags(name=T.unsafe(nil)); end
end

module YARD::Tags::RefTag
  def owner(); end

  def owner=(owner); end
end

module YARD::Tags::RefTag
end

class YARD::Tags::RefTagList
  def initialize(tag_name, owner, name=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def owner(); end

  def owner=(owner); end

  def tag_name(); end

  def tag_name=(tag_name); end

  def tags(); end
end

class YARD::Tags::RefTagList
end

class YARD::Tags::Tag
  def explain_types(); end

  def initialize(tag_name, text, types=T.unsafe(nil), name=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def object(); end

  def object=(object); end

  def tag_name(); end

  def tag_name=(tag_name); end

  def text(); end

  def text=(text); end

  def type(); end

  def types(); end

  def types=(types); end
end

class YARD::Tags::TagFormatError
end

class YARD::Tags::TagFormatError
end

class YARD::Tags::TypesExplainer
end

class YARD::Tags::TypesExplainer::CollectionType
  def initialize(name, types); end

  def to_s(_singular=T.unsafe(nil)); end

  def types(); end

  def types=(types); end
end

class YARD::Tags::TypesExplainer::CollectionType
end

class YARD::Tags::TypesExplainer::FixedCollectionType
end

class YARD::Tags::TypesExplainer::FixedCollectionType
end

class YARD::Tags::TypesExplainer::HashCollectionType
  def initialize(name, key_types, value_types); end

  def key_types(); end

  def key_types=(key_types); end

  def to_s(_singular=T.unsafe(nil)); end

  def value_types(); end

  def value_types=(value_types); end
end

class YARD::Tags::TypesExplainer::HashCollectionType
end

class YARD::Tags::TypesExplainer::Parser
  include ::YARD::CodeObjects
  def initialize(string); end

  def parse(); end
  TOKENS = ::T.let(nil, ::T.untyped)
end

class YARD::Tags::TypesExplainer::Parser
  def self.parse(string); end
end

class YARD::Tags::TypesExplainer::Type
  def initialize(name); end

  def name(); end

  def name=(name); end

  def to_s(singular=T.unsafe(nil)); end
end

class YARD::Tags::TypesExplainer::Type
end

class YARD::Tags::TypesExplainer
  def self.explain(*types); end

  def self.explain!(*types); end
end

module YARD::Templates::Engine
end

module YARD::Templates::Engine
  def self.generate(objects, options=T.unsafe(nil)); end

  def self.register_template_path(path); end

  def self.render(options=T.unsafe(nil)); end

  def self.template(*path); end

  def self.template!(path, full_paths=T.unsafe(nil)); end

  def self.template_paths(); end

  def self.template_paths=(template_paths); end

  def self.with_serializer(object, serializer); end
end

module YARD::Templates::ErbCache
end

module YARD::Templates::ErbCache
  def self.clear!(); end

  def self.method_for(filename); end
end

module YARD::Templates::Helpers::BaseHelper
  def format_object_title(object); end

  def format_object_type(object); end

  def format_source(value); end

  def format_types(list, brackets=T.unsafe(nil)); end

  def globals(); end

  def h(text); end

  def link_file(filename, title=T.unsafe(nil), anchor=T.unsafe(nil)); end

  def link_include_file(file); end

  def link_include_object(obj); end

  def link_object(obj, title=T.unsafe(nil)); end

  def link_url(url, title=T.unsafe(nil), params=T.unsafe(nil)); end

  def linkify(*args); end

  def object(); end

  def object=(object); end

  def owner(); end

  def run_verifier(list); end

  def serializer(); end

  def serializer=(serializer); end
end

module YARD::Templates::Helpers::BaseHelper
end

module YARD::Templates::Helpers::FilterHelper
  def is_class?(object); end

  def is_method?(object); end

  def is_module?(object); end

  def is_namespace?(object); end
end

module YARD::Templates::Helpers::FilterHelper
end

module YARD::Templates::Helpers::HtmlHelper
  include ::YARD::Templates::Helpers::MarkupHelper
  include ::YARD::Templates::Helpers::HtmlSyntaxHighlightHelper
  include ::YARD::Templates::Helpers::ModuleHelper
  def anchor_for(object); end

  def charset(); end

  def format_object_name_list(objects); end

  def format_types(typelist, brackets=T.unsafe(nil)); end

  def h(text); end

  def html_markup_asciidoc(text); end

  def html_markup_html(text); end

  def html_markup_markdown(text); end

  def html_markup_none(text); end

  def html_markup_org(text); end

  def html_markup_pre(text); end

  def html_markup_rdoc(text); end

  def html_markup_ruby(source); end

  def html_markup_text(text); end

  def html_markup_textile(text); end

  def html_markup_textile_strict(text); end

  def html_syntax_highlight(source, type=T.unsafe(nil)); end

  def html_syntax_highlight_plain(source); end

  def htmlify(text, markup=T.unsafe(nil)); end

  def htmlify_line(*args); end

  def insert_include(text, markup=T.unsafe(nil)); end

  def link_file(filename, title=T.unsafe(nil), anchor=T.unsafe(nil)); end

  def link_include_file(file); end

  def link_include_object(obj); end

  def link_object(obj, title=T.unsafe(nil), anchor=T.unsafe(nil), relative=T.unsafe(nil)); end

  def link_url(url, title=T.unsafe(nil), params=T.unsafe(nil)); end

  def mtime(_file); end

  def mtime_url(obj, anchor=T.unsafe(nil), relative=T.unsafe(nil)); end

  def resolve_links(text); end

  def signature(meth, link=T.unsafe(nil), show_extras=T.unsafe(nil), full_attr_name=T.unsafe(nil)); end

  def signature_types(meth, link=T.unsafe(nil)); end

  def url_for(obj, anchor=T.unsafe(nil), relative=T.unsafe(nil)); end

  def url_for_file(filename, anchor=T.unsafe(nil)); end

  def url_for_frameset(); end

  def url_for_index(); end

  def url_for_list(type); end

  def url_for_main(); end
  ASCIIDOC_ATTRIBUTES = ::T.let(nil, ::T.untyped)
  URLMATCH = ::T.let(nil, ::T.untyped)
end

module YARD::Templates::Helpers::HtmlHelper
  def self.urlencode(text); end
end

module YARD::Templates::Helpers::HtmlSyntaxHighlightHelper
  include ::YARD::Templates::Helpers::ModuleHelper
  def html_syntax_highlight_ruby(source); end
end

module YARD::Templates::Helpers::HtmlSyntaxHighlightHelper
end

class YARD::Templates::Helpers::Markup::RDocMarkdown
  def fix_typewriter(html); end
end

class YARD::Templates::Helpers::Markup::RDocMarkdown
end

class YARD::Templates::Helpers::Markup::RDocMarkup
  def from_path(); end

  def from_path=(from_path); end

  def initialize(text); end

  def to_html(); end
end

YARD::Templates::Helpers::Markup::RDocMarkup::MARKUP = RDoc::Markup

class YARD::Templates::Helpers::Markup::RDocMarkup
end

module YARD::Templates::Helpers::MarkupHelper
  def load_markup_provider(type=T.unsafe(nil)); end

  def markup_class(type=T.unsafe(nil)); end

  def markup_file_contents(contents); end

  def markup_for_file(contents, filename); end

  def markup_provider(type=T.unsafe(nil)); end
  MARKUP_EXTENSIONS = ::T.let(nil, ::T.untyped)
  MARKUP_FILE_SHEBANG = ::T.let(nil, ::T.untyped)
  MARKUP_PROVIDERS = ::T.let(nil, ::T.untyped)
end

module YARD::Templates::Helpers::MarkupHelper
  def self.clear_markup_cache(); end

  def self.markup_cache(); end

  def self.markup_cache=(markup_cache); end
end

module YARD::Templates::Helpers::MethodHelper
  def format_args(object); end

  def format_block(object); end

  def format_code(object, _show_lines=T.unsafe(nil)); end

  def format_constant(value); end

  def format_lines(object); end

  def format_return_types(object); end
end

module YARD::Templates::Helpers::MethodHelper
end

module YARD::Templates::Helpers::ModuleHelper
  def prune_method_listing(list, hide_attributes=T.unsafe(nil)); end
end

module YARD::Templates::Helpers::ModuleHelper
end

module YARD::Templates::Helpers::TextHelper
  def align_right(text, spacer=T.unsafe(nil), col=T.unsafe(nil)); end

  def h(text); end

  def hr(col=T.unsafe(nil), sep=T.unsafe(nil)); end

  def indent(text, len=T.unsafe(nil)); end

  def signature(meth); end

  def title_align_right(text, col=T.unsafe(nil)); end

  def wrap(text, col=T.unsafe(nil)); end
end

module YARD::Templates::Helpers::TextHelper
end

module YARD::Templates::Helpers::UMLHelper
  def format_path(object); end

  def h(text); end

  def tidy(data); end

  def uml_visibility(object); end
end

module YARD::Templates::Helpers::UMLHelper
end

class YARD::Templates::Section
  def <<(*args); end

  def ==(other); end

  def [](*args); end

  def any(item); end

  def eql?(other); end

  def initialize(name, *args); end

  def name(); end

  def name=(name); end

  def place(*args); end

  def push(*args); end

  def unshift(*args); end
end

class YARD::Templates::Section
end

module YARD::Templates::Template
  include ::YARD::Templates::ErbCache
  include ::YARD::Templates::Helpers::BaseHelper
  include ::YARD::Templates::Helpers::MethodHelper
  def T(*path); end

  def class(); end

  def class=(arg); end

  def erb(section, &block); end

  def erb_file_for(section); end

  def erb_with(content, filename=T.unsafe(nil)); end

  def file(basename, allow_inherited=T.unsafe(nil)); end

  def init(); end

  def initialize(opts=T.unsafe(nil)); end

  def inspect(); end

  def options(); end

  def options=(value); end

  def run(opts=T.unsafe(nil), sects=T.unsafe(nil), start_at=T.unsafe(nil), break_first=T.unsafe(nil), &block); end

  def section(); end

  def section=(section); end

  def sections(*args); end

  def superb(sect=T.unsafe(nil), &block); end

  def yieldall(opts=T.unsafe(nil), &block); end
end

module YARD::Templates::Template::ClassMethods
  def S(*args); end

  def T(*path); end

  def find_file(basename); end

  def find_nth_file(basename, index=T.unsafe(nil)); end

  def full_path(); end

  def full_path=(full_path); end

  def full_paths(); end

  def initialize(path, full_paths); end

  def is_a?(klass); end

  def new(*args); end

  def path(); end

  def path=(path); end

  def reset_full_paths(); end

  def run(*args); end
end

module YARD::Templates::Template::ClassMethods
end

module YARD::Templates::Template
  def self.extra_includes(); end

  def self.extra_includes=(extra_includes); end

  def self.include_extra(template, options); end

  def self.included(klass); end
end

class YARD::Verifier
  def add_expressions(*expressions); end

  def call(object); end

  def expressions(); end

  def expressions=(value); end

  def initialize(*expressions); end

  def method_missing(sym, *args, &block); end

  def o(); end

  def object(); end

  def run(list); end
  NILCLASS_METHODS = ::T.let(nil, ::T.untyped)
end

class YARD::Verifier
end

module Zeitwerk
  VERSION = ::T.let(nil, ::T.untyped)
end

class Zeitwerk::Loader
  extend ::Zeitwerk::RealModName
end

module Zip
  CDIR_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  CENTRAL_DIRECTORY_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHODS = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_AES = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_BZIP2 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_DEFLATE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_DEFLATE_64 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_CMPSC = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_LZ77 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IBM_TERSE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_IMPLODE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_JPEG = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_LZMA = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_PKWARE_DCLI = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_PPMD = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_1 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_2 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_3 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_REDUCE_4 = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_SHRINK = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_STORE = ::T.let(nil, ::T.untyped)
  COMPRESSION_METHOD_WAVPACK = ::T.let(nil, ::T.untyped)
  FILE_TYPE_DIR = ::T.let(nil, ::T.untyped)
  FILE_TYPE_FILE = ::T.let(nil, ::T.untyped)
  FILE_TYPE_SYMLINK = ::T.let(nil, ::T.untyped)
  FSTYPES = ::T.let(nil, ::T.untyped)
  FSTYPE_ACORN = ::T.let(nil, ::T.untyped)
  FSTYPE_AMIGA = ::T.let(nil, ::T.untyped)
  FSTYPE_ATARI = ::T.let(nil, ::T.untyped)
  FSTYPE_ATHEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_BEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_CPM = ::T.let(nil, ::T.untyped)
  FSTYPE_FAT = ::T.let(nil, ::T.untyped)
  FSTYPE_HPFS = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC = ::T.let(nil, ::T.untyped)
  FSTYPE_MAC_OSX = ::T.let(nil, ::T.untyped)
  FSTYPE_MVS = ::T.let(nil, ::T.untyped)
  FSTYPE_NTFS = ::T.let(nil, ::T.untyped)
  FSTYPE_QDOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TANDEM = ::T.let(nil, ::T.untyped)
  FSTYPE_THEOS = ::T.let(nil, ::T.untyped)
  FSTYPE_TOPS20 = ::T.let(nil, ::T.untyped)
  FSTYPE_UNIX = ::T.let(nil, ::T.untyped)
  FSTYPE_VFAT = ::T.let(nil, ::T.untyped)
  FSTYPE_VMS = ::T.let(nil, ::T.untyped)
  FSTYPE_VM_CMS = ::T.let(nil, ::T.untyped)
  FSTYPE_Z_SYSTEM = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_SIGNATURE = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_STATIC_HEADER_LENGTH = ::T.let(nil, ::T.untyped)
  LOCAL_ENTRY_TRAILING_DESCRIPTOR_LENGTH = ::T.let(nil, ::T.untyped)
  RUNNING_ON_WINDOWS = ::T.let(nil, ::T.untyped)
  V3_API_WARNING_MSG = ::T.let(nil, ::T.untyped)
  VERSION_MADE_BY = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT = ::T.let(nil, ::T.untyped)
  VERSION_NEEDED_TO_EXTRACT_ZIP64 = ::T.let(nil, ::T.untyped)
end

class Zip::CentralDirectory
  END_OF_CDS = ::T.let(nil, ::T.untyped)
  MAX_END_OF_CDS_SIZE = ::T.let(nil, ::T.untyped)
  STATIC_EOCD_SIZE = ::T.let(nil, ::T.untyped)
  ZIP64_END_OF_CDS = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_LOCATOR = ::T.let(nil, ::T.untyped)
end

class Zip::Decompressor
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::DecryptedIo
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::Entry
  DEFLATED = ::T.let(nil, ::T.untyped)
  EFS = ::T.let(nil, ::T.untyped)
  STORED = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField
  ID_MAP = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::IUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::NTFS
  HEADER_ID = ::T.let(nil, ::T.untyped)
  SEC_TO_UNIX_EPOCH = ::T.let(nil, ::T.untyped)
  WINDOWS_TICK = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::OldUnix
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::UniversalTime
  ATIME_MASK = ::T.let(nil, ::T.untyped)
  CTIME_MASK = ::T.let(nil, ::T.untyped)
  HEADER_ID = ::T.let(nil, ::T.untyped)
  MTIME_MASK = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::ExtraField::Zip64Placeholder
  HEADER_ID = ::T.let(nil, ::T.untyped)
end

class Zip::File
  CREATE = ::T.let(nil, ::T.untyped)
  DATA_BUFFER_SIZE = ::T.let(nil, ::T.untyped)
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  IO_METHODS = ::T.let(nil, ::T.untyped)
  MAX_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  MIN_SEGMENT_SIZE = ::T.let(nil, ::T.untyped)
  SPLIT_SIGNATURE = ::T.let(nil, ::T.untyped)
  ZIP64_EOCD_SIGNATURE = ::T.let(nil, ::T.untyped)
end

module Zip::FileSystem
  def dir(); end

  def file(); end

  def initialize(); end
end

class Zip::FileSystem::ZipFileNameMapper
  def each(&blk); end

  def expand_path(path); end

  def find_entry(filename); end

  def get_entry(filename); end

  def get_input_stream(filename, &a_proc); end

  def get_output_stream(filename, permissions=T.unsafe(nil), &a_proc); end

  def glob(pattern, *flags, &block); end

  def initialize(zip_file); end

  def mkdir(filename, permissions=T.unsafe(nil)); end

  def pwd(); end

  def pwd=(pwd); end

  def read(filename); end

  def remove(filename); end

  def rename(filename, new_name, &continue_on_exists_proc); end
end

class Zip::FileSystem::ZipFsDir
  def chdir(directory_name); end

  def chroot(*_args); end

  def delete(entry_name); end

  def entries(directory_name); end

  def file=(file); end

  def foreach(directory_name); end

  def getwd(); end

  def glob(*args, &block); end

  def initialize(mapped_zip); end

  def mkdir(entry_name, permissions=T.unsafe(nil)); end

  def new(directory_name); end

  def open(directory_name); end

  def pwd(); end

  def rmdir(entry_name); end

  def unlink(entry_name); end
end

class Zip::FileSystem::ZipFsDirIterator
  def close(); end

  def each(&a_proc); end

  def initialize(filenames); end

  def read(); end

  def rewind(); end

  def seek(position); end

  def tell(); end
end

class Zip::FileSystem::ZipFsFile
  def atime(filename); end

  def basename(filename); end

  def blockdev?(_filename); end

  def chardev?(_filename); end

  def chmod(mode, *filenames); end

  def chown(owner, group, *filenames); end

  def ctime(filename); end

  def delete(*args); end

  def dir=(dir); end

  def directory?(filename); end

  def dirname(filename); end

  def executable?(filename); end

  def executable_real?(filename); end

  def exist?(filename); end

  def exists?(filename); end

  def expand_path(path); end

  def file?(filename); end

  def foreach(filename, sep=T.unsafe(nil), &a_proc); end

  def ftype(filename); end

  def grpowned?(filename); end

  def initialize(mapped_zip); end

  def join(*fragments); end

  def link(_filename, _symlink_name); end

  def lstat(filename); end

  def mtime(filename); end

  def new(filename, mode=T.unsafe(nil)); end

  def open(filename, mode=T.unsafe(nil), permissions=T.unsafe(nil), &block); end

  def owned?(filename); end

  def pipe(); end

  def pipe?(_filename); end

  def popen(*args, &a_proc); end

  def read(filename); end

  def readable?(filename); end

  def readable_real?(filename); end

  def readlines(filename); end

  def readlink(_filename); end

  def rename(file_to_rename, new_name); end

  def setgid?(filename); end

  def setuid?(filename); end

  def size(filename); end

  def size?(filename); end

  def socket?(_filename); end

  def split(filename); end

  def stat(filename); end

  def sticky?(filename); end

  def symlink(_filename, _symlink_name); end

  def symlink?(_filename); end

  def truncate(_filename, _len); end

  def umask(*args); end

  def unlink(*args); end

  def utime(modified_time, *filenames); end

  def writable?(filename); end

  def writable_real?(filename); end

  def zero?(filename); end
end

class Zip::FileSystem::ZipFsFile::ZipFsStat
  def atime(); end

  def blksize(); end

  def blockdev?(); end

  def blocks(); end

  def chardev?(); end

  def ctime(); end

  def dev(); end

  def directory?(); end

  def executable?(); end

  def executable_real?(); end

  def file?(); end

  def ftype(); end

  def gid(); end

  def grpowned?(); end

  def initialize(zip_fs_file, entry_name); end

  def ino(); end

  def kind_of?(type); end

  def mode(); end

  def mtime(); end

  def nlink(); end

  def owned?(); end

  def pipe?(); end

  def rdev(); end

  def rdev_major(); end

  def rdev_minor(); end

  def readable?(); end

  def readable_real?(); end

  def setgid?(); end

  def setuid?(); end

  def size(); end

  def size?(); end

  def socket?(); end

  def sticky?(); end

  def symlink?(); end

  def uid(); end

  def writable?(); end

  def writable_real?(); end

  def zero?(); end
end

class Zip::FileSystem::ZipFsFile::ZipFsStat
  def self.delegate_to_fs_file(*methods); end
end

module Zip::IOExtras
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
  RANGE_ALL = ::T.let(nil, ::T.untyped)
end

class Zip::InputStream
  CHUNK_SIZE = ::T.let(nil, ::T.untyped)
end

class Zip::StreamableStream
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

Zip::ZipCompressionMethodError = Zip::CompressionMethodError

Zip::ZipDestinationFileExistsError = Zip::DestinationFileExistsError

Zip::ZipEntryExistsError = Zip::EntryExistsError

Zip::ZipEntryNameError = Zip::EntryNameError

Zip::ZipError = Zip::Error

Zip::ZipInternalError = Zip::InternalError

class Zlib::Deflate
  def initialize(*arg); end
end

class Zlib::GzipReader
  def initialize(*arg); end
end

class Zlib::GzipReader
  def self.zcat(*arg); end
end

class Zlib::GzipWriter
  def initialize(*arg); end
end

class Zlib::InProgressError
end

class Zlib::InProgressError
end

class Zlib::Inflate
  def initialize(*arg); end
end

# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/dalli/all/dalli.rbi
#
# dalli-3.2.8

module Dalli
  def self.default_logger; end
  def self.logger; end
  def self.logger=(logger); end
  def self.rails_logger; end
end
class Dalli::Compressor
  def self.compress(data); end
  def self.decompress(data); end
end
class Dalli::GzipCompressor
  def self.compress(data); end
  def self.decompress(data); end
end
class Dalli::Client
  def add(key, value, ttl = nil, req_options = nil); end
  def alive!; end
  def append(key, value); end
  def cache_nils; end
  def cas!(key, ttl = nil, req_options = nil, &block); end
  def cas(key, ttl = nil, req_options = nil, &block); end
  def cas_core(key, always_set, ttl = nil, req_options = nil); end
  def check_positive!(amt); end
  def close; end
  def decr(key, amt = nil, ttl = nil, default = nil); end
  def delete(key); end
  def delete_cas(key, cas = nil); end
  def fetch(key, ttl = nil, req_options = nil); end
  def flush(delay = nil); end
  def flush_all(delay = nil); end
  def gat(key, ttl = nil); end
  def get(key, req_options = nil); end
  def get_cas(key); end
  def get_multi(*keys); end
  def get_multi_cas(*keys); end
  def incr(key, amt = nil, ttl = nil, default = nil); end
  def initialize(servers = nil, options = nil); end
  def multi; end
  def normalize_options(opts); end
  def not_found?(val); end
  def perform(*all_args); end
  def pipelined_getter; end
  def prepend(key, value); end
  def protocol_implementation; end
  def quiet; end
  def replace(key, value, ttl = nil, req_options = nil); end
  def replace_cas(key, value, cas, ttl = nil, req_options = nil); end
  def reset; end
  def reset_stats; end
  def ring; end
  def set(key, value, ttl = nil, req_options = nil); end
  def set_cas(key, value, cas, ttl = nil, req_options = nil); end
  def stats(type = nil); end
  def touch(key, ttl = nil); end
  def ttl_or_default(ttl); end
  def version; end
  def with; end
end
class Dalli::KeyManager
  def digest_class; end
  def evaluate_namespace; end
  def initialize(client_options); end
  def key_with_namespace(key); end
  def key_without_namespace(key); end
  def namespace; end
  def namespace_from_options; end
  def namespace_regexp; end
  def prefix_length(digest); end
  def truncated_key(key); end
  def validate_digest_class_option(opts); end
  def validate_key(key); end
end
class Dalli::PipelinedGetter
  def abort_with_timeout(servers); end
  def abort_without_timeout(servers); end
  def fetch_responses(servers, start_time, timeout, &block); end
  def finish_queries(servers); end
  def finish_query_for_server(server); end
  def groups_for_keys(*keys); end
  def initialize(ring, key_manager); end
  def make_getkq_requests(groups); end
  def process(keys, &block); end
  def process_server(server); end
  def remaining_time(start, timeout); end
  def servers_with_response(servers, timeout); end
  def setup_requests(keys); end
end
class Dalli::Ring
  def build_continuum(servers); end
  def close; end
  def continuum; end
  def continuum=(arg0); end
  def entry_count_for(server, total_servers, total_weight); end
  def hash_for(key); end
  def initialize(servers_arg, protocol_implementation, options); end
  def keys_grouped_by_server(key_arr); end
  def lock; end
  def pipeline_consume_and_ignore_responses; end
  def server_for_hash_key(hash_key); end
  def server_for_key(key); end
  def server_from_continuum(key); end
  def servers; end
  def servers=(arg0); end
  def socket_timeout; end
  def threadsafe!; end
end
class Dalli::Ring::Entry
  def initialize(val, srv); end
  def server; end
  def value; end
end
module Dalli::Protocol
end
class Dalli::Protocol::Base
  def alive?; end
  def cache_nils?(opts); end
  def close(*args, **, &block); end
  def compress_by_default?(*args, **, &block); end
  def compression_min_size(*args, **, &block); end
  def compressor(*args, **, &block); end
  def connect; end
  def connected?(*args, **, &block); end
  def down!(*args, **, &block); end
  def ensure_connected!; end
  def finish_pipeline; end
  def hostname(*args, **, &block); end
  def initialize(attribs, client_options = nil); end
  def lock!; end
  def log_marshal_err(key, err); end
  def log_unexpected_err(err); end
  def multi?; end
  def name(*args, **, &block); end
  def options; end
  def options=(arg0); end
  def password; end
  def pipeline_abort; end
  def pipeline_complete?; end
  def pipeline_next_responses; end
  def pipeline_response_setup; end
  def pipelined_get(keys); end
  def port(*args, **, &block); end
  def quiet?; end
  def raise_down_error(*args, **, &block); end
  def reconnect_down_server?(*args, **, &block); end
  def reconnect_on_pipeline_complete!; end
  def request(opkey, *args); end
  def require_auth?; end
  def response_buffer; end
  def serializer(*args, **, &block); end
  def sock(*args, **, &block); end
  def socket_timeout(*args, **, &block); end
  def socket_type(*args, **, &block); end
  def unlock!; end
  def up!(*args, **, &block); end
  def username; end
  def verify_allowed_quiet!(opkey); end
  def verify_pipelined_state(_opkey); end
  def verify_state(opkey); end
  def weight; end
  def weight=(arg0); end
  def write(*args, **, &block); end
  extend Forwardable
end
class Dalli::Protocol::Binary < Dalli::Protocol::Base
  def add(key, value, ttl, options); end
  def append(key, value); end
  def cas(key); end
  def decr(key, count, ttl, initial); end
  def decr_incr(opkey, key, count, ttl, initial); end
  def delete(key, cas); end
  def flush(ttl = nil); end
  def gat(key, ttl, options = nil); end
  def get(key, options = nil); end
  def incr(key, count, ttl, initial); end
  def noop; end
  def prepend(key, value); end
  def quiet_get_request(key); end
  def replace(key, value, ttl, cas, options); end
  def reset_stats; end
  def response_processor; end
  def set(key, value, ttl, cas, options); end
  def stats(info = nil); end
  def storage_req(opkey, key, value, ttl, cas, options); end
  def touch(key, ttl); end
  def version; end
  def write_append_prepend(opkey, key, value); end
  def write_noop; end
  include Dalli::Protocol::Binary::SaslAuthentication
end
class Dalli::Protocol::Binary::RequestFormatter
  def self.as_8byte_uint(val); end
  def self.decr_incr_request(opkey:, key: nil, count: nil, initial: nil, expiry: nil); end
  def self.standard_request(opkey:, key: nil, value: nil, opaque: nil, cas: nil, bitflags: nil, ttl: nil); end
end
class Dalli::Protocol::Binary::ResponseHeader
  def body_len; end
  def cas; end
  def data_type; end
  def extra_len; end
  def initialize(buf); end
  def key_len; end
  def not_found?; end
  def not_stored?; end
  def ok?; end
  def opaque; end
  def status; end
end
class Dalli::Protocol::Binary::ResponseProcessor
  def auth_response(buf = nil); end
  def consume_all_responses_until_noop; end
  def contains_header?(buf); end
  def data_cas_response; end
  def decr_incr; end
  def delete; end
  def flush; end
  def generic_response; end
  def get(cache_nils: nil); end
  def getk_response_from_buffer(buf); end
  def initialize(io_source, value_marshaller); end
  def no_body_response; end
  def raise_on_not_ok!(resp_header); end
  def read(num_bytes); end
  def read_header; end
  def read_response; end
  def reset; end
  def response_header_from_buffer(buf); end
  def stats; end
  def storage_response; end
  def unpack_response_body(resp_header, body, parse_as_stored_value); end
  def validate_auth_format(extra_len, count); end
  def version; end
end
module Dalli::Protocol::Binary::SaslAuthentication
  def authenticate_connection; end
  def authenticate_with_plain; end
  def perform_auth_negotiation; end
  def supported_mechanisms!(mechanisms); end
end
module Dalli::PIDCache
  def self.pid; end
  def self.update!; end
end
module Dalli::PIDCache::CoreExt
  def _fork; end
end
class Dalli::Protocol::ConnectionManager
  def abort_request!; end
  def close; end
  def close_on_fork; end
  def confirm_in_progress!; end
  def confirm_ready!; end
  def connected?; end
  def down!; end
  def error_on_request!(err_or_string); end
  def establish_connection; end
  def finish_request!; end
  def fork_detected?; end
  def hostname; end
  def hostname=(arg0); end
  def initialize(hostname, port, socket_type, client_options); end
  def log_down_detected; end
  def log_up_detected; end
  def log_warn_message(err_or_string); end
  def max_allowed_failures; end
  def memcached_socket; end
  def name; end
  def options; end
  def options=(arg0); end
  def port; end
  def port=(arg0); end
  def raise_down_error; end
  def read(count); end
  def read_line; end
  def read_nonblock; end
  def reconnect!(message); end
  def reconnect_down_server?; end
  def request_in_progress?; end
  def reset_down_info; end
  def sock; end
  def socket_timeout; end
  def socket_type; end
  def socket_type=(arg0); end
  def start_request!; end
  def up!; end
  def write(bytes); end
end
class Dalli::Protocol::Meta < Dalli::Protocol::Base
  def add(key, value, ttl, options); end
  def append(key, value); end
  def authenticate_connection; end
  def cas(key); end
  def decr(key, count, ttl, initial); end
  def decr_incr(incr, key, delta, ttl, initial); end
  def delete(key, cas); end
  def flush(delay = nil); end
  def gat(key, ttl, options = nil); end
  def get(key, options = nil); end
  def incr(key, count, ttl, initial); end
  def noop; end
  def prepend(key, value); end
  def quiet_get_request(key); end
  def replace(key, value, ttl, cas, options); end
  def reset_stats; end
  def response_processor; end
  def set(key, value, ttl, cas, options); end
  def stats(info = nil); end
  def touch(key, ttl); end
  def version; end
  def write_append_prepend_req(mode, key, value, ttl = nil, cas = nil, _options = nil); end
  def write_noop; end
  def write_storage_req(mode, key, raw_value, ttl = nil, cas = nil, options = nil); end
end
class Dalli::Protocol::Meta::KeyRegularizer
  def self.decode(encoded_key, base64_encoded); end
  def self.encode(key); end
end
class Dalli::Protocol::Meta::RequestFormatter
  def self.cas_string(cas); end
  def self.flush(delay: nil, quiet: nil); end
  def self.meta_arithmetic(key:, delta:, initial:, incr: nil, cas: nil, ttl: nil, base64: nil, quiet: nil); end
  def self.meta_delete(key:, cas: nil, ttl: nil, base64: nil, quiet: nil); end
  def self.meta_get(key:, value: nil, return_cas: nil, ttl: nil, base64: nil, quiet: nil); end
  def self.meta_noop; end
  def self.meta_set(key:, value:, bitflags: nil, cas: nil, ttl: nil, mode: nil, base64: nil, quiet: nil); end
  def self.mode_to_token(mode); end
  def self.parse_to_64_bit_int(val, default); end
  def self.stats(arg = nil); end
  def self.version; end
end
class Dalli::Protocol::Meta::ResponseProcessor
  def bitflags_from_tokens(tokens); end
  def body_len_from_tokens(tokens); end
  def cas_from_tokens(tokens); end
  def consume_all_responses_until_mn; end
  def contains_header?(buf); end
  def decr_incr; end
  def error_on_unexpected!(expected_codes); end
  def flush; end
  def full_response_from_buffer(tokens, body, resp_size); end
  def getk_response_from_buffer(buf); end
  def header_from_buffer(buf); end
  def initialize(io_source, value_marshaller); end
  def key_from_tokens(tokens); end
  def meta_delete; end
  def meta_get_with_value(cache_nils: nil); end
  def meta_get_with_value_and_cas; end
  def meta_get_without_value; end
  def meta_set_append_prepend; end
  def meta_set_with_cas; end
  def next_line_to_tokens; end
  def read_line; end
  def reset; end
  def stats; end
  def tokens_from_header_buffer(buf); end
  def value_from_tokens(tokens, flag); end
  def version; end
end
class Dalli::Protocol::ResponseBuffer
  def advance(bytes_to_advance); end
  def clear; end
  def in_progress?; end
  def initialize(io_source, response_processor); end
  def process_single_getk_response; end
  def read; end
  def reset; end
end
class Dalli::Protocol::ServerConfigParser
  def self.attributes_for_tcp_socket(res); end
  def self.attributes_for_unix_socket(res); end
  def self.deconstruct_string(str); end
  def self.normalize_host_from_match(str, res); end
  def self.normalize_port(port); end
  def self.normalize_weight(weight); end
  def self.parse(str); end
  def self.parse_non_uri(str); end
  def self.parse_uri(str); end
end
class Dalli::Protocol::TtlSanitizer
  def self.as_timestamp(ttl_as_i); end
  def self.current_timestamp; end
  def self.less_than_max_expiration_interval?(ttl_as_i); end
  def self.sanitize(ttl); end
end
class Dalli::Protocol::ValueCompressor
  def compress_by_default?; end
  def compress_value?(value, req_options); end
  def compression_min_size; end
  def compressor; end
  def initialize(client_options); end
  def retrieve(value, bitflags); end
  def store(value, req_options, bitflags); end
end
class Dalli::Protocol::ValueMarshaller
  def compress_by_default?(*args, **, &block); end
  def compression_min_size(*args, **, &block); end
  def compressor(*args, **, &block); end
  def error_if_over_max_value_bytes(key, value); end
  def initialize(client_options); end
  def retrieve(value, flags); end
  def serializer(*args, **, &block); end
  def store(key, value, options = nil); end
  def value_max_bytes; end
  extend Forwardable
end
class Dalli::Protocol::ValueSerializer
  def filter_argument_error(err); end
  def filter_name_error(err); end
  def filter_type_error(err); end
  def initialize(protocol_options); end
  def retrieve(value, bitflags); end
  def serialization_options; end
  def serialization_options=(arg0); end
  def serialize_value(value); end
  def serializer; end
  def store(value, req_options, bitflags); end
end
module Dalli::ServersArgNormalizer
  def self.apply_defaults(arg); end
  def self.normalize_servers(arg); end
  def self.validate_type(arg); end
end
module Dalli::Socket
end
module Dalli::Socket::InstanceMethods
  def append_to_buffer?(result); end
  def logged_options; end
  def nonblock_timed_out?(result); end
  def read_available; end
  def readfull(count); end
end
class Dalli::Socket::SSLSocket < OpenSSL::SSL::SSLSocket
  def options; end
  include Dalli::Socket::InstanceMethods
end
class Dalli::Socket::TCP < TCPSocket
  def options; end
  def options=(arg0); end
  def self.create_socket_with_timeout(host, port, options); end
  def self.init_socket_options(sock, options); end
  def self.open(host, port, options = nil); end
  def self.wrapping_ssl_socket(tcp_socket, host, ssl_context); end
  include Dalli::Socket::InstanceMethods
end
class Dalli::Socket::UNIX < UNIXSocket
  def options; end
  def options=(arg0); end
  def self.open(path, options = nil); end
  include Dalli::Socket::InstanceMethods
end
module Dalli::Threadsafe
  def alive?; end
  def close; end
  def init_threadsafe; end
  def lock!; end
  def pipeline_abort; end
  def pipeline_next_responses; end
  def pipeline_response_setup; end
  def request(opcode, *args); end
  def self.extended(obj); end
  def unlock!; end
end
class Dalli::DalliError < RuntimeError
end
class Dalli::NetworkError < Dalli::DalliError
end
class Dalli::RingError < Dalli::DalliError
end
class Dalli::MarshalError < Dalli::DalliError
end
class Dalli::UnmarshalError < Dalli::DalliError
end
class Dalli::ValueOverMaxSize < Dalli::DalliError
end
class Dalli::NotPermittedMultiOpError < Dalli::DalliError
end
class Dalli::NilObject
end
module Rack
end
module Rack::Session
end
class Rack::Session::Dalli < Rack::Session::Abstract::PersistedSecure
end
